<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d4" for="edge" attr.name="edge_type" attr.type="string" />
  <key id="d3" for="node" attr.name="node_class" attr.type="string" />
  <key id="d2" for="node" attr.name="node_value" attr.type="string" />
  <key id="d1" for="node" attr.name="node_type" attr.type="string" />
  <key id="d0" for="node" attr.name="node_ID" attr.type="long" />
  <graph edgedefault="undirected">
    <node id="0">
      <data key="d0">0</data>
      <data key="d1">person</data>
      <data key="d2">TA</data>
    </node>
    <node id="1">
      <data key="d0">80</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="2">
      <data key="d0">162</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="3">
      <data key="d0">7</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="4">
      <data key="d0">170</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="5">
      <data key="d0">158</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="6">
      <data key="d0">97</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="7">
      <data key="d0">172</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="8">
      <data key="d0">173</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="9">
      <data key="d0">65</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="10">
      <data key="d0">4</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="11">
      <data key="d0">179</data>
      <data key="d1">person</data>
      <data key="d2">TA</data>
    </node>
    <node id="12">
      <data key="d0">99</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="13">
      <data key="d0">181</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="14">
      <data key="d0">183</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="15">
      <data key="d0">185</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="16">
      <data key="d0">186</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="17">
      <data key="d0">48</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="18">
      <data key="d0">190</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="19">
      <data key="d0">210</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="20">
      <data key="d0">156</data>
      <data key="d1">person</data>
      <data key="d2">TA</data>
    </node>
    <node id="21">
      <data key="d0">244</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="22">
      <data key="d0">246</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="23">
      <data key="d0">64</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="24">
      <data key="d0">93</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="25">
      <data key="d0">251</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="26">
      <data key="d0">176</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="27">
      <data key="d0">84</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="28">
      <data key="d0">272</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="29">
      <data key="d0">275</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="30">
      <data key="d0">279</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="31">
      <data key="d0">280</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="32">
      <data key="d0">281</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="33">
      <data key="d0">184</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="34">
      <data key="d0">283</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="35">
      <data key="d0">285</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="36">
      <data key="d0">286</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="37">
      <data key="d0">287</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="38">
      <data key="d0">247</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="39">
      <data key="d0">293</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="40">
      <data key="d0">169</data>
      <data key="d1">person</data>
      <data key="d2">TA</data>
    </node>
    <node id="41">
      <data key="d0">167</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="42">
      <data key="d0">319</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="43">
      <data key="d0">266</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="44">
      <data key="d0">320</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="45">
      <data key="d0">171</data>
      <data key="d1">person</data>
      <data key="d2">TA</data>
    </node>
    <node id="46">
      <data key="d0">8</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="47">
      <data key="d0">9</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="48">
      <data key="d0">159</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="49">
      <data key="d0">215</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="50">
      <data key="d0">349</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="51">
      <data key="d0">81</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="52">
      <data key="d0">354</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="53">
      <data key="d0">83</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="54">
      <data key="d0">226</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="55">
      <data key="d0">13</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="56">
      <data key="d0">206</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="57">
      <data key="d0">360</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="58">
      <data key="d0">2</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="59">
      <data key="d0">338</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="60">
      <data key="d0">362</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="61">
      <data key="d0">219</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="62">
      <data key="d0">60</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="63">
      <data key="d0">100</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="64">
      <data key="d0">12</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="65">
      <data key="d0">344</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="66">
      <data key="d0">329</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="67">
      <data key="d0">265</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="68">
      <data key="d0">30</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="69">
      <data key="d0">426</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="70">
      <data key="d0">427</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="71">
      <data key="d0">326</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="72">
      <data key="d0">49</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="73">
      <data key="d0">429</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="74">
      <data key="d0">343</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="75">
      <data key="d0">235</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="76">
      <data key="d0">430</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="77">
      <data key="d0">255</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="78">
      <data key="d0">96</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="79">
      <data key="d0">432</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="80">
      <data key="d0">433</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="81">
      <data key="d0">345</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="82">
      <data key="d0">59</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="83">
      <data key="d0">254</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="84">
      <data key="d0">438</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="85">
      <data key="d0">62</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="86">
      <data key="d0">111</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="87">
      <data key="d0">95</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="88">
      <data key="d0">106</data>
      <data key="d1">person</data>
      <data key="d2">Instructor</data>
    </node>
    <node id="89">
      <data key="d0">471</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="90">
      <data key="d0">11</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="91">
      <data key="d0">79</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="92">
      <data key="d0">473</data>
      <data key="d1">person</data>
      <data key="d2">TA</data>
    </node>
    <node id="93">
      <data key="d0">346</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="94">
      <data key="d0">474</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="95">
      <data key="d0">476</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="96">
      <data key="d0">148</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="97">
      <data key="d0">477</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="98">
      <data key="d0">478</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="99">
      <data key="d0">479</data>
      <data key="d1">person</data>
      <data key="d2">TA</data>
    </node>
    <node id="100">
      <data key="d0">482</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="101">
      <data key="d0">484</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="102">
      <data key="d0">164</data>
      <data key="d1">person</data>
      <data key="d2">TA</data>
    </node>
    <node id="103">
      <data key="d0">161</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="104">
      <data key="d0">327</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="105">
      <data key="d0">357</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="106">
      <data key="d0">292</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="107">
      <data key="d0">486</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="108">
      <data key="d0">487</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="109">
      <data key="d0">92</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="110">
      <data key="d0">150</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="111">
      <data key="d0">488</data>
      <data key="d1">person</data>
      <data key="d2">TA</data>
    </node>
    <node id="112">
      <data key="d0">489</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="113">
      <data key="d0">82</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="114">
      <data key="d0">188</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="115">
      <data key="d0">63</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="116">
      <data key="d0">351</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="117">
      <data key="d0">31</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="118">
      <data key="d0">492</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="119">
      <data key="d0">342</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="120">
      <data key="d0">493</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="121">
      <data key="d0">187</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="122">
      <data key="d0">483</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="123">
      <data key="d0">10</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="124">
      <data key="d0">495</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="125">
      <data key="d0">496</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="126">
      <data key="d0">328</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="127">
      <data key="d0">497</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="128">
      <data key="d0">249</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="129">
      <data key="d0">498</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="130">
      <data key="d0">225</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="131">
      <data key="d0">324</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="132">
      <data key="d0">212</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="133">
      <data key="d0">499</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="134">
      <data key="d0">472</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="135">
      <data key="d0">500</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="136">
      <data key="d0">502</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="137">
      <data key="d0">503</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="138">
      <data key="d0">435</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="139">
      <data key="d0">330</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="140">
      <data key="d0">441</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="141">
      <data key="d0">355</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="142">
      <data key="d0">508</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="143">
      <data key="d0">211</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="144">
      <data key="d0">400</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="145">
      <data key="d0">257</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="146">
      <data key="d0">510</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="147">
      <data key="d0">5</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="148">
      <data key="d0">258</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="149">
      <data key="d0">511</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="150">
      <data key="d0">318</data>
      <data key="d1">person</data>
      <data key="d2">TA</data>
    </node>
    <node id="151">
      <data key="d0">94</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="152">
      <data key="d0">519</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="153">
      <data key="d0">325</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="154">
      <data key="d0">98</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="155">
      <data key="d0">160</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="156">
      <data key="d0">3</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="157">
      <data key="d0">189</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="158">
      <data key="d0">363</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="159">
      <data key="d0">521</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="160">
      <data key="d0">348</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="161">
      <data key="d0">102</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="162">
      <data key="d0">50</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="163">
      <data key="d0">66</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="164">
      <data key="d0">163</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="165">
      <data key="d0">1</data>
      <data key="d1">channel</data>
      <data key="d2">general</data>
    </node>
    <node id="166">
      <data key="d0">61</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="167">
      <data key="d0">6</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="168">
      <data key="d0">236</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="169">
      <data key="d0">101</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="170">
      <data key="d0">524</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="171">
      <data key="d0">513</data>
      <data key="d1">thread</data>
      <data key="d2">Is there a zoom link for goodrich class</data>
    </node>
    <node id="172">
      <data key="d0">504</data>
      <data key="d1">thread</data>
      <data key="d2">Project 3 Hackathon</data>
    </node>
    <node id="173">
      <data key="d0">14</data>
      <data key="d1">thread</data>
      <data key="d2">Will there be a final</data>
    </node>
    <node id="174">
      <data key="d0">448</data>
      <data key="d1">thread</data>
      <data key="d2">For question 2 on the practice final (</data>
    </node>
    <node id="175">
      <data key="d0">449</data>
      <data key="d1">thread</data>
      <data key="d2">@instructor @teachingassistants answer</data>
    </node>
    <node id="176">
      <data key="d0">15</data>
      <data key="d1">thread</data>
      <data key="d2">The sand answer</data>
    </node>
    <node id="177">
      <data key="d0">16</data>
      <data key="d1">thread</data>
      <data key="d2">Multiple Resolution</data>
    </node>
    <node id="178">
      <data key="d0">17</data>
      <data key="d1">thread</data>
      <data key="d2">Exception</data>
    </node>
    <node id="179">
      <data key="d0">450</data>
      <data key="d1">thread</data>
      <data key="d2">maybe it s just sundays that don t count</data>
    </node>
    <node id="180">
      <data key="d0">18</data>
      <data key="d1">thread</data>
      <data key="d2">Autograder problem</data>
    </node>
    <node id="181">
      <data key="d0">19</data>
      <data key="d1">thread</data>
      <data key="d2">How do we access class via zoom</data>
    </node>
    <node id="182">
      <data key="d0">520</data>
      <data key="d1">thread</data>
      <data key="d2">Pushing Code to GitHub</data>
    </node>
    <node id="183">
      <data key="d0">20</data>
      <data key="d1">thread</data>
      <data key="d2">Project 2 lab session recording</data>
    </node>
    <node id="184">
      <data key="d0">514</data>
      <data key="d1">thread</data>
      <data key="d2">Does png work I assume not since PNG isn</data>
    </node>
    <node id="185">
      <data key="d0">213</data>
      <data key="d1">thread</data>
      <data key="d2">Are there tas working right now</data>
    </node>
    <node id="186">
      <data key="d0">515</data>
      <data key="d1">thread</data>
      <data key="d2">Class is in person today right</data>
    </node>
    <node id="187">
      <data key="d0">174</data>
      <data key="d1">thread</data>
      <data key="d2">So i ve finished the project but i have</data>
    </node>
    <node id="188">
      <data key="d0">451</data>
      <data key="d1">thread</data>
      <data key="d2">This is just a suggestion but would it</data>
    </node>
    <node id="189">
      <data key="d0">509</data>
      <data key="d1">thread</data>
      <data key="d2">I bought my textbook online on RedShelf</data>
    </node>
    <node id="190">
      <data key="d0">516</data>
      <data key="d1">thread</data>
      <data key="d2">Anyone know where I can find the zoom</data>
    </node>
    <node id="191">
      <data key="d0">214</data>
      <data key="d1">thread</data>
      <data key="d2">Hey guys can somebody tell me where I</data>
    </node>
    <node id="192">
      <data key="d0">21</data>
      <data key="d1">thread</data>
      <data key="d2">Hehe</data>
    </node>
    <node id="193">
      <data key="d0">22</data>
      <data key="d1">thread</data>
      <data key="d2">Does anyone know what program Professor</data>
    </node>
    <node id="194">
      <data key="d0">23</data>
      <data key="d1">thread</data>
      <data key="d2">New schedule</data>
    </node>
    <node id="195">
      <data key="d0">494</data>
      <data key="d1">thread</data>
      <data key="d2">Figures for 13.2.2</data>
    </node>
    <node id="196">
      <data key="d0">24</data>
      <data key="d1">thread</data>
      <data key="d2">Project Submission Question</data>
    </node>
    <node id="197">
      <data key="d0">25</data>
      <data key="d1">thread</data>
      <data key="d2">When should I start?</data>
    </node>
    <node id="198">
      <data key="d0">26</data>
      <data key="d1">thread</data>
      <data key="d2">Textbook pdf</data>
    </node>
    <node id="199">
      <data key="d0">27</data>
      <data key="d1">thread</data>
      <data key="d2">Zoom links</data>
    </node>
    <node id="200">
      <data key="d0">191</data>
      <data key="d1">thread</data>
      <data key="d2">That's the initial matrix for Floyd's</data>
    </node>
    <node id="201">
      <data key="d0">28</data>
      <data key="d1">thread</data>
      <data key="d2">Floyd's</data>
    </node>
    <node id="202">
      <data key="d0">525</data>
      <data key="d1">thread</data>
      <data key="d2">When you have something in {} like {3,4</data>
    </node>
    <node id="203">
      <data key="d0">392</data>
      <data key="d1">thread</data>
      <data key="d2">Sounds good to me! Do you want to meet</data>
    </node>
    <node id="204">
      <data key="d0">29</data>
      <data key="d1">channel</data>
      <data key="d2">project-1</data>
    </node>
    <node id="205">
      <data key="d0">485</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="206">
      <data key="d0">526</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="207">
      <data key="d0">527</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="208">
      <data key="d0">331</data>
      <data key="d1">thread</data>
      <data key="d2">Yep! And I can see the changes pushed</data>
    </node>
    <node id="209">
      <data key="d0">452</data>
      <data key="d1">thread</data>
      <data key="d2">I have very bad memory so apologies if</data>
    </node>
    <node id="210">
      <data key="d0">364</data>
      <data key="d1">thread</data>
      <data key="d2">New Lines</data>
    </node>
    <node id="211">
      <data key="d0">350</data>
      <data key="d1">thread</data>
      <data key="d2">Attribute Error</data>
    </node>
    <node id="212">
      <data key="d0">175</data>
      <data key="d1">thread</data>
      <data key="d2">Hey I m getting this issue when I try to</data>
    </node>
    <node id="213">
      <data key="d0">365</data>
      <data key="d1">thread</data>
      <data key="d2">I m getting an error that says that</data>
    </node>
    <node id="214">
      <data key="d0">216</data>
      <data key="d1">thread</data>
      <data key="d2">Does anyone know why I am getting a</data>
    </node>
    <node id="215">
      <data key="d0">332</data>
      <data key="d1">thread</data>
      <data key="d2">Pytest not working</data>
    </node>
    <node id="216">
      <data key="d0">288</data>
      <data key="d1">thread</data>
      <data key="d2">I keep getting a similar error it doesn</data>
    </node>
    <node id="217">
      <data key="d0">366</data>
      <data key="d1">thread</data>
      <data key="d2">I’m running into an issue</data>
    </node>
    <node id="218">
      <data key="d0">322</data>
      <data key="d1">thread</data>
      <data key="d2">I was curious to know how others have</data>
    </node>
    <node id="219">
      <data key="d0">367</data>
      <data key="d1">thread</data>
      <data key="d2">Pytest not loading</data>
    </node>
    <node id="220">
      <data key="d0">368</data>
      <data key="d1">thread</data>
      <data key="d2">For some reason nothing happens when I</data>
    </node>
    <node id="221">
      <data key="d0">393</data>
      <data key="d1">thread</data>
      <data key="d2">Hey guys I am getting a strange error</data>
    </node>
    <node id="222">
      <data key="d0">333</data>
      <data key="d1">thread</data>
      <data key="d2">I figured it out I was passing in</data>
    </node>
    <node id="223">
      <data key="d0">32</data>
      <data key="d1">thread</data>
      <data key="d2">Wait I m so confused I was doing the</data>
    </node>
    <node id="224">
      <data key="d0">253</data>
      <data key="d1">thread</data>
      <data key="d2">Undefined FSA</data>
    </node>
    <node id="225">
      <data key="d0">394</data>
      <data key="d1">thread</data>
      <data key="d2">Where can I find what I m supposed to do</data>
    </node>
    <node id="226">
      <data key="d0">166</data>
      <data key="d1">thread</data>
      <data key="d2">Any idea why I keep getting this error</data>
    </node>
    <node id="227">
      <data key="d0">395</data>
      <data key="d1">thread</data>
      <data key="d2">Check for new line</data>
    </node>
    <node id="228">
      <data key="d0">289</data>
      <data key="d1">thread</data>
      <data key="d2">Where do I find the tutorial on how to</data>
    </node>
    <node id="229">
      <data key="d0">182</data>
      <data key="d1">thread</data>
      <data key="d2">How do I test locally I’ve tried using</data>
    </node>
    <node id="230">
      <data key="d0">334</data>
      <data key="d1">thread</data>
      <data key="d2">Should fsa</data>
    </node>
    <node id="231">
      <data key="d0">369</data>
      <data key="d1">thread</data>
      <data key="d2">What is the best way to handle tokens of</data>
    </node>
    <node id="232">
      <data key="d0">192</data>
      <data key="d1">thread</data>
      <data key="d2">Is there a reason the example code uses</data>
    </node>
    <node id="233">
      <data key="d0">370</data>
      <data key="d1">thread</data>
      <data key="d2">Weird import errors</data>
    </node>
    <node id="234">
      <data key="d0">371</data>
      <data key="d1">thread</data>
      <data key="d2">Is anyone else having issues passing the</data>
    </node>
    <node id="235">
      <data key="d0">372</data>
      <data key="d1">thread</data>
      <data key="d2">How do you get the line numbers Do you</data>
    </node>
    <node id="236">
      <data key="d0">256</data>
      <data key="d1">thread</data>
      <data key="d2">Line numbers</data>
    </node>
    <node id="237">
      <data key="d0">33</data>
      <data key="d1">thread</data>
      <data key="d2">String line number</data>
    </node>
    <node id="238">
      <data key="d0">252</data>
      <data key="d1">thread</data>
      <data key="d2">To submit this to we just push our</data>
    </node>
    <node id="239">
      <data key="d0">373</data>
      <data key="d1">thread</data>
      <data key="d2">Has anybody mastered the art of knowing</data>
    </node>
    <node id="240">
      <data key="d0">374</data>
      <data key="d1">thread</data>
      <data key="d2">is this on Github</data>
    </node>
    <node id="241">
      <data key="d0">284</data>
      <data key="d1">thread</data>
      <data key="d2">Hm I think I might have downloaded the</data>
    </node>
    <node id="242">
      <data key="d0">34</data>
      <data key="d1">thread</data>
      <data key="d2">Ta passoff</data>
    </node>
    <node id="243">
      <data key="d0">290</data>
      <data key="d1">thread</data>
      <data key="d2">still looking for a little bit of help</data>
    </node>
    <node id="244">
      <data key="d0">375</data>
      <data key="d1">thread</data>
      <data key="d2">I don t have a token file The token</data>
    </node>
    <node id="245">
      <data key="d0">193</data>
      <data key="d1">thread</data>
      <data key="d2">Are we allowed to use one FSA in another</data>
    </node>
    <node id="246">
      <data key="d0">505</data>
      <data key="d1">thread</data>
      <data key="d2">Thread</data>
    </node>
    <node id="247">
      <data key="d0">376</data>
      <data key="d1">thread</data>
      <data key="d2">What are the specifications for each</data>
    </node>
    <node id="248">
      <data key="d0">35</data>
      <data key="d1">thread</data>
      <data key="d2">Case sensitive</data>
    </node>
    <node id="249">
      <data key="d0">273</data>
      <data key="d1">thread</data>
      <data key="d2">Import Paths</data>
    </node>
    <node id="250">
      <data key="d0">217</data>
      <data key="d1">thread</data>
      <data key="d2">how did you determine a token was and</data>
    </node>
    <node id="251">
      <data key="d0">442</data>
      <data key="d1">thread</data>
      <data key="d2">Are you not allwed to have multiple constructors?</data>
    </node>
    <node id="252">
      <data key="d0">358</data>
      <data key="d1">thread</data>
      <data key="d2">The autograder doesn t seem to be</data>
    </node>
    <node id="253">
      <data key="d0">36</data>
      <data key="d1">thread</data>
      <data key="d2">That sounds good I think a strong can</data>
    </node>
    <node id="254">
      <data key="d0">37</data>
      <data key="d1">thread</data>
      <data key="d2">Whitespace</data>
    </node>
    <node id="255">
      <data key="d0">38</data>
      <data key="d1">thread</data>
      <data key="d2">Undefined token values</data>
    </node>
    <node id="256">
      <data key="d0">39</data>
      <data key="d1">thread</data>
      <data key="d2">Lexer.run() output</data>
    </node>
    <node id="257">
      <data key="d0">40</data>
      <data key="d1">thread</data>
      <data key="d2">Did you guys make a new file for each</data>
    </node>
    <node id="258">
      <data key="d0">291</data>
      <data key="d1">thread</data>
      <data key="d2">This is also the problem I m stuck with</data>
    </node>
    <node id="259">
      <data key="d0">506</data>
      <data key="d1">thread</data>
      <data key="d2">Should the states be functions or</data>
    </node>
    <node id="260">
      <data key="d0">512</data>
      <data key="d1">thread</data>
      <data key="d2">Do we need to do anything on Learning</data>
    </node>
    <node id="261">
      <data key="d0">356</data>
      <data key="d1">thread</data>
      <data key="d2">Did you get this resolved I m having the</data>
    </node>
    <node id="262">
      <data key="d0">453</data>
      <data key="d1">thread</data>
      <data key="d2">Any ideas on how to fix this error It</data>
    </node>
    <node id="263">
      <data key="d0">294</data>
      <data key="d1">thread</data>
      <data key="d2">I know that the algorithm involves</data>
    </node>
    <node id="264">
      <data key="d0">41</data>
      <data key="d1">thread</data>
      <data key="d2">I drew up my ID FSA and I noticed that</data>
    </node>
    <node id="265">
      <data key="d0">431</data>
      <data key="d1">thread</data>
      <data key="d2">function signifier</data>
    </node>
    <node id="266">
      <data key="d0">443</data>
      <data key="d1">thread</data>
      <data key="d2">In this example for ID</data>
    </node>
    <node id="267">
      <data key="d0">475</data>
      <data key="d1">thread</data>
      <data key="d2">Quick question that doesn t matter at</data>
    </node>
    <node id="268">
      <data key="d0">295</data>
      <data key="d1">thread</data>
      <data key="d2">Hey I just realized that my new Project</data>
    </node>
    <node id="269">
      <data key="d0">335</data>
      <data key="d1">thread</data>
      <data key="d2">Help with white space</data>
    </node>
    <node id="270">
      <data key="d0">336</data>
      <data key="d1">thread</data>
      <data key="d2">When to end ID</data>
    </node>
    <node id="271">
      <data key="d0">42</data>
      <data key="d1">thread</data>
      <data key="d2">Ok this is driving me crazy and I can t</data>
    </node>
    <node id="272">
      <data key="d0">480</data>
      <data key="d1">thread</data>
      <data key="d2">Are there test cases anywhere that we</data>
    </node>
    <node id="273">
      <data key="d0">481</data>
      <data key="d1">thread</data>
      <data key="d2">Can we put a lot of FSA classes into one</data>
    </node>
    <node id="274">
      <data key="d0">296</data>
      <data key="d1">thread</data>
      <data key="d2">I have a question about where exactly we</data>
    </node>
    <node id="275">
      <data key="d0">297</data>
      <data key="d1">thread</data>
      <data key="d2">Just had a question regarding code style</data>
    </node>
    <node id="276">
      <data key="d0">218</data>
      <data key="d1">thread</data>
      <data key="d2">Say the input string is “ k” I’m pretty</data>
    </node>
    <node id="277">
      <data key="d0">43</data>
      <data key="d1">thread</data>
      <data key="d2">A commit was made</data>
    </node>
    <node id="278">
      <data key="d0">44</data>
      <data key="d1">thread</data>
      <data key="d2">I’m a bit confused about which example</data>
    </node>
    <node id="279">
      <data key="d0">45</data>
      <data key="d1">thread</data>
      <data key="d2">String FSA</data>
    </node>
    <node id="280">
      <data key="d0">337</data>
      <data key="d1">thread</data>
      <data key="d2">Jupiter password</data>
    </node>
    <node id="281">
      <data key="d0">46</data>
      <data key="d1">thread</data>
      <data key="d2">The project1 guide pdf available on the</data>
    </node>
    <node id="282">
      <data key="d0">47</data>
      <data key="d1">channel</data>
      <data key="d2">project-2</data>
    </node>
    <node id="283">
      <data key="d0">194</data>
      <data key="d1">thread</data>
      <data key="d2">I would like to know why I got passed by</data>
    </node>
    <node id="284">
      <data key="d0">51</data>
      <data key="d1">thread</data>
      <data key="d2">Hey, I'm having this error when I try to</data>
    </node>
    <node id="285">
      <data key="d0">377</data>
      <data key="d1">thread</data>
      <data key="d2">Upload to GitHub</data>
    </node>
    <node id="286">
      <data key="d0">220</data>
      <data key="d1">thread</data>
      <data key="d2">What's the issue here?  It looks exactly</data>
    </node>
    <node id="287">
      <data key="d0">195</data>
      <data key="d1">thread</data>
      <data key="d2">I have the same problem with submitting</data>
    </node>
    <node id="288">
      <data key="d0">52</data>
      <data key="d1">thread</data>
      <data key="d2">Are we supposed to make the Datalog</data>
    </node>
    <node id="289">
      <data key="d0">53</data>
      <data key="d1">thread</data>
      <data key="d2">Thread</data>
    </node>
    <node id="290">
      <data key="d0">168</data>
      <data key="d1">thread</data>
      <data key="d2">Is anyone else having trouble reading</data>
    </node>
    <node id="291">
      <data key="d0">221</data>
      <data key="d1">thread</data>
      <data key="d2">Try using extend instead of append on</data>
    </node>
    <node id="292">
      <data key="d0">436</data>
      <data key="d1">thread</data>
      <data key="d2">So another question for anyone who is</data>
    </node>
    <node id="293">
      <data key="d0">339</data>
      <data key="d1">thread</data>
      <data key="d2">domain</data>
    </node>
    <node id="294">
      <data key="d0">259</data>
      <data key="d1">thread</data>
      <data key="d2">Predicate to_string()</data>
    </node>
    <node id="295">
      <data key="d0">260</data>
      <data key="d1">thread</data>
      <data key="d2">Your lexer in project 1 printed out the</data>
    </node>
    <node id="296">
      <data key="d0">378</data>
      <data key="d1">thread</data>
      <data key="d2">could someone who finished check my</data>
    </node>
    <node id="297">
      <data key="d0">222</data>
      <data key="d1">thread</data>
      <data key="d2">My code works for all of the input files</data>
    </node>
    <node id="298">
      <data key="d0">396</data>
      <data key="d1">thread</data>
      <data key="d2">Tuple problems</data>
    </node>
    <node id="299">
      <data key="d0">397</data>
      <data key="d1">thread</data>
      <data key="d2">Errors when returning token list from lexer</data>
    </node>
    <node id="300">
      <data key="d0">398</data>
      <data key="d1">thread</data>
      <data key="d2">Project 2 output</data>
    </node>
    <node id="301">
      <data key="d0">274</data>
      <data key="d1">thread</data>
      <data key="d2">what exactly is a parameter object As</data>
    </node>
    <node id="302">
      <data key="d0">282</data>
      <data key="d1">thread</data>
      <data key="d2">Is there a TA that would be able to</data>
    </node>
    <node id="303">
      <data key="d0">261</data>
      <data key="d1">thread</data>
      <data key="d2">what is the datalog program part</data>
    </node>
    <node id="304">
      <data key="d0">444</data>
      <data key="d1">thread</data>
      <data key="d2">For some reason</data>
    </node>
    <node id="305">
      <data key="d0">223</data>
      <data key="d1">thread</data>
      <data key="d2">is anyone else having issues with their</data>
    </node>
    <node id="306">
      <data key="d0">439</data>
      <data key="d1">thread</data>
      <data key="d2">Solution to GitHub failing both buckets but your loca machine suceeding both buckets.</data>
    </node>
    <node id="307">
      <data key="d0">399</data>
      <data key="d1">thread</data>
      <data key="d2">parse_datalog function</data>
    </node>
    <node id="308">
      <data key="d0">54</data>
      <data key="d1">thread</data>
      <data key="d2">Bucket 80 test 4</data>
    </node>
    <node id="309">
      <data key="d0">379</data>
      <data key="d1">thread</data>
      <data key="d2">I m trying to delete the COMMENT tokens</data>
    </node>
    <node id="310">
      <data key="d0">55</data>
      <data key="d1">thread</data>
      <data key="d2">You need to skip the comment tokens in</data>
    </node>
    <node id="311">
      <data key="d0">361</data>
      <data key="d1">thread</data>
      <data key="d2">How do we submit this lab There aren t</data>
    </node>
    <node id="312">
      <data key="d0">445</data>
      <data key="d1">thread</data>
      <data key="d2">First and Follow Sets</data>
    </node>
    <node id="313">
      <data key="d0">177</data>
      <data key="d1">thread</data>
      <data key="d2">What do we put in the paramater class Is</data>
    </node>
    <node id="314">
      <data key="d0">340</data>
      <data key="d1">thread</data>
      <data key="d2">If you copy over the files you don’t</data>
    </node>
    <node id="315">
      <data key="d0">224</data>
      <data key="d1">thread</data>
      <data key="d2">When you have a production with many</data>
    </node>
    <node id="316">
      <data key="d0">56</data>
      <data key="d1">thread</data>
      <data key="d2">Did Dr Goodrich say after what class</data>
    </node>
    <node id="317">
      <data key="d0">57</data>
      <data key="d1">thread</data>
      <data key="d2">Review or overview</data>
    </node>
    <node id="318">
      <data key="d0">298</data>
      <data key="d1">channel</data>
      <data key="d2">tutorials</data>
    </node>
    <node id="319">
      <data key="d0">299</data>
      <data key="d1">thread</data>
      <data key="d2">Quick Jupyter Notebook Tutorial</data>
    </node>
    <node id="320">
      <data key="d0">300</data>
      <data key="d1">thread</data>
      <data key="d2">A list of what tutorials are done</data>
    </node>
    <node id="321">
      <data key="d0">528</data>
      <data key="d1">thread</data>
      <data key="d2">Project 5 Help Video</data>
    </node>
    <node id="322">
      <data key="d0">301</data>
      <data key="d1">thread</data>
      <data key="d2">VS Code Tutorial</data>
    </node>
    <node id="323">
      <data key="d0">302</data>
      <data key="d1">thread</data>
      <data key="d2">Project 0 Walkthrough</data>
    </node>
    <node id="324">
      <data key="d0">58</data>
      <data key="d1">channel</data>
      <data key="d2">project-3</data>
    </node>
    <node id="325">
      <data key="d0">401</data>
      <data key="d1">thread</data>
      <data key="d2">Query a relation for only strings</data>
    </node>
    <node id="326">
      <data key="d0">67</data>
      <data key="d1">thread</data>
      <data key="d2">Formally, it should return a new</data>
    </node>
    <node id="327">
      <data key="d0">402</data>
      <data key="d1">thread</data>
      <data key="d2">Running code on input files</data>
    </node>
    <node id="328">
      <data key="d0">403</data>
      <data key="d1">thread</data>
      <data key="d2">input2</data>
    </node>
    <node id="329">
      <data key="d0">227</data>
      <data key="d1">thread</data>
      <data key="d2">Does anyone know how to debug the test</data>
    </node>
    <node id="330">
      <data key="d0">380</data>
      <data key="d1">thread</data>
      <data key="d2">Sorted</data>
    </node>
    <node id="331">
      <data key="d0">404</data>
      <data key="d1">thread</data>
      <data key="d2">TA video stuff</data>
    </node>
    <node id="332">
      <data key="d0">68</data>
      <data key="d1">thread</data>
      <data key="d2">How to interpret the test demo code</data>
    </node>
    <node id="333">
      <data key="d0">69</data>
      <data key="d1">thread</data>
      <data key="d2">bucket80 test 0</data>
    </node>
    <node id="334">
      <data key="d0">405</data>
      <data key="d1">thread</data>
      <data key="d2">Currently getting an error when I try to</data>
    </node>
    <node id="335">
      <data key="d0">406</data>
      <data key="d1">thread</data>
      <data key="d2">for input2/answer2, why are there only 3</data>
    </node>
    <node id="336">
      <data key="d0">407</data>
      <data key="d1">thread</data>
      <data key="d2">im getting an odd error when trying to</data>
    </node>
    <node id="337">
      <data key="d0">408</data>
      <data key="d1">thread</data>
      <data key="d2">Constants vs Variables</data>
    </node>
    <node id="338">
      <data key="d0">228</data>
      <data key="d1">thread</data>
      <data key="d2">when I do that, it says pytest is not</data>
    </node>
    <node id="339">
      <data key="d0">262</data>
      <data key="d1">thread</data>
      <data key="d2">Error in test.py</data>
    </node>
    <node id="340">
      <data key="d0">409</data>
      <data key="d1">thread</data>
      <data key="d2">Relation.to_string()</data>
    </node>
    <node id="341">
      <data key="d0">250</data>
      <data key="d1">thread</data>
      <data key="d2">Somehow Project 3 broke my lexer even</data>
    </node>
    <node id="342">
      <data key="d0">70</data>
      <data key="d1">thread</data>
      <data key="d2">Pytest</data>
    </node>
    <node id="343">
      <data key="d0">196</data>
      <data key="d1">thread</data>
      <data key="d2">Thread</data>
    </node>
    <node id="344">
      <data key="d0">71</data>
      <data key="d1">thread</data>
      <data key="d2">Project 2 datatypes</data>
    </node>
    <node id="345">
      <data key="d0">72</data>
      <data key="d1">thread</data>
      <data key="d2">could someone help be with the Idea of</data>
    </node>
    <node id="346">
      <data key="d0">381</data>
      <data key="d1">thread</data>
      <data key="d2">Datalog program constructor</data>
    </node>
    <node id="347">
      <data key="d0">382</data>
      <data key="d1">thread</data>
      <data key="d2">Tabulate Error on Github</data>
    </node>
    <node id="348">
      <data key="d0">410</data>
      <data key="d1">thread</data>
      <data key="d2">Raising unequal header length error</data>
    </node>
    <node id="349">
      <data key="d0">73</data>
      <data key="d1">thread</data>
      <data key="d2">Project 2 problems</data>
    </node>
    <node id="350">
      <data key="d0">229</data>
      <data key="d1">thread</data>
      <data key="d2">Has anyone had trouble getting the tests</data>
    </node>
    <node id="351">
      <data key="d0">74</data>
      <data key="d1">thread</data>
      <data key="d2">Copy of relation - from Walter in the TA</data>
    </node>
    <node id="352">
      <data key="d0">248</data>
      <data key="d1">thread</data>
      <data key="d2">I changed the hash and equals functions</data>
    </node>
    <node id="353">
      <data key="d0">501</data>
      <data key="d1">thread</data>
      <data key="d2">I'm getting these errors on both buckets</data>
    </node>
    <node id="354">
      <data key="d0">411</data>
      <data key="d1">thread</data>
      <data key="d2">How to rename the new relations</data>
    </node>
    <node id="355">
      <data key="d0">412</data>
      <data key="d1">thread</data>
      <data key="d2">Difference between selects</data>
    </node>
    <node id="356">
      <data key="d0">75</data>
      <data key="d1">thread</data>
      <data key="d2">test cases</data>
    </node>
    <node id="357">
      <data key="d0">230</data>
      <data key="d1">thread</data>
      <data key="d2">Submission</data>
    </node>
    <node id="358">
      <data key="d0">197</data>
      <data key="d1">thread</data>
      <data key="d2">Going off of the Walter's zoom video,</data>
    </node>
    <node id="359">
      <data key="d0">76</data>
      <data key="d1">thread</data>
      <data key="d2">Up to you on that, I recommend a map to</data>
    </node>
    <node id="360">
      <data key="d0">198</data>
      <data key="d1">thread</data>
      <data key="d2">@everyone</data>
    </node>
    <node id="361">
      <data key="d0">231</data>
      <data key="d1">thread</data>
      <data key="d2">GitHub</data>
    </node>
    <node id="362">
      <data key="d0">232</data>
      <data key="d1">thread</data>
      <data key="d2">Are we allowed to use premade packages</data>
    </node>
    <node id="363">
      <data key="d0">233</data>
      <data key="d1">thread</data>
      <data key="d2">Relation</data>
    </node>
    <node id="364">
      <data key="d0">263</data>
      <data key="d1">thread</data>
      <data key="d2">why would it say that the str doesnt</data>
    </node>
    <node id="365">
      <data key="d0">77</data>
      <data key="d1">thread</data>
      <data key="d2">Project with empty list</data>
    </node>
    <node id="366">
      <data key="d0">341</data>
      <data key="d1">thread</data>
      <data key="d2">I thought we had to pass in input from</data>
    </node>
    <node id="367">
      <data key="d0">178</data>
      <data key="d1">thread</data>
      <data key="d2">Do we need a database class in the</data>
    </node>
    <node id="368">
      <data key="d0">517</data>
      <data key="d1">thread</data>
      <data key="d2">How late is the ta office open today?</data>
    </node>
    <node id="369">
      <data key="d0">78</data>
      <data key="d1">channel</data>
      <data key="d2">project-4</data>
    </node>
    <node id="370">
      <data key="d0">490</data>
      <data key="d1">thread</data>
      <data key="d2">I just wanted to make sure I'm on the</data>
    </node>
    <node id="371">
      <data key="d0">85</data>
      <data key="d1">thread</data>
      <data key="d2">It prints them using the header from the</data>
    </node>
    <node id="372">
      <data key="d0">413</data>
      <data key="d1">thread</data>
      <data key="d2">Any tips for printing out the tuples</data>
    </node>
    <node id="373">
      <data key="d0">529</data>
      <data key="d1">thread</data>
      <data key="d2">help on the joinrows function</data>
    </node>
    <node id="374">
      <data key="d0">86</data>
      <data key="d1">thread</data>
      <data key="d2">Code optimization</data>
    </node>
    <node id="375">
      <data key="d0">87</data>
      <data key="d1">thread</data>
      <data key="d2">Tuple printing</data>
    </node>
    <node id="376">
      <data key="d0">414</data>
      <data key="d1">thread</data>
      <data key="d2">Quick question-- one of the steps calls</data>
    </node>
    <node id="377">
      <data key="d0">415</data>
      <data key="d1">thread</data>
      <data key="d2">In the demo code, one of the parameters</data>
    </node>
    <node id="378">
      <data key="d0">199</data>
      <data key="d1">thread</data>
      <data key="d2">I'm trying to connect my evaluate_rule</data>
    </node>
    <node id="379">
      <data key="d0">440</data>
      <data key="d1">person</data>
      <data key="d2">Student</data>
    </node>
    <node id="380">
      <data key="d0">383</data>
      <data key="d1">thread</data>
      <data key="d2">Has anyone else run into a problem where</data>
    </node>
    <node id="381">
      <data key="d0">200</data>
      <data key="d1">thread</data>
      <data key="d2">you mean writing the union function?</data>
    </node>
    <node id="382">
      <data key="d0">201</data>
      <data key="d1">thread</data>
      <data key="d2">What are the pytest commands again? (</data>
    </node>
    <node id="383">
      <data key="d0">202</data>
      <data key="d1">thread</data>
      <data key="d2">whenever i forget i just search messages</data>
    </node>
    <node id="384">
      <data key="d0">264</data>
      <data key="d1">thread</data>
      <data key="d2">Has anyone else had trouble getting</data>
    </node>
    <node id="385">
      <data key="d0">234</data>
      <data key="d1">thread</data>
      <data key="d2">Hey guys. I went through the prep video</data>
    </node>
    <node id="386">
      <data key="d0">384</data>
      <data key="d1">thread</data>
      <data key="d2">how do we grab the rules on the right</data>
    </node>
    <node id="387">
      <data key="d0">88</data>
      <data key="d1">thread</data>
      <data key="d2">I'm having trouble figuring out how to</data>
    </node>
    <node id="388">
      <data key="d0">89</data>
      <data key="d1">thread</data>
      <data key="d2">Hey guys, when we do rules, we are only</data>
    </node>
    <node id="389">
      <data key="d0">385</data>
      <data key="d1">thread</data>
      <data key="d2">Fixed point algorithm</data>
    </node>
    <node id="390">
      <data key="d0">90</data>
      <data key="d1">thread</data>
      <data key="d2">Failing bucket 100</data>
    </node>
    <node id="391">
      <data key="d0">386</data>
      <data key="d1">thread</data>
      <data key="d2">Fixed point algorithm location</data>
    </node>
    <node id="392">
      <data key="d0">416</data>
      <data key="d1">thread</data>
      <data key="d2">where should i look for these 2 spots to</data>
    </node>
    <node id="393">
      <data key="d0">417</data>
      <data key="d1">thread</data>
      <data key="d2">the other problem im having is 80 doesnt</data>
    </node>
    <node id="394">
      <data key="d0">203</data>
      <data key="d1">thread</data>
      <data key="d2">would anyone be available for a sec to</data>
    </node>
    <node id="395">
      <data key="d0">91</data>
      <data key="d1">channel</data>
      <data key="d2">project-5</data>
    </node>
    <node id="396">
      <data key="d0">237</data>
      <data key="d1">thread</data>
      <data key="d2">Test Cases</data>
    </node>
    <node id="397">
      <data key="d0">103</data>
      <data key="d1">thread</data>
      <data key="d2">Size 1 sccs</data>
    </node>
    <node id="398">
      <data key="d0">104</data>
      <data key="d1">thread</data>
      <data key="d2">Retrieve a list of set</data>
    </node>
    <node id="399">
      <data key="d0">238</data>
      <data key="d1">thread</data>
      <data key="d2">Hello, I have "completed" project 5a but</data>
    </node>
    <node id="400">
      <data key="d0">418</data>
      <data key="d1">thread</data>
      <data key="d2">can i DM my dependency graphs to someone</data>
    </node>
    <node id="401">
      <data key="d0">419</data>
      <data key="d1">thread</data>
      <data key="d2">For Project 5a when doing postorder</data>
    </node>
    <node id="402">
      <data key="d0">267</data>
      <data key="d1">thread</data>
      <data key="d2">@teaching assistants I am trying to</data>
    </node>
    <node id="403">
      <data key="d0">268</data>
      <data key="d1">thread</data>
      <data key="d2">Is there anything in bucket 80 input</data>
    </node>
    <node id="404">
      <data key="d0">239</data>
      <data key="d1">thread</data>
      <data key="d2">GitHub</data>
    </node>
    <node id="405">
      <data key="d0">269</data>
      <data key="d1">thread</data>
      <data key="d2">I'm having a weird pytest issue where</data>
    </node>
    <node id="406">
      <data key="d0">270</data>
      <data key="d1">thread</data>
      <data key="d2">Populate the graph with loops</data>
    </node>
    <node id="407">
      <data key="d0">507</data>
      <data key="d1">thread</data>
      <data key="d2">should our sccs and trees/forests be</data>
    </node>
    <node id="408">
      <data key="d0">245</data>
      <data key="d1">thread</data>
      <data key="d2">DFS</data>
    </node>
    <node id="409">
      <data key="d0">446</data>
      <data key="d1">thread</data>
      <data key="d2">Unhashable error</data>
    </node>
    <node id="410">
      <data key="d0">204</data>
      <data key="d1">thread</data>
      <data key="d2">I don't have an autograder on my github</data>
    </node>
    <node id="411">
      <data key="d0">240</data>
      <data key="d1">thread</data>
      <data key="d2">Failing</data>
    </node>
    <node id="412">
      <data key="d0">105</data>
      <data key="d1">channel</data>
      <data key="d2">exams</data>
    </node>
    <node id="413">
      <data key="d0">276</data>
      <data key="d1">thread</data>
      <data key="d2">Exam Grade not posted</data>
    </node>
    <node id="414">
      <data key="d0">454</data>
      <data key="d1">thread</data>
      <data key="d2">Exam question for the @teaching</data>
    </node>
    <node id="415">
      <data key="d0">205</data>
      <data key="d1">thread</data>
      <data key="d2">Is that a practice exam, or is that just</data>
    </node>
    <node id="416">
      <data key="d0">107</data>
      <data key="d1">thread</data>
      <data key="d2">Is prep exam closed note</data>
    </node>
    <node id="417">
      <data key="d0">352</data>
      <data key="d1">thread</data>
      <data key="d2">Should I ask questions about the</data>
    </node>
    <node id="418">
      <data key="d0">108</data>
      <data key="d1">thread</data>
      <data key="d2">Exam format</data>
    </node>
    <node id="419">
      <data key="d0">447</data>
      <data key="d1">thread</data>
      <data key="d2">What am I missing?</data>
    </node>
    <node id="420">
      <data key="d0">491</data>
      <data key="d1">thread</data>
      <data key="d2">Question 2</data>
    </node>
    <node id="421">
      <data key="d0">420</data>
      <data key="d1">thread</data>
      <data key="d2">Prep exam 9c</data>
    </node>
    <node id="422">
      <data key="d0">165</data>
      <data key="d1">thread</data>
      <data key="d2">Does anyone want to get a group together</data>
    </node>
    <node id="423">
      <data key="d0">387</data>
      <data key="d1">thread</data>
      <data key="d2">Well thats confusing:caveman:</data>
    </node>
    <node id="424">
      <data key="d0">388</data>
      <data key="d1">thread</data>
      <data key="d2">I probably got this wrong, but I have R</data>
    </node>
    <node id="425">
      <data key="d0">389</data>
      <data key="d1">thread</data>
      <data key="d2">can somebody remind me what the symbols</data>
    </node>
    <node id="426">
      <data key="d0">109</data>
      <data key="d1">thread</data>
      <data key="d2">Grading Practice Exam</data>
    </node>
    <node id="427">
      <data key="d0">390</data>
      <data key="d1">thread</data>
      <data key="d2">Order of ops</data>
    </node>
    <node id="428">
      <data key="d0">110</data>
      <data key="d1">channel</data>
      <data key="d2">homework</data>
    </node>
    <node id="429">
      <data key="d0">112</data>
      <data key="d1">thread</data>
      <data key="d2">Factorial math</data>
    </node>
    <node id="430">
      <data key="d0">421</data>
      <data key="d1">thread</data>
      <data key="d2">HW 20 problem 3</data>
    </node>
    <node id="431">
      <data key="d0">422</data>
      <data key="d1">thread</data>
      <data key="d2">If I completed and turned in homework</data>
    </node>
    <node id="432">
      <data key="d0">423</data>
      <data key="d1">thread</data>
      <data key="d2">How can you tell if a matrix is transitive?</data>
    </node>
    <node id="433">
      <data key="d0">424</data>
      <data key="d1">thread</data>
      <data key="d2">Symmetric &amp; Antisymmestric &amp; Asymmestric</data>
    </node>
    <node id="434">
      <data key="d0">113</data>
      <data key="d1">thread</data>
      <data key="d2">Projecting column E on table S does not</data>
    </node>
    <node id="435">
      <data key="d0">455</data>
      <data key="d1">thread</data>
      <data key="d2">I was wondering the same thing. I feel</data>
    </node>
    <node id="436">
      <data key="d0">456</data>
      <data key="d1">thread</data>
      <data key="d2">On 9D on the preparation exam, it</data>
    </node>
    <node id="437">
      <data key="d0">353</data>
      <data key="d1">thread</data>
      <data key="d2">am i correct in this assumption then?</data>
    </node>
    <node id="438">
      <data key="d0">457</data>
      <data key="d1">thread</data>
      <data key="d2">Resolution versus disjunctive syllogism</data>
    </node>
    <node id="439">
      <data key="d0">114</data>
      <data key="d1">thread</data>
      <data key="d2">I'm kind of confused here. Are the</data>
    </node>
    <node id="440">
      <data key="d0">425</data>
      <data key="d1">thread</data>
      <data key="d2">Logical Equivalence inside Quantified Statements</data>
    </node>
    <node id="441">
      <data key="d0">115</data>
      <data key="d1">thread</data>
      <data key="d2">can someone clarify this for me? For</data>
    </node>
    <node id="442">
      <data key="d0">303</data>
      <data key="d1">thread</data>
      <data key="d2">hmmm maybe I am misreading it. That is,</data>
    </node>
    <node id="443">
      <data key="d0">434</data>
      <data key="d1">thread</data>
      <data key="d2">Homework 10b</data>
    </node>
    <node id="444">
      <data key="d0">458</data>
      <data key="d1">thread</data>
      <data key="d2">I'll make sure that everyone who tried</data>
    </node>
    <node id="445">
      <data key="d0">116</data>
      <data key="d1">thread</data>
      <data key="d2">What is meant by the truth table method</data>
    </node>
    <node id="446">
      <data key="d0">117</data>
      <data key="d1">thread</data>
      <data key="d2">For Homework 9b are we assuming that P</data>
    </node>
    <node id="447">
      <data key="d0">118</data>
      <data key="d1">thread</data>
      <data key="d2">I m a bit confused on FIRST sets If a AB</data>
    </node>
    <node id="448">
      <data key="d0">119</data>
      <data key="d1">thread</data>
      <data key="d2">For HW8 is the list of productions under</data>
    </node>
    <node id="449">
      <data key="d0">120</data>
      <data key="d1">thread</data>
      <data key="d2">Does a FIRST set ever contain lambda</data>
    </node>
    <node id="450">
      <data key="d0">459</data>
      <data key="d1">thread</data>
      <data key="d2">Recursive descent parsing HW</data>
    </node>
    <node id="451">
      <data key="d0">347</data>
      <data key="d1">thread</data>
      <data key="d2">I have a quick question about question 1</data>
    </node>
    <node id="452">
      <data key="d0">121</data>
      <data key="d1">thread</data>
      <data key="d2">maybe something like this You already</data>
    </node>
    <node id="453">
      <data key="d0">207</data>
      <data key="d1">thread</data>
      <data key="d2">So S can only go to ABe as in S ABe So</data>
    </node>
    <node id="454">
      <data key="d0">122</data>
      <data key="d1">thread</data>
      <data key="d2">Do follow sets appear on a parse table</data>
    </node>
    <node id="455">
      <data key="d0">180</data>
      <data key="d1">thread</data>
      <data key="d2">Ok I have a project 1 formatting</data>
    </node>
    <node id="456">
      <data key="d0">523</data>
      <data key="d1">thread</data>
      <data key="d2">Undefined</data>
    </node>
    <node id="457">
      <data key="d0">123</data>
      <data key="d1">thread</data>
      <data key="d2">For homework 6 do we ignore problems 2 3</data>
    </node>
    <node id="458">
      <data key="d0">241</data>
      <data key="d1">thread</data>
      <data key="d2">This is question 2 for hw6 Doesn t there</data>
    </node>
    <node id="459">
      <data key="d0">460</data>
      <data key="d1">thread</data>
      <data key="d2">I watched the video about fixing</data>
    </node>
    <node id="460">
      <data key="d0">277</data>
      <data key="d1">thread</data>
      <data key="d2">older textbook edition</data>
    </node>
    <node id="461">
      <data key="d0">304</data>
      <data key="d1">thread</data>
      <data key="d2">For Project 1 and therefore HW4 part 3</data>
    </node>
    <node id="462">
      <data key="d0">323</data>
      <data key="d1">thread</data>
      <data key="d2">HW File types</data>
    </node>
    <node id="463">
      <data key="d0">124</data>
      <data key="d1">thread</data>
      <data key="d2">h4 q1 said we didn t need to add an</data>
    </node>
    <node id="464">
      <data key="d0">125</data>
      <data key="d1">thread</data>
      <data key="d2">Is this FSA legal In standard RegEx 1 5</data>
    </node>
    <node id="465">
      <data key="d0">391</data>
      <data key="d1">thread</data>
      <data key="d2">I think ‘ ‘ is a legal symbol</data>
    </node>
    <node id="466">
      <data key="d0">126</data>
      <data key="d1">thread</data>
      <data key="d2">Part of the description in hw 4 question</data>
    </node>
    <node id="467">
      <data key="d0">359</data>
      <data key="d1">thread</data>
      <data key="d2">Whitespace needed in HW4 FSA</data>
    </node>
    <node id="468">
      <data key="d0">305</data>
      <data key="d1">thread</data>
      <data key="d2">For hw 4 question 3 are we allowed to</data>
    </node>
    <node id="469">
      <data key="d0">127</data>
      <data key="d1">thread</data>
      <data key="d2">For hw 4 question 3 is it ok if we</data>
    </node>
    <node id="470">
      <data key="d0">306</data>
      <data key="d1">thread</data>
      <data key="d2">For HW4 should our FSA s accepting state</data>
    </node>
    <node id="471">
      <data key="d0">128</data>
      <data key="d1">thread</data>
      <data key="d2">Question about hw 4 To represent zero or</data>
    </node>
    <node id="472">
      <data key="d0">129</data>
      <data key="d1">thread</data>
      <data key="d2">I am lost on HW4 question 1 The</data>
    </node>
    <node id="473">
      <data key="d0">130</data>
      <data key="d1">thread</data>
      <data key="d2">I think I found a typo on HW3 RegEx FSM</data>
    </node>
    <node id="474">
      <data key="d0">208</data>
      <data key="d1">thread</data>
      <data key="d2">Like it says the square root of a</data>
    </node>
    <node id="475">
      <data key="d0">242</data>
      <data key="d1">thread</data>
      <data key="d2">f(x) = x^2 + 1</data>
    </node>
    <node id="476">
      <data key="d0">131</data>
      <data key="d1">thread</data>
      <data key="d2">How to test for bi-jection ect. on a math function</data>
    </node>
    <node id="477">
      <data key="d0">307</data>
      <data key="d1">thread</data>
      <data key="d2">For something to be injective not all of</data>
    </node>
    <node id="478">
      <data key="d0">437</data>
      <data key="d1">thread</data>
      <data key="d2">HW1 Q30</data>
    </node>
    <node id="479">
      <data key="d0">308</data>
      <data key="d1">thread</data>
      <data key="d2">HW1 Q6 10 These questions ask if D is an</data>
    </node>
    <node id="480">
      <data key="d0">309</data>
      <data key="d1">thread</data>
      <data key="d2">General HW Grading Question</data>
    </node>
    <node id="481">
      <data key="d0">461</data>
      <data key="d1">thread</data>
      <data key="d2">After making my first attempt at the</data>
    </node>
    <node id="482">
      <data key="d0">132</data>
      <data key="d1">thread</data>
      <data key="d2">Homework timing</data>
    </node>
    <node id="483">
      <data key="d0">462</data>
      <data key="d1">thread</data>
      <data key="d2">Homework 1 Cartesian Product</data>
    </node>
    <node id="484">
      <data key="d0">133</data>
      <data key="d1">thread</data>
      <data key="d2">Will the second attempt of any homework</data>
    </node>
    <node id="485">
      <data key="d0">134</data>
      <data key="d1">thread</data>
      <data key="d2">Post to show how to use threads</data>
    </node>
    <node id="486">
      <data key="d0">271</data>
      <data key="d1">thread</data>
      <data key="d2">Practice exam problem 1</data>
    </node>
    <node id="487">
      <data key="d0">135</data>
      <data key="d1">channel</data>
      <data key="d2">random</data>
    </node>
    <node id="488">
      <data key="d0">209</data>
      <data key="d1">thread</data>
      <data key="d2">Protip Dont wear Yankees gear to class</data>
    </node>
    <node id="489">
      <data key="d0">136</data>
      <data key="d1">channel</data>
      <data key="d2">project-0</data>
    </node>
    <node id="490">
      <data key="d0">243</data>
      <data key="d1">thread</data>
      <data key="d2">Is anyone else still having trouble with pytest</data>
    </node>
    <node id="491">
      <data key="d0">137</data>
      <data key="d1">thread</data>
      <data key="d2">Github ssh keys</data>
    </node>
    <node id="492">
      <data key="d0">138</data>
      <data key="d1">thread</data>
      <data key="d2">No github actions</data>
    </node>
    <node id="493">
      <data key="d0">310</data>
      <data key="d1">thread</data>
      <data key="d2">I ran python3 test script py and both</data>
    </node>
    <node id="494">
      <data key="d0">311</data>
      <data key="d1">thread</data>
      <data key="d2">Has anyone else had issues with</data>
    </node>
    <node id="495">
      <data key="d0">522</data>
      <data key="d1">thread</data>
      <data key="d2">IPyKernel</data>
    </node>
    <node id="496">
      <data key="d0">139</data>
      <data key="d1">thread</data>
      <data key="d2">What code can be changed?</data>
    </node>
    <node id="497">
      <data key="d0">140</data>
      <data key="d1">thread</data>
      <data key="d2">edit system enviroment variables</data>
    </node>
    <node id="498">
      <data key="d0">312</data>
      <data key="d1">thread</data>
      <data key="d2">Any advisory getting all of this to work</data>
    </node>
    <node id="499">
      <data key="d0">141</data>
      <data key="d1">thread</data>
      <data key="d2">test case error message</data>
    </node>
    <node id="500">
      <data key="d0">313</data>
      <data key="d1">thread</data>
      <data key="d2">I accidentally merged the pull request</data>
    </node>
    <node id="501">
      <data key="d0">142</data>
      <data key="d1">thread</data>
      <data key="d2">Okay Still though I don t know if that</data>
    </node>
    <node id="502">
      <data key="d0">314</data>
      <data key="d1">thread</data>
      <data key="d2">Git command not recognized</data>
    </node>
    <node id="503">
      <data key="d0">315</data>
      <data key="d1">thread</data>
      <data key="d2">I m trying to clone the github and i get</data>
    </node>
    <node id="504">
      <data key="d0">278</data>
      <data key="d1">thread</data>
      <data key="d2">Any other ideas</data>
    </node>
    <node id="505">
      <data key="d0">316</data>
      <data key="d1">thread</data>
      <data key="d2">Trying to follow the project 0 tutorial</data>
    </node>
    <node id="506">
      <data key="d0">143</data>
      <data key="d1">thread</data>
      <data key="d2">Add python to your PATH</data>
    </node>
    <node id="507">
      <data key="d0">321</data>
      <data key="d1">thread</data>
      <data key="d2">I don t understand why I m getting this</data>
    </node>
    <node id="508">
      <data key="d0">144</data>
      <data key="d1">thread</data>
      <data key="d2">Has anyone gotten this error I m</data>
    </node>
    <node id="509">
      <data key="d0">428</data>
      <data key="d1">thread</data>
      <data key="d2">Python3 Version</data>
    </node>
    <node id="510">
      <data key="d0">317</data>
      <data key="d1">thread</data>
      <data key="d2">It says it s only available for people</data>
    </node>
    <node id="511">
      <data key="d0">145</data>
      <data key="d1">channel</data>
      <data key="d2">announcements</data>
    </node>
    <node id="512">
      <data key="d0">463</data>
      <data key="d1">thread</data>
      <data key="d2">@everyone I've been reviewing the notes</data>
    </node>
    <node id="513">
      <data key="d0">146</data>
      <data key="d1">thread</data>
      <data key="d2">Please do the following before class on</data>
    </node>
    <node id="514">
      <data key="d0">147</data>
      <data key="d1">thread</data>
      <data key="d2">Lab 2 perp session</data>
    </node>
    <node id="515">
      <data key="d0">464</data>
      <data key="d1">thread</data>
      <data key="d2">ChatGPT Best Practices</data>
    </node>
    <node id="516">
      <data key="d0">465</data>
      <data key="d1">thread</data>
      <data key="d2">@everyone Another migraine is hitting</data>
    </node>
    <node id="517">
      <data key="d0">149</data>
      <data key="d1">channel</data>
      <data key="d2">ta-schedule-updates</data>
    </node>
    <node id="518">
      <data key="d0">466</data>
      <data key="d1">thread</data>
      <data key="d2">Hye everyone! I woke up feeling sick so</data>
    </node>
    <node id="519">
      <data key="d0">467</data>
      <data key="d1">thread</data>
      <data key="d2">I will miss my hours on Wednesday for an</data>
    </node>
    <node id="520">
      <data key="d0">468</data>
      <data key="d1">thread</data>
      <data key="d2">Since I’m still sick, my hours for the</data>
    </node>
    <node id="521">
      <data key="d0">469</data>
      <data key="d1">thread</data>
      <data key="d2">I will be online only today, as I’ve</data>
    </node>
    <node id="522">
      <data key="d0">151</data>
      <data key="d1">thread</data>
      <data key="d2">are TAs available from 11 12 today</data>
    </node>
    <node id="523">
      <data key="d0">152</data>
      <data key="d1">thread</data>
      <data key="d2">Hackathon questions</data>
    </node>
    <node id="524">
      <data key="d0">153</data>
      <data key="d1">thread</data>
      <data key="d2">TA email</data>
    </node>
    <node id="525">
      <data key="d0">154</data>
      <data key="d1">thread</data>
      <data key="d2">Hours chat</data>
    </node>
    <node id="526">
      <data key="d0">155</data>
      <data key="d1">thread</data>
      <data key="d2">Hours adjust</data>
    </node>
    <node id="527">
      <data key="d0">157</data>
      <data key="d1">channel</data>
      <data key="d2">exam-grading-excpetions</data>
    </node>
    <node id="528">
      <data key="d0">470</data>
      <data key="d1">thread</data>
      <data key="d2">I noticed that a few students I'm</data>
    </node>
    <node id="529">
      <data key="d0">518</data>
      <data key="d1">thread</data>
      <data key="d2">student x submitted a .heic file</data>
    </node>
    <node id="530">
      <data key="d1">message</data>
      <data key="d2">Project Submission Question</data>
      <data key="d3">general</data>
    </node>
    <node id="531">
      <data key="d1">message</data>
      <data key="d2">I'm feeling better so I'll be in at around 11:30</data>
      <data key="d3">response</data>
    </node>
    <node id="532">
      <data key="d1">message</data>
      <data key="d2">Nope</data>
      <data key="d3">response</data>
    </node>
    <node id="533">
      <data key="d1">message</data>
      <data key="d2">Will there be any TAs today?</data>
      <data key="d3">response</data>
    </node>
    <node id="534">
      <data key="d1">message</data>
      <data key="d2">Yes, see the &lt;#1148663286267641906&gt; for specific hours the TAs plan on working</data>
      <data key="d3">response</data>
    </node>
    <node id="535">
      <data key="d1">message</data>
      <data key="d2">I think I fixed all affected grades, reach out if there was a problem with yours</data>
      <data key="d3">response</data>
    </node>
    <node id="536">
      <data key="d1">message</data>
      <data key="d2">I will do a grade merge tomorrow morning, if your grade is not in by end of day send me a DM with your netid and GitHub username</data>
      <data key="d3">response</data>
    </node>
    <node id="537">
      <data key="d1">message</data>
      <data key="d2">Zoom has issues with copy and paste from time to time, try manually typing it in</data>
      <data key="d3">response</data>
    </node>
    <node id="538">
      <data key="d1">message</data>
      <data key="d2">Cool, I assume people who had already taken the exam will have that accounted for later?</data>
      <data key="d3">response</data>
    </node>
    <node id="539">
      <data key="d1">message</data>
      <data key="d2">Up to you, I used a dictionary</data>
      <data key="d3">response</data>
    </node>
    <node id="540">
      <data key="d1">message</data>
      <data key="d2">A &lt;-&gt; B
Is the same as
(A-&gt;B) ^ (B -&gt; A)</data>
      <data key="d3">response</data>
    </node>
    <node id="541">
      <data key="d1">message</data>
      <data key="d2">You will not be required to show the error state unless otherwise stated in the question</data>
      <data key="d3">response</data>
    </node>
    <node id="542">
      <data key="d1">message</data>
      <data key="d2">This, 100%</data>
      <data key="d3">response</data>
    </node>
    <node id="543">
      <data key="d1">message</data>
      <data key="d2">Check the &lt;#1146860399384338483&gt;  channel</data>
      <data key="d3">response</data>
    </node>
    <node id="544">
      <data key="d1">message</data>
      <data key="d2">Yes there will be a final

Current plan for it is to be weighted towards the second half of the content</data>
      <data key="d3">general</data>
    </node>
    <node id="545">
      <data key="d1">message</data>
      <data key="d2">The sand</data>
      <data key="d3">general</data>
    </node>
    <node id="546">
      <data key="d1">message</data>
      <data key="d2">Do you mean like this:
```
1. a v b v c v d v e v f v g
2. not a
therefore: b v c v d v e v f v g
```
?</data>
      <data key="d3">general</data>
    </node>
    <node id="547">
      <data key="d1">message</data>
      <data key="d2">Unfortunately no, if you submit it tommorow it would be subject to the standard late penalty</data>
      <data key="d3">general</data>
    </node>
    <node id="548">
      <data key="d1">message</data>
      <data key="d2">Shoot me a dm and we can get it figured out. The auto grader pulls the date from your most recent submission to calculate what your grade is</data>
      <data key="d3">general</data>
    </node>
    <node id="549">
      <data key="d1">message</data>
      <data key="d2">it is also pinned int the &lt;#1148662249871908874&gt; channel</data>
      <data key="d3">general</data>
    </node>
    <node id="550">
      <data key="d1">message</data>
      <data key="d2">I will record one of them, but I make no guarantees about the quality of the recording</data>
      <data key="d3">general</data>
    </node>
    <node id="551">
      <data key="d1">message</data>
      <data key="d2">Yeah, got that fixed 😅</data>
      <data key="d3">general</data>
    </node>
    <node id="552">
      <data key="d1">message</data>
      <data key="d2">Additionally I have found this site to be really good: https://madeby&lt;Person&gt;.com/fsm/</data>
      <data key="d3">general</data>
    </node>
    <node id="553">
      <data key="d1">message</data>
      <data key="d2">yes, for the 1pm section
https://discord.com/channels/1049410982167974018/1148662249871908874/1151927330621636638</data>
      <data key="d3">general</data>
    </node>
    <node id="554">
      <data key="d1">message</data>
      <data key="d2">yes</data>
      <data key="d3">general</data>
    </node>
    <node id="555">
      <data key="d1">message</data>
      <data key="d2">I recommend starting ASAP</data>
      <data key="d3">general</data>
    </node>
    <node id="556">
      <data key="d1">message</data>
      <data key="d2">Textbook pdf</data>
      <data key="d3">general</data>
    </node>
    <node id="557">
      <data key="d1">message</data>
      <data key="d2">should be at the top of the &lt;#1148662249871908874&gt; channel</data>
      <data key="d3">general</data>
    </node>
    <node id="558">
      <data key="d1">message</data>
      <data key="d2">Yes, your edit is completely correct</data>
      <data key="d3">general</data>
    </node>
    <node id="559">
      <data key="d1">message</data>
      <data key="d2">The project1 guide pdf available on the</data>
      <data key="d3">project-1</data>
    </node>
    <node id="560">
      <data key="d1">message</data>
      <data key="d2">That document is out of date, the same pseudocode is available on the after class slides for December the 1st</data>
      <data key="d3">response</data>
    </node>
    <node id="561">
      <data key="d1">message</data>
      <data key="d2">say our graph has 2 edges with weights
a-&gt;b: 5
b-&gt;a: 4

the graph would be

V = {a, b}
E = {(a,b), (b,a)}
w = {((a,b), 5), ((b,a), 4)}</data>
      <data key="d3">response</data>
    </node>
    <node id="562">
      <data key="d1">message</data>
      <data key="d2">An id is any string BUT a keyword. So if the string is
'Rules' then it is a keyword, but any variation on it makes it an id 'Rules1'</data>
      <data key="d3">project-1</data>
    </node>
    <node id="563">
      <data key="d1">message</data>
      <data key="d2">A string tokens line number is the line it starts on</data>
      <data key="d3">project-1</data>
    </node>
    <node id="564">
      <data key="d1">message</data>
      <data key="d2">Follow this guide:
https://discord.com/channels/1049410982167974018/1148662249871908874/1153838202172477500

No need to meet with a TA</data>
      <data key="d3">project-1</data>
    </node>
    <node id="565">
      <data key="d1">message</data>
      <data key="d2">Yes, the Rules, Schemes, Facts, and Queries Tokens are case sensitive</data>
      <data key="d3">project-1</data>
    </node>
    <node id="566">
      <data key="d1">message</data>
      <data key="d2">For a more specific answer, and FSM CAN count the number of occurrences of a specific character. 

You would "announce" a newline character each time you saw one. However an FSA cannot.

This is more of a hack but it useful and has some real applications.

There is something called a Pushdown Automaton. It contains a Stack in addition to the state machine. That would represent a more general and powerful machine. The topic is not covered in this class but is in cs 252.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="567">
      <data key="d1">message</data>
      <data key="d2">You are always safe to delete whitespace if you have handled all the tokens before the whitespace</data>
      <data key="d3">project-1</data>
    </node>
    <node id="568">
      <data key="d1">message</data>
      <data key="d2">Your program will output an error message 

Details on what the message looks like are on LS -&gt;  Content -&gt; Projects -&gt; Project 1</data>
      <data key="d3">project-1</data>
    </node>
    <node id="569">
      <data key="d1">message</data>
      <data key="d2">Yes</data>
      <data key="d3">project-1</data>
    </node>
    <node id="570">
      <data key="d1">message</data>
      <data key="d2">Up to you on this one. I put a lot of the simple FSA's into one file.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="571">
      <data key="d1">message</data>
      <data key="d2">2 options:
1
```
Use your diagram to encode the ID FSA to exclude RULES, FACTS, QUERIES, and SCHEMES as IDs
```
2
```
Add a condition in somewhere where if the ID FSA and the FACTS, SCHEMES, RULES, or QUERIES FSA both announce that they accept preference the keyword FSA
```</data>
      <data key="d3">project-1</data>
    </node>
    <node id="572">
      <data key="d1">message</data>
      <data key="d2">For anyone experiencing a similar issue make sure that you are in the same directory as the code when you run the commands as well</data>
      <data key="d3">project-1</data>
    </node>
    <node id="573">
      <data key="d1">message</data>
      <data key="d2">Yes you are good to just pull the change and commit like usuaul</data>
      <data key="d3">project-1</data>
    </node>
    <node id="574">
      <data key="d1">message</data>
      <data key="d2">The notebook is providing code for parallel and max</data>
      <data key="d3">project-1</data>
    </node>
    <node id="575">
      <data key="d1">message</data>
      <data key="d2">A newline character does not make a string undefined</data>
      <data key="d3">project-1</data>
    </node>
    <node id="576">
      <data key="d1">message</data>
      <data key="d2">Yes that is outdated</data>
      <data key="d3">project-1</data>
    </node>
    <node id="577">
      <data key="d1">message</data>
      <data key="d2">Hi everyone, would you (hypothetically) attend a review session for lab 2?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="578">
      <data key="d1">message</data>
      <data key="d2">So，I just saw this message, can I still submit in learning suite and show the TA the time I submitted to receive full credit?</data>
      <data key="d3">response</data>
    </node>
    <node id="579">
      <data key="d1">message</data>
      <data key="d2">Have you tested using pytest?</data>
      <data key="d3">response</data>
    </node>
    <node id="580">
      <data key="d1">message</data>
      <data key="d2">Github is setup for submissions, you will need to do a bit of digging to figure out why it failed. Check the actions tab to see which tests passed/failed.

Also make sure when you test locally you used the provided test.py file and pytest</data>
      <data key="d3">response</data>
    </node>
    <node id="581">
      <data key="d1">message</data>
      <data key="d2">Looks like a runtime exception</data>
      <data key="d3">project-2</data>
    </node>
    <node id="582">
      <data key="d1">message</data>
      <data key="d2">It will be used in project 3 so I reccomend putting it in it's own file</data>
      <data key="d3">project-2</data>
    </node>
    <node id="583">
      <data key="d1">message</data>
      <data key="d2">The message is indicating that the object of type "str" does not have the method to_string</data>
      <data key="d3">project-2</data>
    </node>
    <node id="584">
      <data key="d1">message</data>
      <data key="d2">How is it different</data>
      <data key="d3">project-2</data>
    </node>
    <node id="585">
      <data key="d1">message</data>
      <data key="d2">Yeah, sorry</data>
      <data key="d3">project-2</data>
    </node>
    <node id="586">
      <data key="d1">message</data>
      <data key="d2">You should know everything you need to to start</data>
      <data key="d3">project-2</data>
    </node>
    <node id="587">
      <data key="d1">message</data>
      <data key="d2">Overview, essentially a "how to start" guide</data>
      <data key="d3">project-2</data>
    </node>
    <node id="588">
      <data key="d1">message</data>
      <data key="d2">Lab sessions time</data>
      <data key="d3">project-3</data>
    </node>
    <node id="589">
      <data key="d1">message</data>
      <data key="d2">Formally, it should return a new relation with all the same rows and the new header, it should also check to make sure the old and new headers are the same length</data>
      <data key="d3">response</data>
    </node>
    <node id="590">
      <data key="d1">message</data>
      <data key="d2">Can you send that to cs236ta@cs.byu.edu

Also cc prof. Goodrich so we can get things sorted</data>
      <data key="d3">response</data>
    </node>
    <node id="591">
      <data key="d1">message</data>
      <data key="d2">yes</data>
      <data key="d3">response</data>
    </node>
    <node id="592">
      <data key="d1">message</data>
      <data key="d2">you will not, I made that choice to avoid conflation between pythons built-in tuple class and our own row class</data>
      <data key="d3">response</data>
    </node>
    <node id="593">
      <data key="d1">message</data>
      <data key="d2">Best of luck! Hope it goes well and she makes a quick recovery 💌</data>
      <data key="d3">response</data>
    </node>
    <node id="594">
      <data key="d1">message</data>
      <data key="d2">If you are going to paste code into discord please wrap the code in triple backtick character so it shows as a block like this:
```
Code here
```</data>
      <data key="d3">response</data>
    </node>
    <node id="595">
      <data key="d1">message</data>
      <data key="d2">&lt;@534453897956163604&gt; what are your thoughts on this?</data>
      <data key="d3">response</data>
    </node>
    <node id="596">
      <data key="d1">message</data>
      <data key="d2">If a rule depends on itself it should be run using the fixed point style</data>
      <data key="d3">response</data>
    </node>
    <node id="597">
      <data key="d1">message</data>
      <data key="d2">Deliberately throw an error the same way we did you the add_tuple function 

Example:
```
if index &lt; 0:
  raise ValueError("index is too low")
```</data>
      <data key="d3">project-3</data>
    </node>
    <node id="598">
      <data key="d1">message</data>
      <data key="d2">You will need to inspect the code and determine if the relations you create make sense. Each test does include cases where I expect your code to error, those are marked by the "try-except" blocks</data>
      <data key="d3">project-3</data>
    </node>
    <node id="599">
      <data key="d1">message</data>
      <data key="d2">the answer file is correct</data>
      <data key="d3">project-3</data>
    </node>
    <node id="600">
      <data key="d1">message</data>
      <data key="d2">What is the command you are using to run pytest, those sound like unrelated, seperate problems</data>
      <data key="d3">project-3</data>
    </node>
    <node id="601">
      <data key="d1">message</data>
      <data key="d2">A row should contain a list of strings

A header should contain a list of strings

A Predicate has 2  fields, a name and a list of parameters

You should have a way to convert a 'scheme' Predicate into a relation

A 'fact' Predicate will become a row

A Query Predicate will be evaluated and use one of the relations from the database into a new relation using select, project, and rename</data>
      <data key="d3">project-3</data>
    </node>
    <node id="602">
      <data key="d1">message</data>
      <data key="d2">Excellent summary</data>
      <data key="d3">project-3</data>
    </node>
    <node id="603">
      <data key="d1">message</data>
      <data key="d2">Which case is it failing? Which token? Which function is failing?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="604">
      <data key="d1">message</data>
      <data key="d2">```
relation_refrence = self.database[predicate.name]
# the above code would make a refrence, any changes to it would be changing the database as well (which is bad)

relation_copy = copy.deepcopy(self.database[predicate.name])

#this would make a copy of the relation, any changes would NOT impact the original database

#remember to add 'import copy' to the top of the file
```</data>
      <data key="d3">project-3</data>
    </node>
    <node id="605">
      <data key="d1">message</data>
      <data key="d2">You will need to manually do the operations and compare the output to make sure that they match</data>
      <data key="d3">project-3</data>
    </node>
    <node id="606">
      <data key="d1">message</data>
      <data key="d2">Yup</data>
      <data key="d3">project-3</data>
    </node>
    <node id="607">
      <data key="d1">message</data>
      <data key="d2">Moving stuff here</data>
      <data key="d3">project-3</data>
    </node>
    <node id="608">
      <data key="d1">message</data>
      <data key="d2">I will be holding project4 review sessions next week at the following times:
Monday: 12-1
Tuesday: 11-12
Wednesday: 3-4

Similar to last time, I will be recording the Monday session and posting it.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="609">
      <data key="d1">message</data>
      <data key="d2">seems like a reflexive reaction</data>
      <data key="d3">response</data>
    </node>
    <node id="610">
      <data key="d1">message</data>
      <data key="d2">Yes, that is one of the listed assumptions on learningsuite</data>
      <data key="d3">response</data>
    </node>
    <node id="611">
      <data key="d1">message</data>
      <data key="d2">nope, so long as it passed</data>
      <data key="d3">response</data>
    </node>
    <node id="612">
      <data key="d1">message</data>
      <data key="d2">Can we turn in 5a multiple times on learningsuite?</data>
      <data key="d3">response</data>
    </node>
    <node id="613">
      <data key="d1">message</data>
      <data key="d2">I thought this was in the room where class normally is but I guess not. Where are the help sessions?</data>
      <data key="d3">response</data>
    </node>
    <node id="614">
      <data key="d1">message</data>
      <data key="d2">yes, I didn't bring my charger and couldn't record todays session, I will record post tuesdays session</data>
      <data key="d3">response</data>
    </node>
    <node id="615">
      <data key="d1">message</data>
      <data key="d2">What header are you using for your output</data>
      <data key="d3">project-4</data>
    </node>
    <node id="616">
      <data key="d1">message</data>
      <data key="d2">Have you run into a case where that happens?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="617">
      <data key="d1">message</data>
      <data key="d2">Are you printing the tuples are you add them?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="618">
      <data key="d1">message</data>
      <data key="d2">I would suggest moving the code to print out the unique tuples to evaluate rule function. This is a good approach since the function will be reused in project 5 and we expect it to produce the same output.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="619">
      <data key="d1">message</data>
      <data key="d2">You may find the set difference operation to be helpful</data>
      <data key="d3">project-4</data>
    </node>
    <node id="620">
      <data key="d1">message</data>
      <data key="d2">Pass through one of the tests that's failing by hand</data>
      <data key="d3">project-4</data>
    </node>
    <node id="621">
      <data key="d1">message</data>
      <data key="d2">Some things to be aware of:

There will not be a lab session for this project, and you must complete it in 2 parts.

5a is entirely written. After finishing it you may turn it in on learningsuite. If you want more immediate feedback, come into the TA lab to get it graded by hand. You can do this as many times as needed to get full credit.

5b is writing code to perform the same computation. This project will not be accepted late, becuase it is due the last day of classes. If you do not get it turned in on or before the due date you will not get credit.</data>
      <data key="d3">project-5</data>
    </node>
    <node id="622">
      <data key="d1">message</data>
      <data key="d2">It should be fine</data>
      <data key="d3">response</data>
    </node>
    <node id="623">
      <data key="d1">message</data>
      <data key="d2">Is that supposed to say ```if scc not is self dependent?```</data>
      <data key="d3">response</data>
    </node>
    <node id="624">
      <data key="d1">message</data>
      <data key="d2">I'm on til 12, I cannot check your work but I can help clarify if you have the right idea or approach</data>
      <data key="d3">response</data>
    </node>
    <node id="625">
      <data key="d1">message</data>
      <data key="d2">Wouldn’t any SCC of size 1 be self dependent?</data>
      <data key="d3">response</data>
    </node>
    <node id="626">
      <data key="d1">message</data>
      <data key="d2">25 points per question, standard late\early policy</data>
      <data key="d3">response</data>
    </node>
    <node id="627">
      <data key="d1">message</data>
      <data key="d2">9, becuse there are 9 rules and our graph should show the dependancies between the rules</data>
      <data key="d3">response</data>
    </node>
    <node id="628">
      <data key="d1">message</data>
      <data key="d2">Recursion is the recommended approach</data>
      <data key="d3">response</data>
    </node>
    <node id="629">
      <data key="d1">message</data>
      <data key="d2">Do late points count the same for project 5a (2 points per day), or is Friday night a hard deadline like for homework?</data>
      <data key="d3">response</data>
    </node>
    <node id="630">
      <data key="d1">message</data>
      <data key="d2">Correct, the A stands for acyclic meaning no cycles</data>
      <data key="d3">response</data>
    </node>
    <node id="631">
      <data key="d1">message</data>
      <data key="d2">This is mentioned in the specs, there in general run the fixed point algorithm till no more tuples are added.

There is one edge case for some sccs of size 1 (these should only be read once) review the specs then come back if you still have questions</data>
      <data key="d3">response</data>
    </node>
    <node id="632">
      <data key="d1">message</data>
      <data key="d2">Can you guys pin this message.</data>
      <data key="d3">response</data>
    </node>
    <node id="633">
      <data key="d1">message</data>
      <data key="d2">I'd suggest consulting the specs again. This particular edge case is addressed in there repeatedly</data>
      <data key="d3">project-5</data>
    </node>
    <node id="634">
      <data key="d1">message</data>
      <data key="d2">I think the largest scc is like size 10 in the cases</data>
      <data key="d3">project-5</data>
    </node>
    <node id="635">
      <data key="d1">message</data>
      <data key="d2">Exam format</data>
      <data key="d3">exams</data>
    </node>
    <node id="636">
      <data key="d1">message</data>
      <data key="d2">Will do!</data>
      <data key="d3">response</data>
    </node>
    <node id="637">
      <data key="d1">message</data>
      <data key="d2">You may look at your notes when working on the prep exam.</data>
      <data key="d3">exams</data>
    </node>
    <node id="638">
      <data key="d1">message</data>
      <data key="d2">In the past they have been online, but I have not confirmed what our plans for this semester are. I'll bring it up in our next meeting</data>
      <data key="d3">exams</data>
    </node>
    <node id="639">
      <data key="d1">message</data>
      <data key="d2">Yes, send a copy to cs236ta@cs.byu.edu</data>
      <data key="d3">exams</data>
    </node>
    <node id="640">
      <data key="d1">message</data>
      <data key="d2">Will the second attempt of any homework</data>
      <data key="d3">homework</data>
    </node>
    <node id="641">
      <data key="d1">message</data>
      <data key="d2">Do questions 1, 2, and 3

Ignore the pdf</data>
      <data key="d3">response</data>
    </node>
    <node id="642">
      <data key="d1">message</data>
      <data key="d2">I used the following property:

```
k!(k+1) == (k+1)!
```</data>
      <data key="d3">homework</data>
    </node>
    <node id="643">
      <data key="d1">message</data>
      <data key="d2">A natural join is always possible. It has 3 cases

1: all attributes match (perform an intersection)

2: no attributes match (perform a cross product)

3: some attributes match (perform a cross product on tuples preserving the context of the matching attributes)</data>
      <data key="d3">homework</data>
    </node>
    <node id="644">
      <data key="d1">message</data>
      <data key="d2">Y blue, X yellow</data>
      <data key="d3">homework</data>
    </node>
    <node id="645">
      <data key="d1">message</data>
      <data key="d2">I think I updated the question to be more clear</data>
      <data key="d3">homework</data>
    </node>
    <node id="646">
      <data key="d1">message</data>
      <data key="d2">You need to show all possible options for the states of the premises</data>
      <data key="d3">homework</data>
    </node>
    <node id="647">
      <data key="d1">message</data>
      <data key="d2">The second, you need to prove that no matter what values of P and Q the statment is true.</data>
      <data key="d3">homework</data>
    </node>
    <node id="648">
      <data key="d1">message</data>
      <data key="d2">the first set would just be {A} becuase it is the the only possible first terminal symbol produced by &lt;a&gt;</data>
      <data key="d3">homework</data>
    </node>
    <node id="649">
      <data key="d1">message</data>
      <data key="d2">For hw8 the grammar is in the project 2 description</data>
      <data key="d3">homework</data>
    </node>
    <node id="650">
      <data key="d1">message</data>
      <data key="d2">It is a topic of some contention. We will give full credit either way</data>
      <data key="d3">homework</data>
    </node>
    <node id="651">
      <data key="d1">message</data>
      <data key="d2">This is our prefered format, we will however be lenient on style provided your content is correct</data>
      <data key="d3">homework</data>
    </node>
    <node id="652">
      <data key="d1">message</data>
      <data key="d2">I think no, only first sets come up here</data>
      <data key="d3">homework</data>
    </node>
    <node id="653">
      <data key="d1">message</data>
      <data key="d2">Only do the problems listed in the description. Do not complete ANY of the problems on the linked pdf. They are a hold-over from previous semesters</data>
      <data key="d3">homework</data>
    </node>
    <node id="654">
      <data key="d1">message</data>
      <data key="d2">no</data>
      <data key="d3">homework</data>
    </node>
    <node id="655">
      <data key="d1">message</data>
      <data key="d2">This notation is fine from a grading standpoint</data>
      <data key="d3">homework</data>
    </node>
    <node id="656">
      <data key="d1">message</data>
      <data key="d2">Line numbers are project related and not rel&lt;Person&gt;t to the diagram</data>
      <data key="d3">homework</data>
    </node>
    <node id="657">
      <data key="d1">message</data>
      <data key="d2">Yes, we encourage it</data>
      <data key="d3">homework</data>
    </node>
    <node id="658">
      <data key="d1">message</data>
      <data key="d2">Try only using the symbols we use in class
An equivalent conversion for that would be
```
(N U λ)
```</data>
      <data key="d3">homework</data>
    </node>
    <node id="659">
      <data key="d1">message</data>
      <data key="d2">Yes it is allowed just make it clear to us what you mean. I will send an example in a moment</data>
      <data key="d3">homework</data>
    </node>
    <node id="660">
      <data key="d1">message</data>
      <data key="d2">Good catch, I think you are correct, let me reach out to the Prof. to see if we are missing something/get the problem corrected</data>
      <data key="d3">homework</data>
    </node>
    <node id="661">
      <data key="d1">message</data>
      <data key="d2">I usually graph the function</data>
      <data key="d3">homework</data>
    </node>
    <node id="662">
      <data key="d1">message</data>
      <data key="d2">Yes, that is how the homeworks are currently configured</data>
      <data key="d3">homework</data>
    </node>
    <node id="663">
      <data key="d1">message</data>
      <data key="d2">I am 90% sure the answer is no &lt;@534453897956163604&gt;  can you confirm?</data>
      <data key="d3">homework</data>
    </node>
    <node id="664">
      <data key="d1">message</data>
      <data key="d2">Hi &lt;Person&gt;!</data>
      <data key="d3">homework</data>
    </node>
    <node id="665">
      <data key="d1">message</data>
      <data key="d2">If anyone is interested I am putting together a DnD campain. We will be playing B/X Old School Essentials and plan on meeting every other Tuesday (session 0/1 would be on the 7th). 

No prior experiance is required or expected.

If you are interested please reach out to me over dm!</data>
      <data key="d3">random</data>
    </node>
    <node id="666">
      <data key="d1">message</data>
      <data key="d2">Github ssh keys</data>
      <data key="d3">project-0</data>
    </node>
    <node id="667">
      <data key="d1">message</data>
      <data key="d2">You need to make an ssh key pair and register it with github</data>
      <data key="d3">project-0</data>
    </node>
    <node id="668">
      <data key="d1">message</data>
      <data key="d2">This should have populated after you setup the classroom, let me investigate and get back to you</data>
      <data key="d3">project-0</data>
    </node>
    <node id="669">
      <data key="d1">message</data>
      <data key="d2">Specifically the files you CANNOT change are the ones related to testing. 
So the test cases and test scripts</data>
      <data key="d3">project-0</data>
    </node>
    <node id="670">
      <data key="d1">message</data>
      <data key="d2">https://www.computerhope.com/issues/ch000549.htm</data>
      <data key="d3">project-0</data>
    </node>
    <node id="671">
      <data key="d1">message</data>
      <data key="d2">taking a look</data>
      <data key="d3">project-0</data>
    </node>
    <node id="672">
      <data key="d1">message</data>
      <data key="d2">it is NOT a requirement</data>
      <data key="d3">project-0</data>
    </node>
    <node id="673">
      <data key="d1">message</data>
      <data key="d2">You need to add python your path variables</data>
      <data key="d3">project-0</data>
    </node>
    <node id="674">
      <data key="d1">message</data>
      <data key="d2">You can also call "git add ." To add all files to the commit</data>
      <data key="d3">project-0</data>
    </node>
    <node id="675">
      <data key="d1">message</data>
      <data key="d2">@everyone
The project passoff guide is now complete. For the instructions see
```
LearningSuite -&gt; Content -&gt; Projects -&gt; Project Passoff Procedures
```</data>
      <data key="d3">announcements</data>
    </node>
    <node id="676">
      <data key="d1">message</data>
      <data key="d2">Link to a pdf students may find helpful:
https://discord.com/channels/1049410982167974018/1049410982167974021/1159889247969488978</data>
      <data key="d3">announcements</data>
    </node>
    <node id="677">
      <data key="d1">message</data>
      <data key="d2">This will be held in the TA lab, unless we are able to get a larger space</data>
      <data key="d3">announcements</data>
    </node>
    <node id="678">
      <data key="d1">message</data>
      <data key="d2">I just ended my shift, sorry</data>
      <data key="d3">response</data>
    </node>
    <node id="679">
      <data key="d1">message</data>
      <data key="d2">Hours chat</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="680">
      <data key="d1">message</data>
      <data key="d2">I don't think so, I'll be holding hours tomorrow from 11-5</data>
      <data key="d3">response</data>
    </node>
    <node id="681">
      <data key="d1">message</data>
      <data key="d2">check the schedule please.</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="682">
      <data key="d1">message</data>
      <data key="d2">We will be starting project 1, and the TAs and Prof. Will be on hand to help answer questions and get you some momentum on starting the project</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="683">
      <data key="d1">message</data>
      <data key="d2">Yes, cs236ta@cs.byu.edu</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="684">
      <data key="d1">message</data>
      <data key="d2">I can pick up 5 more hours.</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="685">
      <data key="d1">message</data>
      <data key="d2">For Friday?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="686">
      <data key="d1">message</data>
      <data key="d2">I was able to open their prep-exam</data>
      <data key="d3">response</data>
    </node>
    <node id="687">
      <data key="d1">message</data>
      <data key="d2">I was able to open their prep-exam</data>
      <data key="d3">exam-grading-excpetions</data>
    </node>
    <node id="688">
      <data key="d1">message</data>
      <data key="d2">What is the best way to handle tokens of variable length (IDs, strings &amp; comments)? It's easy to truncate fixed-length tokens from the file string after detection. My current plan is to add an extra output to my FSAs saying how many characters are included</data>
      <data key="d3">project-1</data>
    </node>
    <node id="689">
      <data key="d1">message</data>
      <data key="d2">when you say output, do you mean an additional return object? cause you can also just make it an fsa class variable and add a getter function</data>
      <data key="d3">response</data>
    </node>
    <node id="690">
      <data key="d1">message</data>
      <data key="d2">That's not an issue with your code, something is up on the github end</data>
      <data key="d3">response</data>
    </node>
    <node id="691">
      <data key="d1">message</data>
      <data key="d2">I don't know if you ever got this fixed, but I think I fixed it by adding a + "\n" to the end of my final output string. If you go in and look at the provided answers you'll see that there's an infernal extra space below every one.</data>
      <data key="d3">response</data>
    </node>
    <node id="692">
      <data key="d1">message</data>
      <data key="d2">If a function has elements in its domain that are unmapped it would still be a function (assuming no inputs lead to 2+ outputs). I think that makes it a partial function. Injective doesn't have anything to do with all the domain elements being mapped so it is still injective. Injective just says that for the inputs that are mapped, if the inputs are unique then their outputs should also be unique.</data>
      <data key="d3">response</data>
    </node>
    <node id="693">
      <data key="d1">message</data>
      <data key="d2">Why are we making a Header class? So far it seems to me that its functionality is already described by Tuple</data>
      <data key="d3">project-3</data>
    </node>
    <node id="694">
      <data key="d1">message</data>
      <data key="d2">Can we assume every ID on the left hand side of a rule is somewhere on the right as well? e.g, X never happens:
```lhs(a,b,X):-rh1(a),rh2(b)```</data>
      <data key="d3">project-4</data>
    </node>
    <node id="695">
      <data key="d1">message</data>
      <data key="d2">What is the order of operations for relational algebra operations? e.g, if I have ρR×S do I treat it like ρ(R×S) or (ρR)×S?</data>
      <data key="d3">exams</data>
    </node>
    <node id="696">
      <data key="d1">message</data>
      <data key="d2">I think I found a typo on HW3 (RegEx/FSM). Am I wrong about this?</data>
      <data key="d3">homework</data>
    </node>
    <node id="697">
      <data key="d1">message</data>
      <data key="d2">I hope so! That’s how I’ve done everything.</data>
      <data key="d3">response</data>
    </node>
    <node id="698">
      <data key="d1">message</data>
      <data key="d2">I believe this is the intended answer for problem 7, the other options are further from correct</data>
      <data key="d3">homework</data>
    </node>
    <node id="699">
      <data key="d1">message</data>
      <data key="d2">I pushed my code to Github, but it didn't automatically autograde--anyone know how to fix this?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="700">
      <data key="d1">message</data>
      <data key="d2">Just got it, thanks!</data>
      <data key="d3">response</data>
    </node>
    <node id="701">
      <data key="d1">message</data>
      <data key="d2">I hope this is the right place for this... I turned this project in pretty late, but I also had a three-day extension that wasn't reflected in my grade. I emailed cs236ta@cs.byu.edu, but haven't heard back yet... could anyone follow up on that?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="702">
      <data key="d1">message</data>
      <data key="d2">one moment</data>
      <data key="d3">response</data>
    </node>
    <node id="703">
      <data key="d1">message</data>
      <data key="d2">Same.</data>
      <data key="d3">exams</data>
    </node>
    <node id="704">
      <data key="d1">message</data>
      <data key="d2">Will there still be TA's available Mon-Wed this week?</data>
      <data key="d3">general</data>
    </node>
    <node id="705">
      <data key="d1">message</data>
      <data key="d2">On Jupyter notebooks, this example code line "my_left_paren_fsa: LeftParenFSA = LeftParenFSA(name = "LPAREN FSA")" has the error LeftParenFSA is not defined. Why is that? Will that be a problem when we run our code? And how can it be fixed?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="706">
      <data key="d1">message</data>
      <data key="d2">I think I can see where the problem is. It is where I am declaring my function</data>
      <data key="d3">project-1</data>
    </node>
    <node id="707">
      <data key="d1">message</data>
      <data key="d2">I had that happen to me too. Basically it's just a weird way of saying that you need to make sure to print out your Domain.</data>
      <data key="d3">response</data>
    </node>
    <node id="708">
      <data key="d1">message</data>
      <data key="d2">Is anyone else having trouble reading queries on the same line?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="709">
      <data key="d1">message</data>
      <data key="d2">I figured it that it is actually a problem with my rules I think thanks</data>
      <data key="d3">project-2</data>
    </node>
    <node id="710">
      <data key="d1">message</data>
      <data key="d2">I am having trouble clearing out my datalog program between tests. So it passes each bucket when ran invidivdually but not when the tests are run all at once. How can I fix that?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="711">
      <data key="d1">message</data>
      <data key="d2">Thank you! The autograder on Github shows an 80 so I should be good.</data>
      <data key="d3">response</data>
    </node>
    <node id="712">
      <data key="d1">message</data>
      <data key="d2">Is there a TA email?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="713">
      <data key="d1">message</data>
      <data key="d2">Are our headers and rows(tuples) supposed to be filled with predicates or strings? Is my datalog object not supposed to have predicates and should I convert the lists to strings?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="714">
      <data key="d1">message</data>
      <data key="d2">Thanks!</data>
      <data key="d3">project-3</data>
    </node>
    <node id="715">
      <data key="d1">message</data>
      <data key="d2">I installed python through the video, it didn't work, so then i just installed it through the microsoft store and it worked</data>
      <data key="d3">project-0</data>
    </node>
    <node id="716">
      <data key="d1">message</data>
      <data key="d2">when you say output, do you mean an additional return object? cause you can also just make it an fsa class variable and add a getter function</data>
      <data key="d3">project-1</data>
    </node>
    <node id="717">
      <data key="d1">message</data>
      <data key="d2">for input2/answer2, why are there only 3 for the first query? Shouldn't all of them be legitimate?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="718">
      <data key="d1">message</data>
      <data key="d2">I also confused. And on 11b. I can only get R</data>
      <data key="d3">homework</data>
    </node>
    <node id="719">
      <data key="d1">message</data>
      <data key="d2">I also confused. And on 11b. I can only get R</data>
      <data key="d3">response</data>
    </node>
    <node id="720">
      <data key="d1">message</data>
      <data key="d2">Under the LS content page, there is a TA help sub page 🙂</data>
      <data key="d3">response</data>
    </node>
    <node id="721">
      <data key="d1">message</data>
      <data key="d2">Where can I find TA hours?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="722">
      <data key="d1">message</data>
      <data key="d2">\n</data>
      <data key="d3">project-1</data>
    </node>
    <node id="723">
      <data key="d1">message</data>
      <data key="d2">eq</data>
      <data key="d3">project-3</data>
    </node>
    <node id="724">
      <data key="d1">message</data>
      <data key="d2">Should our dependency graph for 5a have 5 nodes or 9?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="725">
      <data key="d1">message</data>
      <data key="d2">Did you get it checked off with a TA as well as just submitting it?</data>
      <data key="d3">response</data>
    </node>
    <node id="726">
      <data key="d1">message</data>
      <data key="d2">is the autograder up for project 3? I'm not seeing any workflows to run in github classroom</data>
      <data key="d3">project-3</data>
    </node>
    <node id="727">
      <data key="d1">message</data>
      <data key="d2">It may not be so much that the question is unclear, but more so that it's been a week since I've looked at this 😅 . I'm just having troubles even starting because it says to start at vertex A, but vertex A doesn't go to anything. So I think to myself, well this isn't going to be a very interesting forest, it's gonna be more like the odd pots and plants my grandmother has in her kitchen. When compared to the examples in class, the starting vertex pointed somewhere, so just having a hard time figuring out how to work with a starting vertex that doesn't.</data>
      <data key="d3">homework</data>
    </node>
    <node id="728">
      <data key="d1">message</data>
      <data key="d2">So i've finished the project, but i have 1 problem. My to_string function is returning as a method instead of a string. i'm returning a string in my to_string function. i've even put str() around my to_string return. i can't seem to find out why it's doing what it's doing. Has anyone else had this same problem? When I printed it to the terminal it was working perfect.</data>
      <data key="d3">general</data>
    </node>
    <node id="729">
      <data key="d1">message</data>
      <data key="d2">Yeah it's for  the token class. i'm doing for token in tokens: and then token.to_string to grab all the info, but it keeps on returning a method even though i'm returning a string from my to_string</data>
      <data key="d3">general</data>
    </node>
    <node id="730">
      <data key="d1">message</data>
      <data key="d2">I drew up my ID FSA and I noticed that it is quite complicated. It has 21 states in it. There's a lot of arrows and while I know I can program it and get the answer I want, i'm wondering if anyone has (or if it's possible) just to call the schemes, facts, rules, and queries FSAs (without messing up the num_chars_read count -- or could I just call those FSA's first and then call their FSA state)? It would involve a different inheritance structure for the ID FSA and the other 4 FSAs. Does anyone know how I could get this to work?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="731">
      <data key="d1">message</data>
      <data key="d2">Put what you want the name of it to be in the " "</data>
      <data key="d3">project-1</data>
    </node>
    <node id="732">
      <data key="d1">message</data>
      <data key="d2">I did that and then it says all my autograders are failing</data>
      <data key="d3">project-1</data>
    </node>
    <node id="733">
      <data key="d1">message</data>
      <data key="d2">Yeah that's correct</data>
      <data key="d3">response</data>
    </node>
    <node id="734">
      <data key="d1">message</data>
      <data key="d2">What do we put in the paramater class Is</data>
      <data key="d3">project-2</data>
    </node>
    <node id="735">
      <data key="d1">message</data>
      <data key="d2">the TA slides are more specefic, but you need a value: str and you need an is_id: bool</data>
      <data key="d3">project-2</data>
    </node>
    <node id="736">
      <data key="d1">message</data>
      <data key="d2">Got a Question:

Does anyone understand where G1 and G2 come from in this database relation? Is it a typo?

With the SNAP database relation the scheme was given:
snap(S, N, A, P)
so it makes sense how this Fact correlates:
snap(''67890','Lucy,'34 Pear Ave','555-5678')

My question is with CSG. The Scheme is:
csg(C, S, G1, G2).
But the Facts don't correlate.
csg('CS 101','12345','A')
csg('EE 200','33333','B')

Is this a typo or am i missing something? Shouldn't there only be one attribute, G, instead of G1 and G2 since in the facts it was given as only 1?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="737">
      <data key="d1">message</data>
      <data key="d2">Hmmm, based on what I did for project 3 I’m pretty sure that that is a typo. Maybe that has something to do with natural joins but that’s not in project 3</data>
      <data key="d3">response</data>
    </node>
    <node id="738">
      <data key="d1">message</data>
      <data key="d2">i'd go with what &lt;Person&gt; said, but on the projects specs it says:

Your solution must include the following classes: Database, Relation, Header, and Tuple.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="739">
      <data key="d1">message</data>
      <data key="d2">Are there going to be TA hours tomorrow morning?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="740">
      <data key="d1">message</data>
      <data key="d2">Can we print out the tables on our 8X11 Sheet of paper and then write more stuff on it? or does the whole thing need to be handwritten?</data>
      <data key="d3">exams</data>
    </node>
    <node id="741">
      <data key="d1">message</data>
      <data key="d2">That's fine. It's what I would do</data>
      <data key="d3">response</data>
    </node>
    <node id="742">
      <data key="d1">message</data>
      <data key="d2">hw 9b qs 2 in person</data>
      <data key="d3">general</data>
    </node>
    <node id="743">
      <data key="d1">message</data>
      <data key="d2">Do we still have ta today?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="744">
      <data key="d1">message</data>
      <data key="d2">Have you checked the actual website? For me, I don't exactly know what to say because it's hard to tell if anything's happened (I don't exactly understand what's happening in the picture, but a TA probably would) unless you tell me if it's not on the actual website either....</data>
      <data key="d3">response</data>
    </node>
    <node id="745">
      <data key="d1">message</data>
      <data key="d2">did you mean to put this in the help queue chat?</data>
      <data key="d3">response</data>
    </node>
    <node id="746">
      <data key="d1">message</data>
      <data key="d2">wrong queue</data>
      <data key="d3">response</data>
    </node>
    <node id="747">
      <data key="d1">message</data>
      <data key="d2">project 4 in person</data>
      <data key="d3">project-4</data>
    </node>
    <node id="748">
      <data key="d1">message</data>
      <data key="d2">Does anyone know why I passed all my tests, but I got 0 on autograder?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="749">
      <data key="d1">message</data>
      <data key="d2">Just to make sure, did you run the bucket command? If you did, check the pull request on GitHub and make sure it isn’t merged, if it is you’ll need to make a new pull request</data>
      <data key="d3">response</data>
    </node>
    <node id="750">
      <data key="d1">message</data>
      <data key="d2">When projecting out duplicated attributes/column names when interpreting queries, alway keep the column names that appear first. For example:
query(T,X,A,X)
Should be projected down to (T,X,A) rather than (T,A,X)</data>
      <data key="d3">project-3</data>
    </node>
    <node id="751">
      <data key="d1">message</data>
      <data key="d2">https://github.com/scamp20</data>
      <data key="d3">project-4</data>
    </node>
    <node id="752">
      <data key="d1">message</data>
      <data key="d2">Send an email to cs236ta@cs.byu.edu. We're lenient on formatting issues once per student per semester. Include the correct attachment in the email (not as an heic file).</data>
      <data key="d3">homework</data>
    </node>
    <node id="753">
      <data key="d1">message</data>
      <data key="d2">Send an email to cs236ta@cs.byu.edu. We're lenient on formatting issues once per student per semester. Include the correct attachment in the email (not as an heic file).</data>
      <data key="d3">response</data>
    </node>
    <node id="754">
      <data key="d1">message</data>
      <data key="d2">So it is something that we likely will patch, but even if it wasn't patched, it shouldn't affect future labs anyway. So if I were you, I'd just fix your code to handle it for now and not worry about whether we patch it or not.

Is that helpful?</data>
      <data key="d3">homework</data>
    </node>
    <node id="755">
      <data key="d1">message</data>
      <data key="d2">For anyone who's already started working on project 0, this command might be better for testing than what was in the written instructions when you read them:

pytest test.py -v --tb=short --bucket=80</data>
      <data key="d3">project-0</data>
    </node>
    <node id="756">
      <data key="d1">message</data>
      <data key="d2">In order to do the homework due this Wednesday, you will need to understand the slide on precedence from today's lecture. Professor Goodrich will post the slides on learning suite by 3:15pm today.</data>
      <data key="d3">announcements</data>
    </node>
    <node id="757">
      <data key="d1">message</data>
      <data key="d2">Due to the STEM fair today, I won't be holding my office hours today, but will be happy to answer questions if you message me when I'm able to reply</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="758">
      <data key="d1">message</data>
      <data key="d2">Do late points count the same for project 5a (2 points per day), or is Friday night a hard deadline like for homework?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="759">
      <data key="d1">message</data>
      <data key="d2">For Project 1 (and therefore HW4 part 3), what is the input vocabulary? I don't see this specified in any documentation I can find.</data>
      <data key="d3">homework</data>
    </node>
    <node id="760">
      <data key="d1">message</data>
      <data key="d2">How do I test locally? I’ve tried using pytest test.py —bucket=100 but it says that —bucket=100 is an unrecognized argument</data>
      <data key="d3">project-1</data>
    </node>
    <node id="761">
      <data key="d1">message</data>
      <data key="d2">How do I change my directory? (I’ve googled it, chat gpted, and rewatched the project 0 video and I can’t get it to work) I’m on windows btw</data>
      <data key="d3">project-1</data>
    </node>
    <node id="762">
      <data key="d1">message</data>
      <data key="d2">I pushed my project to GitHub but there’s no feedback pull request, I think maybe because it’s late? Anyone know how I should submit?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="763">
      <data key="d1">message</data>
      <data key="d2">Up above the TAs said you have to create your own request if it isn't there. I think a quick search in this channel will get you there</data>
      <data key="d3">response</data>
    </node>
    <node id="764">
      <data key="d1">message</data>
      <data key="d2">how many points was uploading our practice exam worth?</data>
      <data key="d3">exams</data>
    </node>
    <node id="765">
      <data key="d1">message</data>
      <data key="d2">We do recommend you take the time and read through them carefully, as they will be a great starting point on the projects, ESPECIALLY project 1</data>
      <data key="d3">response</data>
    </node>
    <node id="766">
      <data key="d1">message</data>
      <data key="d2">It's just informational. Your grade for the project doens't have anything to do with it</data>
      <data key="d3">project-0</data>
    </node>
    <node id="767">
      <data key="d1">message</data>
      <data key="d2">It's just informational. Your grade for the project doens't have anything to do with it</data>
      <data key="d3">response</data>
    </node>
    <node id="768">
      <data key="d1">message</data>
      <data key="d2">I'm trying to clone the github and i get this when i paste in the what the video tells me to copy and past to clone the repository. Any ideas?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="769">
      <data key="d1">message</data>
      <data key="d2">I might be there too!</data>
      <data key="d3">response</data>
    </node>
    <node id="770">
      <data key="d1">message</data>
      <data key="d2">According to Learning Suite, it closes at 7pm tonight.</data>
      <data key="d3">general</data>
    </node>
    <node id="771">
      <data key="d1">message</data>
      <data key="d2">I haven't taken the practice exam yet but I'm planning to take it at 1pm in the TA lab!</data>
      <data key="d3">response</data>
    </node>
    <node id="772">
      <data key="d1">message</data>
      <data key="d2">maybe it's just sundays that don't count?</data>
      <data key="d3">response</data>
    </node>
    <node id="773">
      <data key="d1">message</data>
      <data key="d2">I think you may have a one-use key since I tried to use the link and I got "invalid download link".</data>
      <data key="d3">general</data>
    </node>
    <node id="774">
      <data key="d1">message</data>
      <data key="d2">Did anyone catch an edge case in Project 2 that wasn't in the tests for Project 2? My Project 2 code passed all the test cases when I submitted it, but when I try to use my Project 2 code in Project 3, it fails. I think there must be an edge case that isn't tested on that I didn't build a solution for. I am going to see what I can find, but in case someone else has already found one, might as well not reinvent the wheel. I'm thinking I have an infinite recursion problem on schemes because my Project 2 code is timing out on Bucket 80, input4 of Project3 Passoff, and when I run my Project 3 code, it says it fails on input4 at the very beginning.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="775">
      <data key="d1">message</data>
      <data key="d2">My parse_scheme_list and parse_scheme don't stop recursing, and as a result, input4 of Bucket 80 fails on token (ID,"SK",1).</data>
      <data key="d3">project-3</data>
    </node>
    <node id="776">
      <data key="d1">message</data>
      <data key="d2">You do need to commit and push all of your finished files to GitHub before following the pass off instructions</data>
      <data key="d3">response</data>
    </node>
    <node id="777">
      <data key="d1">message</data>
      <data key="d2">Anyone know if I need to commit and push my code to be checked on github?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="778">
      <data key="d1">message</data>
      <data key="d2">https://learningsuite.byu.edu/.CAVr/cid-QU01ke0lYENd/student/pages/id-UF_B this should be the passof instructions</data>
      <data key="d3">response</data>
    </node>
    <node id="779">
      <data key="d1">message</data>
      <data key="d2">Schemes:
     #student(N,I,A,M)
   student(N,I,A,M)
     #WhoMajor(N,M)
   WhoMajor(N,M)

There are all these # message in every lines. Is my FSM supposed to be able to skip them when reading it?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="780">
      <data key="d1">message</data>
      <data key="d2">Same issue here</data>
      <data key="d3">response</data>
    </node>
    <node id="781">
      <data key="d1">message</data>
      <data key="d2">yes</data>
      <data key="d3">response</data>
    </node>
    <node id="782">
      <data key="d1">message</data>
      <data key="d2">So，I just saw this message, can I still submit in learning suite and show the TA the time I submitted to receive full credit?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="783">
      <data key="d1">message</data>
      <data key="d2">Anyone know where I can find the zoom link to class today at 2:00pm for Michael Goodrich room 3718 of the HBLL?</data>
      <data key="d3">general</data>
    </node>
    <node id="784">
      <data key="d1">message</data>
      <data key="d2">Oh gotcha, that makes sense. thanks</data>
      <data key="d3">general</data>
    </node>
    <node id="785">
      <data key="d1">message</data>
      <data key="d2">In the Jupiter notebook example 
https://github.com/BYU-CS-236/jupyter-notebook-tutorials/blob/main/Finite%20State%20Automata/FSA_Classes.py
I think under the ColonDashFSA function, it should be:
    def s_err(self) -&gt; function:
        #print("In state s_err. s_err's information is ",self.s_err)
        **next_state: function = self.s_err** # stay in error state on all inputs
        self.num_chars_read += 1
        return next_state

rather than

    def s_err(self) -&gt; function:
        #print("In state s_err. s_err's information is ",self.s_err)
       ** next_state = self.s_err** # stay in error state on all inputs
        self.num_chars_read += 1
        return next_state

Is this correct?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="786">
      <data key="d1">message</data>
      <data key="d2">So, S can only go to "ABe", as in S --&gt; ABe. So you would represent that first row with just a bunch of "ABe"s</data>
      <data key="d3">response</data>
    </node>
    <node id="787">
      <data key="d1">message</data>
      <data key="d2">They do essentially the same thing. If the other way works better for you, then great!</data>
      <data key="d3">project-1</data>
    </node>
    <node id="788">
      <data key="d1">message</data>
      <data key="d2">I don't think the style guide would appreciate that... but I could be wrong.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="789">
      <data key="d1">message</data>
      <data key="d2">Looks like we can't use the project2-passoffs for reference. 😆 
Just kidding.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="790">
      <data key="d1">message</data>
      <data key="d2">I could probably help you</data>
      <data key="d3">project-2</data>
    </node>
    <node id="791">
      <data key="d1">message</data>
      <data key="d2">I'm not a TA, but I could probably help you with submitting to GitHub</data>
      <data key="d3">project-2</data>
    </node>
    <node id="792">
      <data key="d1">message</data>
      <data key="d2">Are we allowed to use premade packages for the project (will the auto grader pick it up)? For example, I want to use this premade mutable tuple package.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="793">
      <data key="d1">message</data>
      <data key="d2">Yes, that's a typo</data>
      <data key="d3">project-3</data>
    </node>
    <node id="794">
      <data key="d1">message</data>
      <data key="d2">But I get denied</data>
      <data key="d3">project-3</data>
    </node>
    <node id="795">
      <data key="d1">message</data>
      <data key="d2">Alternative way to not have a trailing comma in the Relations def __str__ function:
                if i &lt; (len(self.header.values) -1): 
                    output_str += ", "</data>
      <data key="d3">project-3</data>
    </node>
    <node id="796">
      <data key="d1">message</data>
      <data key="d2">Here's Project 4's overview:</data>
      <data key="d3">project-4</data>
    </node>
    <node id="797">
      <data key="d1">message</data>
      <data key="d2">you mean writing the union function?</data>
      <data key="d3">response</data>
    </node>
    <node id="798">
      <data key="d1">message</data>
      <data key="d2">Okay cool, I did that too. It's just a matter of calling natural join from within my interpreter class. Here's what I have:</data>
      <data key="d3">project-4</data>
    </node>
    <node id="799">
      <data key="d1">message</data>
      <data key="d2">Yes, this is what I currently have, but struggling conceptially how to union them.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="800">
      <data key="d1">message</data>
      <data key="d2">jk found it. It's  pytest test.py -v -vv --bucket=80</data>
      <data key="d3">project-4</data>
    </node>
    <node id="801">
      <data key="d1">message</data>
      <data key="d2">That's what I did to find it actually 😆</data>
      <data key="d3">project-4</data>
    </node>
    <node id="802">
      <data key="d1">message</data>
      <data key="d2">Oof, just saw this. I totally would've helped had I seen this earlier.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="803">
      <data key="d1">message</data>
      <data key="d2">I don't have an autograder on my github</data>
      <data key="d3">project-5</data>
    </node>
    <node id="804">
      <data key="d1">message</data>
      <data key="d2">That's odd, it should come with one. Do you have a screen shot?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="805">
      <data key="d1">message</data>
      <data key="d2">Is that a practice exam, or is that just</data>
      <data key="d3">exams</data>
    </node>
    <node id="806">
      <data key="d1">message</data>
      <data key="d2">here it is</data>
      <data key="d3">exams</data>
    </node>
    <node id="807">
      <data key="d1">message</data>
      <data key="d2">I started the homework on Friday and saved it hoping to come back to it later. Upon opening it today, it showed that I had submitted attempt 1, despite me only answering part of the questions.
Will I always have to complete the homework in 1 sitting?</data>
      <data key="d3">homework</data>
    </node>
    <node id="808">
      <data key="d1">message</data>
      <data key="d2">Like it says, the square root of a positive n is both n **and** -n. x^(1/2) is the same thing as sqrt(x). This means that if x is 4, f(x) is equal to 2 **and** -2. Functions can map an input only to a single output, and this equation violates that by mapping every input to both a positive and negative output.</data>
      <data key="d3">response</data>
    </node>
    <node id="809">
      <data key="d1">message</data>
      <data key="d2">You are totally right 🤦</data>
      <data key="d3">homework</data>
    </node>
    <node id="810">
      <data key="d1">message</data>
      <data key="d2">Thank you, this helps!</data>
      <data key="d3">homework</data>
    </node>
    <node id="811">
      <data key="d1">message</data>
      <data key="d2">Line in the TA help-queue right now be like</data>
      <data key="d3">random</data>
    </node>
    <node id="812">
      <data key="d1">message</data>
      <data key="d2">I don't get it</data>
      <data key="d3">random</data>
    </node>
    <node id="813">
      <data key="d1">message</data>
      <data key="d2">Helpful tip for cloning, committing, and pushing changes to GitHub is found in this video at 4:26. It's a lot simpler than using the terminal in my opinion. https://youtu.be/M_7pjKFW5fI?si=iS2RIGEoIv0AEHMA&amp;t=266</data>
      <data key="d3">project-0</data>
    </node>
    <node id="814">
      <data key="d1">message</data>
      <data key="d2">Hello</data>
      <data key="d3">general</data>
    </node>
    <node id="815">
      <data key="d1">message</data>
      <data key="d2">No</data>
      <data key="d3">project-4</data>
    </node>
    <node id="816">
      <data key="d1">message</data>
      <data key="d2">LS -&gt; Content -&gt; Projects -&gt; Cheat Sheet</data>
      <data key="d3">general</data>
    </node>
    <node id="817">
      <data key="d1">message</data>
      <data key="d2">The scc list</data>
      <data key="d3">response</data>
    </node>
    <node id="818">
      <data key="d1">message</data>
      <data key="d2">LS -&gt; Content -&gt; Projects -&gt; Cheat Sheet</data>
      <data key="d3">response</data>
    </node>
    <node id="819">
      <data key="d1">message</data>
      <data key="d2">Yes, I'm here til 4</data>
      <data key="d3">general</data>
    </node>
    <node id="820">
      <data key="d1">message</data>
      <data key="d2">Learning Suite -&gt; Content -&gt; TA Help</data>
      <data key="d3">general</data>
    </node>
    <node id="821">
      <data key="d1">message</data>
      <data key="d2">Say the input string is “ k” I’m pretty</data>
      <data key="d3">project-1</data>
    </node>
    <node id="822">
      <data key="d1">message</data>
      <data key="d2">Have you followed the project passoff instructions on Learning Suite &gt; Content &gt; Projects &gt; Passoff?</data>
      <data key="d3">response</data>
    </node>
    <node id="823">
      <data key="d1">message</data>
      <data key="d2">Hey &lt;Person&gt;, how did solve this issue?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="824">
      <data key="d1">message</data>
      <data key="d2">In this case the ID of length 8, Schemess, takes precedence over the Schemes token of length 7.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="825">
      <data key="d1">message</data>
      <data key="d2">Make sure you are in your project directory where you are running the cmd</data>
      <data key="d3">project-1</data>
    </node>
    <node id="826">
      <data key="d1">message</data>
      <data key="d2">A ':-' token will have a higher precedence than the ':' token because it accepted a length of 2 instead of just 1 for the colon.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="827">
      <data key="d1">message</data>
      <data key="d2">Colon Dash should return True and take care of the ":-" part of the string in which case just "k" is left. In project1, this would be an ID</data>
      <data key="d3">project-1</data>
    </node>
    <node id="828">
      <data key="d1">message</data>
      <data key="d2">If you do not have a pull request open, you need to open one and close it manually. There are plenty of tutorials online</data>
      <data key="d3">project-2</data>
    </node>
    <node id="829">
      <data key="d1">message</data>
      <data key="d2">Try using .extend() instead of append on rst</data>
      <data key="d3">response</data>
    </node>
    <node id="830">
      <data key="d1">message</data>
      <data key="d2">The yellows are x and the y is blue</data>
      <data key="d3">response</data>
    </node>
    <node id="831">
      <data key="d1">message</data>
      <data key="d2">It looks like your program might be printing out the string instead of returning it</data>
      <data key="d3">project-2</data>
    </node>
    <node id="832">
      <data key="d1">message</data>
      <data key="d2">Are you sure you're parse_scheme function returns a single Scheme?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="833">
      <data key="d1">message</data>
      <data key="d2">What does your pytest output look like?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="834">
      <data key="d1">message</data>
      <data key="d2">Try assigning a copy of a list to your predicates inside of directly. For example, predicate.parameters = self.parameters[:]. Then you can clear your global parameters without clearing the predicate list</data>
      <data key="d3">project-2</data>
    </node>
    <node id="835">
      <data key="d1">message</data>
      <data key="d2">You could try reversing your if statements to if not self.match. Then if that is statement is true, throw and exception and return out of the function. That would leave the rest of your if statements on the base level of the funciton</data>
      <data key="d3">project-2</data>
    </node>
    <node id="836">
      <data key="d1">message</data>
      <data key="d2">Yes you can just use a dictionary in your code. The keys should be the name of the relations. The hash function is used under the hood by python. So there is no need to ever call the __hash__ method</data>
      <data key="d3">response</data>
    </node>
    <node id="837">
      <data key="d1">message</data>
      <data key="d2">If anyone has a problem where adding a row to a relation, adds it to all relations in the database, you are passing the same set variable to all relations in the interpret schemes function when you should be passing unique sets</data>
      <data key="d3">project-3</data>
    </node>
    <node id="838">
      <data key="d1">message</data>
      <data key="d2">Check pinned messages</data>
      <data key="d3">response</data>
    </node>
    <node id="839">
      <data key="d1">message</data>
      <data key="d2">Check pinned messages</data>
      <data key="d3">response</data>
    </node>
    <node id="840">
      <data key="d1">message</data>
      <data key="d2">Why do you need to debug that file?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="841">
      <data key="d1">message</data>
      <data key="d2">Make sure you are in the same directory as the test.py file when you run the cmd</data>
      <data key="d3">project-3</data>
    </node>
    <node id="842">
      <data key="d1">message</data>
      <data key="d2">Check pinned messages</data>
      <data key="d3">project-3</data>
    </node>
    <node id="843">
      <data key="d1">message</data>
      <data key="d2">Did you follow the passing instructions?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="844">
      <data key="d1">message</data>
      <data key="d2">Looks like somewhere you set self.datalog_program equal to a string</data>
      <data key="d3">project-3</data>
    </node>
    <node id="845">
      <data key="d1">message</data>
      <data key="d2">Have you pushed your code to GitHub?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="846">
      <data key="d1">message</data>
      <data key="d2">You should create your own tuple class. Also the autograder will not pick that up.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="847">
      <data key="d1">message</data>
      <data key="d2">Try passing a newly initialized set to your relation constructor</data>
      <data key="d3">project-3</data>
    </node>
    <node id="848">
      <data key="d1">message</data>
      <data key="d2">Join refers to a natural join</data>
      <data key="d3">project-4</data>
    </node>
    <node id="849">
      <data key="d1">message</data>
      <data key="d2">Evaluating your rules will add more data to the database to query from. So no, it shouldn't be concerning until after you finish</data>
      <data key="d3">response</data>
    </node>
    <node id="850">
      <data key="d1">message</data>
      <data key="d2">The header should be renamed to the original scheme header which has the lowercase params</data>
      <data key="d3">response</data>
    </node>
    <node id="851">
      <data key="d1">message</data>
      <data key="d2">Join refers to a natural join</data>
      <data key="d3">response</data>
    </node>
    <node id="852">
      <data key="d1">message</data>
      <data key="d2">I've seen peoples code run super slow in vscode due to the code runner button. Have you tried running it in the terminal?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="853">
      <data key="d1">message</data>
      <data key="d2">You should be sorting your rows before you print them out to make sure that they are always in the same order</data>
      <data key="d3">project-4</data>
    </node>
    <node id="854">
      <data key="d1">message</data>
      <data key="d2">You could represent a forest of nodes using a list of lists were each list consists of element ids of nodes in a scc</data>
      <data key="d3">project-5</data>
    </node>
    <node id="855">
      <data key="d1">message</data>
      <data key="d2">You don't evaluate the sccs in order. You evalute the scc in the order you made them and sort the components inside the scc. That test case each rule is its own scc, so it gets evaluated in the order you found them</data>
      <data key="d3">response</data>
    </node>
    <node id="856">
      <data key="d1">message</data>
      <data key="d2">No</data>
      <data key="d3">response</data>
    </node>
    <node id="857">
      <data key="d1">message</data>
      <data key="d2">You could represent a forest of nodes using a list of lists were each list consists of element ids of nodes in a scc</data>
      <data key="d3">response</data>
    </node>
    <node id="858">
      <data key="d1">message</data>
      <data key="d2">Too see all of the output from the later files try running your program in the terminal instead of vscode. If a rule depends on it self it will run the fixed point algorithm. Which is the case with married to. So it populates on the first pass, and nothing is added on the second pass so it breaks out of the loop</data>
      <data key="d3">project-5</data>
    </node>
    <node id="859">
      <data key="d1">message</data>
      <data key="d2">I just sent you a dm</data>
      <data key="d3">project-5</data>
    </node>
    <node id="860">
      <data key="d1">message</data>
      <data key="d2">Check out project cheat sheet on learning suite</data>
      <data key="d3">project-5</data>
    </node>
    <node id="861">
      <data key="d1">message</data>
      <data key="d2">Then you will have to create your own pull request</data>
      <data key="d3">project-5</data>
    </node>
    <node id="862">
      <data key="d1">message</data>
      <data key="d2">What’s making it fail?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="863">
      <data key="d1">message</data>
      <data key="d2">The yellows are x and the y is blue</data>
      <data key="d3">homework</data>
    </node>
    <node id="864">
      <data key="d1">message</data>
      <data key="d2">The $ character is the operator for this question</data>
      <data key="d3">homework</data>
    </node>
    <node id="865">
      <data key="d1">message</data>
      <data key="d2">In this case you need to use the vertical line test to test if each x has one individual y.</data>
      <data key="d3">homework</data>
    </node>
    <node id="866">
      <data key="d1">message</data>
      <data key="d2">Is anyone else still having trouble with pytest</data>
      <data key="d3">project-0</data>
    </node>
    <node id="867">
      <data key="d1">message</data>
      <data key="d2">Try it with “-m” instead of “- m”</data>
      <data key="d3">project-0</data>
    </node>
    <node id="868">
      <data key="d1">message</data>
      <data key="d2">I will be missing my hours today for the STEM fair</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="869">
      <data key="d1">message</data>
      <data key="d2">Yes my bad</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="870">
      <data key="d1">message</data>
      <data key="d2">LS keeps crashing when I try to open Ricky Rosas exam. Can anyone else open it?</data>
      <data key="d3">exam-grading-excpetions</data>
    </node>
    <node id="871">
      <data key="d1">message</data>
      <data key="d2">What do you mean by "exception"? As in, the "Failure!" state?</data>
      <data key="d3">response</data>
    </node>
    <node id="872">
      <data key="d1">message</data>
      <data key="d2">hey i got a question for you all, I keep getting like a weird name error and out of index error when i return the token list from my lexer. would any of you know how to fix that?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="873">
      <data key="d1">message</data>
      <data key="d2">The break means, "if there is only rule in the scc and that rule is not dependent on itself(the head predicate does not appear in the body predicates), then you only want to evaluate the rule one time." The break is so that you only evaluate the rule that one time and you break out of the while loop.</data>
      <data key="d3">response</data>
    </node>
    <node id="874">
      <data key="d1">message</data>
      <data key="d2">hey! can anyone help me understand how to code out a depth first search traversal? i saw some psuedocode on one of the slides but its still not clicking</data>
      <data key="d3">project-5</data>
    </node>
    <node id="875">
      <data key="d1">message</data>
      <data key="d2">hey! i managed to figure it out haha but now im just stuck on the self dependency and breaking when i should</data>
      <data key="d3">project-5</data>
    </node>
    <node id="876">
      <data key="d1">message</data>
      <data key="d2">https://www.mathsisfun.com/sets/injective-surjective-bijective.html</data>
      <data key="d3">general</data>
    </node>
    <node id="877">
      <data key="d1">message</data>
      <data key="d2">How is f(x) = x^2 + 1 either injective or surjective? I put none of the above, but LS says it's incorrect. It can't be injective because it doesn't pass the horizontal line test, and it can't be surjective because the subdomain positive **R** or (0, inf) does not fully encompass the range, which is [1, infinity). Is the error in my understanding or the grading?</data>
      <data key="d3">homework</data>
    </node>
    <node id="878">
      <data key="d1">message</data>
      <data key="d2">I thought injective meant that each input had a unique output. As in for each y there is only one corresponding x?</data>
      <data key="d3">homework</data>
    </node>
    <node id="879">
      <data key="d1">message</data>
      <data key="d2">in a similar vein, I had an error where pytest was using the wrong version and throwing syntax errors on the type annotations, but putting `python3 -m pytest` instead of just `pytest` fixed that as well</data>
      <data key="d3">project-0</data>
    </node>
    <node id="880">
      <data key="d1">message</data>
      <data key="d2">I switched my __eq__ and __hash__ methods for my "tuple" class but the order doesn't match the answers
Do these look right?
    ```def __eq__(self, row: 'Row') -&gt; bool:
        if type(row) != Row:
            return False

        if self.__values != row.get_values():
            return False
        return True
    

    def __hash__(self) -&gt; int:
        return hash(tuple(self.__values))```</data>
      <data key="d3">project-3</data>
    </node>
    <node id="881">
      <data key="d1">message</data>
      <data key="d2">I'm having the same issue as you so take this with a grain of salt, but from what I understand all those custom methods are used when you convert the set of tuples into a list of tuples and sort it. You also need to make a __lt__ function</data>
      <data key="d3">response</data>
    </node>
    <node id="882">
      <data key="d1">message</data>
      <data key="d2">I then get a ```TypeError: '&lt;' not supported between instances of 'Row' and 'Row'```

should I define a ```__lt__``` method in my class?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="883">
      <data key="d1">message</data>
      <data key="d2">I'd love to be included in that too if at all possible!</data>
      <data key="d3">exams</data>
    </node>
    <node id="884">
      <data key="d1">message</data>
      <data key="d2">I'd love to be included in that too if at all possible!</data>
      <data key="d3">response</data>
    </node>
    <node id="885">
      <data key="d1">message</data>
      <data key="d2">So there's a weird error I'm getting in the bucket tests of my code... ```AttributeError: 'NoneType' object has no attribute 'rstrip'``` I assume this is becuase my code is trying to return a null character in the output string which doesn't show up in my terminal, but that the bucket test doesn't like. It seems to be ocurring in the cases where the query has all strings as it's parameters (
```DeaWoo('a','a','a','a','a','a','b')? Yes(1)
```) for example, in test case 2. In my terminal this 'error' shows up silently as extra space between my answer compared to the actual answer</data>
      <data key="d3">project-3</data>
    </node>
    <node id="886">
      <data key="d1">message</data>
      <data key="d2">Are you taking out the comment tokens in project2.py or in lexer.py?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="887">
      <data key="d1">message</data>
      <data key="d2">pytest test.py -v --tb=short --bucket=80</data>
      <data key="d3">project-3</data>
    </node>
    <node id="888">
      <data key="d1">message</data>
      <data key="d2">Is that supposed to say ```if scc not is self dependent?```</data>
      <data key="d3">project-5</data>
    </node>
    <node id="889">
      <data key="d1">message</data>
      <data key="d2">To submit this to we just push our project to git? What else do we need to do?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="890">
      <data key="d1">message</data>
      <data key="d2">Thank you!</data>
      <data key="d3">project-1</data>
    </node>
    <node id="891">
      <data key="d1">message</data>
      <data key="d2">Will the final be a testing center exam or will it be online?</data>
      <data key="d3">exams</data>
    </node>
    <node id="892">
      <data key="d1">message</data>
      <data key="d2">I'm having issues with it too. Currently I have it outputting the token undefined, but how do you get it so if all are undefined up to EOF it returns just one undefined token and then the total tokens = error on line ()</data>
      <data key="d3">project-1</data>
    </node>
    <node id="893">
      <data key="d1">message</data>
      <data key="d2">Yeah that's correct</data>
      <data key="d3">project-2</data>
    </node>
    <node id="894">
      <data key="d1">message</data>
      <data key="d2">has anyone else ran into the problem of the while loop in the run function not looping past the first created token?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="895">
      <data key="d1">message</data>
      <data key="d2">This is probably what your gonna have to do.</data>
      <data key="d3">response</data>
    </node>
    <node id="896">
      <data key="d1">message</data>
      <data key="d2">Where does it say, if its raining Yvette will get wet? from what I can see there aren't any imply ones on that proof</data>
      <data key="d3">response</data>
    </node>
    <node id="897">
      <data key="d1">message</data>
      <data key="d2">i though that too but there arent. The first test case of nothing passes so its not doing it for that but this is what happens on the second test case</data>
      <data key="d3">response</data>
    </node>
    <node id="898">
      <data key="d1">message</data>
      <data key="d2">Yes, I just set that value to the token list size + 1 (or -1 if it's too big)</data>
      <data key="d3">response</data>
    </node>
    <node id="899">
      <data key="d1">message</data>
      <data key="d2">You also need to be careful because you can't just read in a 2nd apostrophe and then call it quits. In the code we're reading they use two apostrophes inside a string to denote an apostrophe. For example if they wanted the string to be Alex's toy they would have 'Alex''s toy' so you have to check the next character to make sure it's not a second apostrophe in a row</data>
      <data key="d3">response</data>
    </node>
    <node id="900">
      <data key="d1">message</data>
      <data key="d2">are you running it through project1.py</data>
      <data key="d3">response</data>
    </node>
    <node id="901">
      <data key="d1">message</data>
      <data key="d2">i tried that but it keep giving me errors</data>
      <data key="d3">project-1</data>
    </node>
    <node id="902">
      <data key="d1">message</data>
      <data key="d2">i had to put python -m in front for it to work, it might be a windows thing</data>
      <data key="d3">project-1</data>
    </node>
    <node id="903">
      <data key="d1">message</data>
      <data key="d2">it is printing it, the line is updating within the run function its just when i use self.line_number in my manager function to create the right token, its not using the updated value</data>
      <data key="d3">project-1</data>
    </node>
    <node id="904">
      <data key="d1">message</data>
      <data key="d2">my bucket 80 test case 4 is working properly when I run that specific file but when use the test cases in the pass off it is outputting something different. Any Ideas? All the other test cases work</data>
      <data key="d3">project-2</data>
    </node>
    <node id="905">
      <data key="d1">message</data>
      <data key="d2">I dont think so, it seems like project 3 is going to utilize each individual data structure to interpret the datalog program</data>
      <data key="d3">response</data>
    </node>
    <node id="906">
      <data key="d1">message</data>
      <data key="d2">Your lexer in project 1 printed out the token list most likely using a to_string() to do it. In project 2 you want to make sure you are just passing in the list of tokens as a list of token objects. You may have to manipulate your project 1 code a bit</data>
      <data key="d3">response</data>
    </node>
    <node id="907">
      <data key="d1">message</data>
      <data key="d2">i would try just setting curr_predicate.name to an empty string and curr_predicate.parameters to an empty list. Thats what I did and it worked well. my guess is there is a problem in you clearcurrentpredicate function where it is somehow connected to your datalogprogram object</data>
      <data key="d3">response</data>
    </node>
    <node id="908">
      <data key="d1">message</data>
      <data key="d2">idk if you already figured it out but if you specify the variable type as a parameter it should work. Something like my_parameter: Parameter = Parameter() Then you can access those objects variables with the .(whatever the variable name is)</data>
      <data key="d3">project-2</data>
    </node>
    <node id="909">
      <data key="d1">message</data>
      <data key="d2">where are you putting each token into that tokens list?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="910">
      <data key="d1">message</data>
      <data key="d2">The parse_datalog_program function shouldn't return anything, if you do option A on the TA help slides which i highly recommend. It just wont fail if its an accepted format.  If you do option B it should just return your datalog_program object. The datalog_program object contains all of your scheme predicates, fact predicates, rules, query predicates, and domain list. your datalog_program.to_string() returns a formatted version of all of these put together so that it looks like what is supposed to be outputed from the lab specs and answer.txt files.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="911">
      <data key="d1">message</data>
      <data key="d2">&lt;Person&gt; was able to figure it out for me. He just had me git push it and then he went in and figured out why it was failing when it was for the pytest but not for the specific file. I'm not sure what he did, but i have the green checkmark on github now</data>
      <data key="d3">project-2</data>
    </node>
    <node id="912">
      <data key="d1">message</data>
      <data key="d2">why would it say that the str doesnt have a name attribute when I do scheme.name? my scheme predicates is a list of predicates so each one should have a name attribute. Also, when i do scheme. it comes up with the options of name and attribute its just the compiler that doesnt like it</data>
      <data key="d3">project-3</data>
    </node>
    <node id="913">
      <data key="d1">message</data>
      <data key="d2">no</data>
      <data key="d3">project-3</data>
    </node>
    <node id="914">
      <data key="d1">message</data>
      <data key="d2">when i try to iterate through self.database it says that database isnt iterable</data>
      <data key="d3">project-3</data>
    </node>
    <node id="915">
      <data key="d1">message</data>
      <data key="d2">how would you get the name and parameters of the predicate separate though?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="916">
      <data key="d1">message</data>
      <data key="d2">I ended up making a tree class and Node class because that's what makes sense to me. So my Forest is a list of trees and my tree object has its own list of nodes and postorder list.</data>
      <data key="d3">response</data>
    </node>
    <node id="917">
      <data key="d1">message</data>
      <data key="d2">Is there going to be a recording of the project 4 overview posted?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="918">
      <data key="d1">message</data>
      <data key="d2">Sometimes it gives that error when you run you code from anywhere except project4.py and your main function.</data>
      <data key="d3">response</data>
    </node>
    <node id="919">
      <data key="d1">message</data>
      <data key="d2">I also had that problem because my number of added tuples wasn't being set to zero at the beginning of every loop of the fixed point algorithm.  If it isn't set back to zero it has no way of stopping.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="920">
      <data key="d1">message</data>
      <data key="d2">Yup</data>
      <data key="d3">project-5</data>
    </node>
    <node id="921">
      <data key="d1">message</data>
      <data key="d2">I had a get_scc function which took in a list of rules and the strongly connected components. I iterated through the rules and scc and returned a list of rules which I then did my fixed point algorithm on.</data>
      <data key="d3">response</data>
    </node>
    <node id="922">
      <data key="d1">message</data>
      <data key="d2">Does your R7 have four nodes? I thought so because s5(a,w,x,y,z) has a in it.</data>
      <data key="d3">response</data>
    </node>
    <node id="923">
      <data key="d1">message</data>
      <data key="d2">There's really good pseudo code for the depth first search tree and depth first search forest functions in the lecture slides</data>
      <data key="d3">response</data>
    </node>
    <node id="924">
      <data key="d1">message</data>
      <data key="d2">Yup</data>
      <data key="d3">response</data>
    </node>
    <node id="925">
      <data key="d1">message</data>
      <data key="d2">You only evaluate the rule once if there is only one rule in the scc and if that rule does not depend on itself</data>
      <data key="d3">project-5</data>
    </node>
    <node id="926">
      <data key="d1">message</data>
      <data key="d2">I was able to get it fixed. I just had to double check how my num_rounds variable was getting updated and make sure that if the scc  only had one rule in it and that rule didnt depend on itelf, then it only gets evaluated once and doesnt run through the fixed point algorithim</data>
      <data key="d3">project-5</data>
    </node>
    <node id="927">
      <data key="d1">message</data>
      <data key="d2">Did you try directing the output into a separate file and running a difference command on that file and the answer file?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="928">
      <data key="d1">message</data>
      <data key="d2">For every rule in your datalog program(original_rule), you look at the body predicates in each rule. Then you have another loop through your rules to get the head predicates(other_rule). If the original_rules body predicates name  is the same as your other_rules head predicate name, that means that there is an edge from  your original rules node to your other_rules node. Therefore you add your other_rules node to the dependency list of your original rules node</data>
      <data key="d3">project-5</data>
    </node>
    <node id="929">
      <data key="d1">message</data>
      <data key="d2">What part of the pseudo code is confusing?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="930">
      <data key="d1">message</data>
      <data key="d2">&lt;@534453897956163604&gt; Is the power point with list of all the things to put on our sheet of notes on learning suite somewhere?</data>
      <data key="d3">exams</data>
    </node>
    <node id="931">
      <data key="d1">message</data>
      <data key="d2">It's the backwards arrow thing that just means that the left is updated to be the right</data>
      <data key="d3">response</data>
    </node>
    <node id="932">
      <data key="d1">message</data>
      <data key="d2">Thank you!</data>
      <data key="d3">response</data>
    </node>
    <node id="933">
      <data key="d1">message</data>
      <data key="d2">For hw 4 #3a are we doing the fsa for the string "strings" or just any possible string?</data>
      <data key="d3">homework</data>
    </node>
    <node id="934">
      <data key="d1">message</data>
      <data key="d2">Sets don't have duplicates</data>
      <data key="d3">response</data>
    </node>
    <node id="935">
      <data key="d1">message</data>
      <data key="d2">Any possible string in between to ‘ ‘ single quote marks</data>
      <data key="d3">response</data>
    </node>
    <node id="936">
      <data key="d1">message</data>
      <data key="d2">the only time its a problem is when you have select project and rename(they share the highest precedence) then you evaluate them from right to left

If this problem was possible, you would evaluate the select first and then the cross product, but as mentioned before, one of the attributes match so you cant</data>
      <data key="d3">homework</data>
    </node>
    <node id="937">
      <data key="d1">message</data>
      <data key="d2">CLUTCH</data>
      <data key="d3">general</data>
    </node>
    <node id="938">
      <data key="d1">message</data>
      <data key="d2">has anyone else run into a problem like this in their lexer file?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="939">
      <data key="d1">message</data>
      <data key="d2">So, you are passing in a value to run every time you call it?</data>
      <data key="d3">response</data>
    </node>
    <node id="940">
      <data key="d1">message</data>
      <data key="d2">I think you are running your lexer_fsm file, you should be running the project-1 file</data>
      <data key="d3">response</data>
    </node>
    <node id="941">
      <data key="d1">message</data>
      <data key="d2">Yes, but I don’t know how to fix it quite yet</data>
      <data key="d3">response</data>
    </node>
    <node id="942">
      <data key="d1">message</data>
      <data key="d2">from .fsa_classes.fsa import FSA
from .fsa_classes.colon_dash_fsa import ColonDashFSA
from .fsa_classes.colon_fsa import ColonFSA
from .token import Token</data>
      <data key="d3">project-1</data>
    </node>
    <node id="943">
      <data key="d1">message</data>
      <data key="d2">what exactly is a parameter object? As far as I can tell, it seems to be the same as a string except for its functions' parsing ability, but the parameter class feels the same as a string. However we are required to have a separate parameter class...</data>
      <data key="d3">project-2</data>
    </node>
    <node id="944">
      <data key="d1">message</data>
      <data key="d2">Solved my problem, wasn't looking at the project diagram 🤦‍♂️</data>
      <data key="d3">project-2</data>
    </node>
    <node id="945">
      <data key="d1">message</data>
      <data key="d2">It's either a typo or the langauge is just "a" as only a,b, and c are valid terminals. I'm not sure either tbh.</data>
      <data key="d3">homework</data>
    </node>
    <node id="946">
      <data key="d1">message</data>
      <data key="d2">@everyone Come join us on the 18th for a free t-shirt, refreshments, and information about the awesome college we're a part of! All are welcome!</data>
      <data key="d3">general</data>
    </node>
    <node id="947">
      <data key="d1">message</data>
      <data key="d2">Exactly</data>
      <data key="d3">response</data>
    </node>
    <node id="948">
      <data key="d1">message</data>
      <data key="d2">For an adjacency list if a vertex doesn't have anything it's dependant on do we just do Rn : __? Do we leave it out of the list entirely?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="949">
      <data key="d1">message</data>
      <data key="d2">Can our sheet of notes be double sided? I have had some professors mean single sided when they say 11X8.5 sheet</data>
      <data key="d3">exams</data>
    </node>
    <node id="950">
      <data key="d1">message</data>
      <data key="d2">okay! I still have the images I submitted for the midterm, would it help if I sent those to the TA's?</data>
      <data key="d3">exams</data>
    </node>
    <node id="951">
      <data key="d1">message</data>
      <data key="d2">I think the purpose of doing it as two separate characters is to make it clear where the number goes. Like if it is 9 you have two spots but only one number so where does it go</data>
      <data key="d3">response</data>
    </node>
    <node id="952">
      <data key="d1">message</data>
      <data key="d2">for HW 5 question 3 can the hour be given as the options of numbers 1-12? This seemed fine for me (as opposed to splitting it up into options 1-2 and than 0-9) but the instructions made it sound like I should maybe be splitting it up.</data>
      <data key="d3">homework</data>
    </node>
    <node id="953">
      <data key="d1">message</data>
      <data key="d2">Yes, problem 1 a is the one for homework 5</data>
      <data key="d3">homework</data>
    </node>
    <node id="954">
      <data key="d1">message</data>
      <data key="d2">The Women in Computer Science club is having a game night with nCino this Wednesday! Come join us!</data>
      <data key="d3">random</data>
    </node>
    <node id="955">
      <data key="d1">message</data>
      <data key="d2">you might need to run pip install (or pip3 install in my case)</data>
      <data key="d3">project-0</data>
    </node>
    <node id="956">
      <data key="d1">message</data>
      <data key="d2">I would assume so, since the project will be past the due date</data>
      <data key="d3">general</data>
    </node>
    <node id="957">
      <data key="d1">message</data>
      <data key="d2">I meant that last friday during class he said there would be one</data>
      <data key="d3">response</data>
    </node>
    <node id="958">
      <data key="d1">message</data>
      <data key="d2">Guys, I'm having a problem where, when iterating through a list of Parameters, the compiler apparently thinks some of the items in the list are Parameters and some are strings, which means I can't write code to do anything with the items in the list. Does anyone have any idea what this problem is or how to resolve it?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="959">
      <data key="d1">message</data>
      <data key="d2">10</data>
      <data key="d3">exams</data>
    </node>
    <node id="960">
      <data key="d1">message</data>
      <data key="d2">Hey I remember he mentioned in class that we might not have to work on some questions from HW 13? does anyone rememeber which problems we didn't have to do or where I can find the slides that mentioned it?</data>
      <data key="d3">homework</data>
    </node>
    <node id="961">
      <data key="d1">message</data>
      <data key="d2">I think one of the requirements for Prim’s is an unweighted, connected graph by definition, so there would not be an unconnected node</data>
      <data key="d3">response</data>
    </node>
    <node id="962">
      <data key="d1">message</data>
      <data key="d2">If a node is not connected to a graph and we use prims algorithm to describe the minimum spanning tree. That excluded node will not be a part of the spanning tree, correct? And the weight of the edges of the minimum spanning tree wouldn't be infinate, right?</data>
      <data key="d3">exams</data>
    </node>
    <node id="963">
      <data key="d1">message</data>
      <data key="d2">yes</data>
      <data key="d3">response</data>
    </node>
    <node id="964">
      <data key="d1">message</data>
      <data key="d2">Can arrows point between trees?</data>
      <data key="d3">homework</data>
    </node>
    <node id="965">
      <data key="d1">message</data>
      <data key="d2">Where are the TA offices located?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="966">
      <data key="d1">message</data>
      <data key="d2">Is there a TA that would be able to check if my Project 2 was submitted successfully? Please?</data>
      <data key="d3">general</data>
    </node>
    <node id="967">
      <data key="d1">message</data>
      <data key="d2">You're good. It is submitted correclty</data>
      <data key="d3">response</data>
    </node>
    <node id="968">
      <data key="d1">message</data>
      <data key="d2">Anyone know how to fix the python debugger running outside of the project file?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="969">
      <data key="d1">message</data>
      <data key="d2">Is there a TA that would be able to check if my Project 2 was submitted successfully? Please?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="970">
      <data key="d1">message</data>
      <data key="d2">Thank you so much!!!!!</data>
      <data key="d3">project-2</data>
    </node>
    <node id="971">
      <data key="d1">message</data>
      <data key="d2">Is there a TA that would be able to check if my Project 3 was submitted successfully? Please?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="972">
      <data key="d1">message</data>
      <data key="d2">Anyone else finish the practice exam and want to compare answers?</data>
      <data key="d3">exams</data>
    </node>
    <node id="973">
      <data key="d1">message</data>
      <data key="d2">I'd like to</data>
      <data key="d3">response</data>
    </node>
    <node id="974">
      <data key="d1">message</data>
      <data key="d2">Sure thing</data>
      <data key="d3">response</data>
    </node>
    <node id="975">
      <data key="d1">message</data>
      <data key="d2">Im confused on the Jupyter Tutorials. Are we supposed to do something with them or just follow what the video does?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="976">
      <data key="d1">message</data>
      <data key="d2">I can't figure out how to push to the code github. It's just says: "fatal: not a git repository (or any of the parent directories): .git". That's what it says when I try doing "git add ." I don't know what else to try</data>
      <data key="d3">project-1</data>
    </node>
    <node id="977">
      <data key="d1">message</data>
      <data key="d2">have you checked the learning suite "passing off projects" tab? LS is down for me rn so I don't remember the exact name</data>
      <data key="d3">response</data>
    </node>
    <node id="978">
      <data key="d1">message</data>
      <data key="d2">Yeah, I have finished it</data>
      <data key="d3">project-1</data>
    </node>
    <node id="979">
      <data key="d1">message</data>
      <data key="d2">There is an announcement in LS that tells how to submit the code</data>
      <data key="d3">response</data>
    </node>
    <node id="980">
      <data key="d1">message</data>
      <data key="d2">Hey, does anyone know how to submit the code for the project? I think I need to do make a pull request, but I don't know how to do that.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="981">
      <data key="d1">message</data>
      <data key="d2">Hey I'm getting this when I try to use git commit -m:</data>
      <data key="d3">project-0</data>
    </node>
    <node id="982">
      <data key="d1">message</data>
      <data key="d2">I bought my textbook online on RedShelf, but every time I try to open it, it doesn't load and causes Chrome to freeze. Is anyone else having this problem or know how to fix it?</data>
      <data key="d3">general</data>
    </node>
    <node id="983">
      <data key="d1">message</data>
      <data key="d2">Does anybody else have a 0 on project 5a, but no feedback was given at all?</data>
      <data key="d3">general</data>
    </node>
    <node id="984">
      <data key="d1">message</data>
      <data key="d2">I heard it from a few others.</data>
      <data key="d3">response</data>
    </node>
    <node id="985">
      <data key="d1">message</data>
      <data key="d2">I've finished writing my code and pushed it to GitHub, but I don't see any pull requests, so I can't submit my code for grading. Is anyone else having that issue?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="986">
      <data key="d1">message</data>
      <data key="d2">Use it as a template, that's gonna be important so the pass-off code works. If you haven't, go download project 1. The jupyter notebook *is* just an example</data>
      <data key="d3">project-1</data>
    </node>
    <node id="987">
      <data key="d1">message</data>
      <data key="d2">ALL is just an ID, I didn't need to write any special code for it</data>
      <data key="d3">response</data>
    </node>
    <node id="988">
      <data key="d1">message</data>
      <data key="d2">Don't print anything for newlines</data>
      <data key="d3">response</data>
    </node>
    <node id="989">
      <data key="d1">message</data>
      <data key="d2">Use it as a template, that's gonna be important so the pass-off code works. If you haven't, go download project 1. The jupyter notebook *is* just an example</data>
      <data key="d3">response</data>
    </node>
    <node id="990">
      <data key="d1">message</data>
      <data key="d2">On github you can go into history and clone from that. If you're getting this error when pushing and the client tests pass, you might be able to go to a TA for a manual passoff. As a reminder, you can do the tests on your own machine with the "pytest test.py -v --tb=short --bucket=20" command for each bucket</data>
      <data key="d3">project-1</data>
    </node>
    <node id="991">
      <data key="d1">message</data>
      <data key="d2">You find it in project 0</data>
      <data key="d3">project-1</data>
    </node>
    <node id="992">
      <data key="d1">message</data>
      <data key="d2">Importantly, you can find a lot of examples with explanations you can learn from and copy-paste in the jupiter notebook. I'd read through that to make sure I understand everything. 

And any function with a ... in it is meant to be completed by you</data>
      <data key="d3">project-1</data>
    </node>
    <node id="993">
      <data key="d1">message</data>
      <data key="d2">Yeah &lt;student&gt;is totally right on this, you read in a string, find the first token, and cut the first token out of the string. I did it line by line since I don't think we need to do block comments.

Something that will make the later FSA *much* easier is to track the exact string you're reading. Not necessary for the strings that are always the same, but important for the other ones.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="994">
      <data key="d1">message</data>
      <data key="d2">Should we just drop project2's stuff into the project-1-me folder?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="995">
      <data key="d1">message</data>
      <data key="d2">I was having the same problem, no idea what the fix is but it seems to have something to do with append functions vs extend functions</data>
      <data key="d3">response</data>
    </node>
    <node id="996">
      <data key="d1">message</data>
      <data key="d2">hyphens are replaced with underscores I think</data>
      <data key="d3">response</data>
    </node>
    <node id="997">
      <data key="d1">message</data>
      <data key="d2">if I'm correct you're supposed to return a datalog class</data>
      <data key="d3">project-2</data>
    </node>
    <node id="998">
      <data key="d1">message</data>
      <data key="d2">I'm having the same issue as you so take this with a grain of salt, but from what I understand all those custom methods are used when you convert the set of tuples into a list of tuples and sort it. You also need to make a __lt__ function</data>
      <data key="d3">project-3</data>
    </node>
    <node id="999">
      <data key="d1">message</data>
      <data key="d2">What do the single quotes  indicate in the rule body predicates? For example around the M: 
mwfCourses(C,R):-cdh(C,'M',H),cr(C,R).</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1000">
      <data key="d1">message</data>
      <data key="d2">My union is pretty simple.

I have the resulting relation from the natural join of all my body predicates

I delete the columns and attributes which won't go into my head relation, and reorder them

One at a time, I pass tuples in, checking if they're already inside, tracking if any make it in and returning a corresponding boolean</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1001">
      <data key="d1">message</data>
      <data key="d2">Not sure what the prep code looks like but I just stored my tuples in relations and added them to the head relation one at a time</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1002">
      <data key="d1">message</data>
      <data key="d2">wednesday is a flipped class, right?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1003">
      <data key="d1">message</data>
      <data key="d2">I did this project just fine with the free version</data>
      <data key="d3">response</data>
    </node>
    <node id="1004">
      <data key="d1">message</data>
      <data key="d2">if you're trying to run the pytest command and getting a "The term 'pytest' is not recognized as the name of a cmdlet, function, script file...." error, try doing python -m before all your commands.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1005">
      <data key="d1">message</data>
      <data key="d2">I'm going to be in the Talmage basement tomorrow from 10 to 12 if anyone wants to work on the Practice Exam with me! :0</data>
      <data key="d3">exams</data>
    </node>
    <node id="1006">
      <data key="d1">message</data>
      <data key="d2">For homework 16, you might not have to use rename. If you just realize that the only prerequisite for cs120 is cs101, you can just start by selecting for cs101 directly. I don't know if that was the intent of the problem, but it works.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1007">
      <data key="d1">message</data>
      <data key="d2">Will there be TA help today?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1008">
      <data key="d1">message</data>
      <data key="d2">@everyone Hey everyone! Just a reminder on the written homeworks, please submit a JPEG or a PDF! We can't grade if they are any other format (HEIC, pages). Also please do your work by hand and submit a picture. It is very hard to grade if you just put your answer in a comment. Please look back to your previous submissions and make sure you have the correct file format so we can grade it! Thanks!</data>
      <data key="d3">general</data>
    </node>
    <node id="1009">
      <data key="d1">message</data>
      <data key="d2">Send me a DM with the correct files</data>
      <data key="d3">response</data>
    </node>
    <node id="1010">
      <data key="d1">message</data>
      <data key="d2">Just had a question regarding code style</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1011">
      <data key="d1">message</data>
      <data key="d2">Yes, there is a specific order that you need to call them in. To figure this out, think about what has higher priority. Does an ID have a higher priority than a keyword? What about a string vs an ID or an ID vs a single character?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1012">
      <data key="d1">message</data>
      <data key="d2">That is the link for project 0, not project 1</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1013">
      <data key="d1">message</data>
      <data key="d2">Hey &lt;Person&gt;, so you probably have your other classes in another folder. You can't do this direclty in python. Just keep all of your classes in the same directory, or look up how to create python packages on GPT or google</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1014">
      <data key="d1">message</data>
      <data key="d2">Use the github classroom code template as your starter code. It lays out a template for you to fill in. You can find that here: https://classroom.github.com/a/Hz58MXCw</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1015">
      <data key="d1">message</data>
      <data key="d2">No. That is a typo and you should only do it for the initial variable declaration</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1016">
      <data key="d1">message</data>
      <data key="d2">VS Code tutorial video: https://youtu.be/QGn44NvNrvA</data>
      <data key="d3">tutorials</data>
    </node>
    <node id="1017">
      <data key="d1">message</data>
      <data key="d2">This tutorial quickly covers what Jupyter Notebooks are and how to use them. Please make sure to complete the VS Code tutorial and Project 0 before watching this video!</data>
      <data key="d3">tutorials</data>
    </node>
    <node id="1018">
      <data key="d1">message</data>
      <data key="d2">Project 5 is done</data>
      <data key="d3">tutorials</data>
    </node>
    <node id="1019">
      <data key="d1">message</data>
      <data key="d2">Please complete this tutorial before completing project 0!</data>
      <data key="d3">tutorials</data>
    </node>
    <node id="1020">
      <data key="d1">message</data>
      <data key="d2">Please complete the VS Code Tutorial video before completing this one!</data>
      <data key="d3">tutorials</data>
    </node>
    <node id="1021">
      <data key="d1">message</data>
      <data key="d2">Hey for anyone who is having trouble with key word arguments, or bugs that seem to be super random, this is from ChatGPT:

```
The behavior of mutable default arguments being shared across instances is a result of how Python handles function and method definitions. When you define a method with a default mutable argument, such as a set, list, or dictionary, Python evaluates the default argument only once at the time of function definition. This default value is then used for all calls to the method if no value is explicitly provided when the method is called.

Let's break down the key aspects of why this behavior occurs:

Function Definition Evaluation: When you define a class and its methods, the default arguments are evaluated and bound at the time of function definition, not each time the function is called.

Mutable Default Argument: In the case of a mutable default argument like an empty set (set()), that mutable object (the set) is created only once at the time of the class definition.

Shared Across Instances: Since the default argument is created only once, it becomes a shared reference across all instances of the class. Any instance that does not explicitly specify a different value for that argument will use the same shared default object.

Here's a simplified example to illustrate the behavior:
```
```python
class MyClass:
    def __init__(self, my_set=set()):
        self.my_set = my_set

obj1 = MyClass()
obj2 = MyClass()

obj1.my_set.add(1)

print(obj1.my_set)  # Output: {1}
print(obj2.my_set)  # Output: {1}
```
```
To avoid this shared behavior you should follow the recommended practice of using None as the default value and creating a new mutable object (e.g., a set) inside the constructor if the argument is not explicitly provided. This ensures that each instance gets its own separate mutable object:
```
```python
class MyClass:
    def __init__(self, my_set=None):
        if my_set is None:
            my_set = set()
        self.my_set = my_set
```</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1022">
      <data key="d1">message</data>
      <data key="d2">For everyone starting project 4, please delete this line in Relation.py if you have it: 
```python
name = "\u03C0" + "_{" + ",".join(column_headers) + "}(" + self.name + ")"
```
And replace it with:

```python 
name = self.name # or name = "" it doesn't really matter"
```
This will make your code significantly faster and won't cause you to elapse the time limit</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1023">
      <data key="d1">message</data>
      <data key="d2">My code ran under a second when I rewrote it over the summer. We just have a high time limit so something will have to be very wrong to break that</data>
      <data key="d3">response</data>
    </node>
    <node id="1024">
      <data key="d1">message</data>
      <data key="d2">&lt;@1062486497602830447&gt; yes</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1025">
      <data key="d1">message</data>
      <data key="d2">General HW Grading Question</data>
      <data key="d3">homework</data>
    </node>
    <node id="1026">
      <data key="d1">message</data>
      <data key="d2">Just hop on the TA help queue</data>
      <data key="d3">response</data>
    </node>
    <node id="1027">
      <data key="d1">message</data>
      <data key="d2">Don't worry about it. We are only teaching Universal Instantiation and Existential Generalization, not the other two which worry about arbitrary variables</data>
      <data key="d3">homework</data>
    </node>
    <node id="1028">
      <data key="d1">message</data>
      <data key="d2">No. You need to use the logical equivalences and rules of inference</data>
      <data key="d3">homework</data>
    </node>
    <node id="1029">
      <data key="d1">message</data>
      <data key="d2">Any character is the vocab</data>
      <data key="d3">homework</data>
    </node>
    <node id="1030">
      <data key="d1">message</data>
      <data key="d2">Yes</data>
      <data key="d3">homework</data>
    </node>
    <node id="1031">
      <data key="d1">message</data>
      <data key="d2">It should just stay on the accept state</data>
      <data key="d3">homework</data>
    </node>
    <node id="1032">
      <data key="d1">message</data>
      <data key="d2">You can also think about the function itself. Does each x value have a corresponding y value? Do some x values have multiple y values? etc.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1033">
      <data key="d1">message</data>
      <data key="d2">That is correct</data>
      <data key="d3">homework</data>
    </node>
    <node id="1034">
      <data key="d1">message</data>
      <data key="d2">Hey &lt;Person&gt;! I think you are a little confused. So, D is not an element of A because A does not contain the empty set explicitly. Now, D is a subset of A because the empty set is a subset of every set (every element of the empty set is also an element of A). Do you see the difference?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1035">
      <data key="d1">message</data>
      <data key="d2">Hey &lt;Person&gt;! I just looked in the grade book and couldn't figure out why it was giving you a 34 either. Must be a learning suite bug. I changed your grade back to a 60.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1036">
      <data key="d1">message</data>
      <data key="d2">It says it s only available for people</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1037">
      <data key="d1">message</data>
      <data key="d2">Try running the following command: 'python -m pytest -v -vv --bucket=80'</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1038">
      <data key="d1">message</data>
      <data key="d2">What output do you get when you run python -m pytest test.py -v --tb=short --bucket=80?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1039">
      <data key="d1">message</data>
      <data key="d2">You can't run python in CLion. We are heavily recommending you use VSCode for this class.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1040">
      <data key="d1">message</data>
      <data key="d2">That's ok. Just don't do that in the future 🙂</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1041">
      <data key="d1">message</data>
      <data key="d2">Yes, you need to install git on your computer. Google how to do that, it shouldn't be very difficult.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1042">
      <data key="d1">message</data>
      <data key="d2">You probably need to set up a Github SSH key. Go ahead and google or look up on youtube how to do this.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1043">
      <data key="d1">message</data>
      <data key="d2">You need to install pytest on your machine. You can do this with pip install pytest</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1044">
      <data key="d1">message</data>
      <data key="d2">Also make sure that you have closed your terminal and re-opened it after downloading</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1045">
      <data key="d1">message</data>
      <data key="d2">You shouldn't need to specify the file names. You are already in the correct file. Try something like: 'git commit -m "This part is a message not a file name"'</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1046">
      <data key="d1">message</data>
      <data key="d2">Fixed.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1047">
      <data key="d1">message</data>
      <data key="d2">Also see this slideshow for more information and techniques: https://docs.google.com/presentation/d/1XH64jff5CorWBfatIv-zNN1UYx4gH1ejJ0RcAu3nYY4/edit?usp=sharing</data>
      <data key="d3">announcements</data>
    </node>
    <node id="1048">
      <data key="d1">message</data>
      <data key="d2">Hey everyone! I am feeling a little sick today, so I am going to work my hours remote. I hope to be back in person tomorrow.</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1049">
      <data key="d1">message</data>
      <data key="d2">Likewise</data>
      <data key="d3">response</data>
    </node>
    <node id="1050">
      <data key="d1">message</data>
      <data key="d2">&lt;Person&gt; can't download answer for problem 3</data>
      <data key="d3">exam-grading-excpetions</data>
    </node>
    <node id="1051">
      <data key="d1">message</data>
      <data key="d2">I had that happen to me too. Basically it's just a weird way of saying that you need to make sure to print out your Domain.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1052">
      <data key="d1">message</data>
      <data key="d2">I have both buckets passing on my local machine, but only 100 passes on GitHub, any ideas?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1053">
      <data key="d1">message</data>
      <data key="d2">I'm having an issue with GitHub, when I run the git clone command on my Mac laptop it asks for my github username and password, but those don't work. I was able to clone down one of my own repos but not the classroom ones. I was able to do it successfully on my windows PC, but that's unfortunately tied down to a desk...</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1054">
      <data key="d1">message</data>
      <data key="d2">How do I do that? I probably did it once before for 260, but have totally forgotten</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1055">
      <data key="d1">message</data>
      <data key="d2">In class I heard that strings can cover multiple lines, and in the specifications it says that strings are only terminated by EOF. What should we print for the newline character?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1056">
      <data key="d1">message</data>
      <data key="d2">Has anyone else run into import problems with this project? I can't seem to run project3.py, because `from Relation import Relation` throws an error, saying there's no such module, even though I can run Project3RelationsTest.py fine.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1057">
      <data key="d1">message</data>
      <data key="d2">Just to check I'm doing this right, we should end up with 5 SCCs for project 5a, right?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1058">
      <data key="d1">message</data>
      <data key="d2">I don't understand why I'm getting this error. When trying to run the "all tests" command, I'm getting an error saying it can't concatenate a none type with a string. It looks like the bucket variable is of type "none". However, I haven't changed any of the test files or anything other than my project0.py file</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1059">
      <data key="d1">message</data>
      <data key="d2">All I did was change the return string to "Hello World " and passed the input of "bucket80" to the function</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1060">
      <data key="d1">message</data>
      <data key="d2">Unless I'm mistaken, you'll need to switch the order of your arguments. It's looking for a file named "works" instead of "project0"</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1061">
      <data key="d1">message</data>
      <data key="d2">I don't think so, most of us are home for the holidays. &lt;Person&gt; might still be having his later today though?</data>
      <data key="d3">general</data>
    </node>
    <node id="1062">
      <data key="d1">message</data>
      <data key="d2">I am just printing, not putting a string together. Should the string have new lines between each token? And should they have those plusses and minuses before each one like the answer output?</data>
      <data key="d3">response</data>
    </node>
    <node id="1063">
      <data key="d1">message</data>
      <data key="d2">Is your lever returning an object of the strings, or printing the strings using the print statement? The text cases need the Lexer run function to return a string, not just print it. That could be your issue?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1064">
      <data key="d1">message</data>
      <data key="d2">It depends on how you’re saving your FSAs to turn to tokens, but one of the easiest ways is in that case of input SchemesFacts is so have both schemes and ID return true, then create the token for whichever one is longer, or read more characters in the FSA</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1065">
      <data key="d1">message</data>
      <data key="d2">I checked and it's submitted with full points</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1066">
      <data key="d1">message</data>
      <data key="d2">The header should have just a list of strings, which will be populated by your scheme list from your datalog object</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1067">
      <data key="d1">message</data>
      <data key="d2">Just to make sure, did you run the bucket command? If you did, check the pull request on GitHub and make sure it isn’t merged, if it is you’ll need to make a new pull request</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1068">
      <data key="d1">message</data>
      <data key="d2">Exam Grade not posted</data>
      <data key="d3">exams</data>
    </node>
    <node id="1069">
      <data key="d1">message</data>
      <data key="d2">Yes, there were a few students where on learning suit the answer was unreadable due to a learning suite issue, if your grade isn't posted yet that's probably the issue, and we're working to get those graded as soon as possible</data>
      <data key="d3">exams</data>
    </node>
    <node id="1070">
      <data key="d1">message</data>
      <data key="d2">HW File types</data>
      <data key="d3">homework</data>
    </node>
    <node id="1071">
      <data key="d1">message</data>
      <data key="d2">Heic doesn't work with learningsuite, although for this assignment we can just download them and grade them next time try to submit it as a pdf, doc or txt file</data>
      <data key="d3">homework</data>
    </node>
    <node id="1072">
      <data key="d1">message</data>
      <data key="d2">I'm pretty sure if you're on Mac you need to use python3 not python as the command</data>
      <data key="d3">response</data>
    </node>
    <node id="1073">
      <data key="d1">message</data>
      <data key="d2">I'm pretty sure if you're on Mac you need to use python3 not python as the command</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1074">
      <data key="d1">message</data>
      <data key="d2">Are you able to hop on one of the meeting rooms, I might be able to help you better if I can see your screen and what you're trying</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1075">
      <data key="d1">message</data>
      <data key="d2">Hey I had some appointments that were moved around so I'll be starting my hours at 3:30 today</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1076">
      <data key="d1">message</data>
      <data key="d2">I noticed that a few students I'm guessing had late extensions and have just submitted their exams, I'm assuming there's no late penalty? I've just been grading their assignments as I would normally</data>
      <data key="d3">exam-grading-excpetions</data>
    </node>
    <node id="1077">
      <data key="d1">message</data>
      <data key="d2">maybe it's just sundays that don't count?</data>
      <data key="d3">general</data>
    </node>
    <node id="1078">
      <data key="d1">message</data>
      <data key="d2">he said there would be one in class on friday</data>
      <data key="d3">response</data>
    </node>
    <node id="1079">
      <data key="d1">message</data>
      <data key="d2">I think it's on Wednesday?</data>
      <data key="d3">response</data>
    </node>
    <node id="1080">
      <data key="d1">message</data>
      <data key="d2">I’m not sure if I 100% understand your question, but an FSA doesn’t necessarily need an error state, the idea is that if it gets through the whole string and is not in an accept state, then it is technically in an error state</data>
      <data key="d3">response</data>
    </node>
    <node id="1081">
      <data key="d1">message</data>
      <data key="d2">Thank you!</data>
      <data key="d3">response</data>
    </node>
    <node id="1082">
      <data key="d1">message</data>
      <data key="d2">I think in order to do a proof using resolution everything needs to be in CNF form. Perhaps that might require disjunctive syllogism? In any case, once you have CNF form (and I believe all the homework’s already give the premises in this form) you should be able to do the proof using only resolution</data>
      <data key="d3">response</data>
    </node>
    <node id="1083">
      <data key="d1">message</data>
      <data key="d2">Did you run these commands before following the learning suite pass off instructions?
git add .
git commit -m “Message”
git push</data>
      <data key="d3">response</data>
    </node>
    <node id="1084">
      <data key="d1">message</data>
      <data key="d2">For the string FSA for homework 4, is a string undefined when there is a new line before a closing ‘ occurs?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1085">
      <data key="d1">message</data>
      <data key="d2">Probably an import issue. I just played around with adding ‘.’ in front of stuff till it works. That assumes that the file is named RelationClass.py also</data>
      <data key="d3">response</data>
    </node>
    <node id="1086">
      <data key="d1">message</data>
      <data key="d2">This is even after you follow the learning suite pass off instructions? Content-&gt;projects-&gt;project pass off instructions</data>
      <data key="d3">response</data>
    </node>
    <node id="1087">
      <data key="d1">message</data>
      <data key="d2">I think your 102 input must have gotten messed up then. Mine starts with a comment:

# complete program with all token types

Schemes:
   snap(S,N,A,P) 
   csg(C,S,G)
   cp(C,Q)
   cdh(C,D,H)
   cr(C,R)
   before(C1,C2)
   mwfCourses(C,R)
   Schedule(N,C,R,D,H)
   Grades(N,C,G)
   Roll(C,R,N,S,G)

Facts:
   snap('1234','Charley','Apple St','555-1234'). 
   snap('1111','Linus','Piano St','555-1111').</data>
      <data key="d3">response</data>
    </node>
    <node id="1088">
      <data key="d1">message</data>
      <data key="d2">That's biconditional and it is only True when the items on the left and right have the SAME truth values, either True-True or False-False</data>
      <data key="d3">response</data>
    </node>
    <node id="1089">
      <data key="d1">message</data>
      <data key="d2">I heard yes</data>
      <data key="d3">response</data>
    </node>
    <node id="1090">
      <data key="d1">message</data>
      <data key="d2">DId you do all these before following the learning suite pass off instructions?
git add .
git commit -m “Message”
git push</data>
      <data key="d3">response</data>
    </node>
    <node id="1091">
      <data key="d1">message</data>
      <data key="d2">I got that error when I hadn’t done the git add and push stuff before running the cases on GitHub.

DId you do all these?
git add .
git commit -m “Message”
git push</data>
      <data key="d3">response</data>
    </node>
    <node id="1092">
      <data key="d1">message</data>
      <data key="d2">Nah, if GitHub says you passed all the tests you’re good</data>
      <data key="d3">response</data>
    </node>
    <node id="1093">
      <data key="d1">message</data>
      <data key="d2">yeah I did something like that. For python sets there's a difference function built in that you can use with '-'

set_A - set_B = New set that contains stuff only in A</data>
      <data key="d3">response</data>
    </node>
    <node id="1094">
      <data key="d1">message</data>
      <data key="d2">If you look at the test.py folder it just contains a few functions, no function calls. For testing, I would go edit project1.py as necessary then run that. Once that works I think you can do pytest test.py -v -vv —bucket=20</data>
      <data key="d3">response</data>
    </node>
    <node id="1095">
      <data key="d1">message</data>
      <data key="d2">I think callables is just an alias. It shouldn't matter</data>
      <data key="d3">response</data>
    </node>
    <node id="1096">
      <data key="d1">message</data>
      <data key="d2">looking at my code it seems like my sccs were already in the right order. Basically, for every scc do your fixed point algorithm with the rules in the specific scc. And don't forget the case for running the fixed point algorithm if a rule is self dependent</data>
      <data key="d3">response</data>
    </node>
    <node id="1097">
      <data key="d1">message</data>
      <data key="d2">I don't know if it's a kosher strategy, but I only had the id accept once it saw a terminating character. I compensated by adding all but the last character into the token.</data>
      <data key="d3">response</data>
    </node>
    <node id="1098">
      <data key="d1">message</data>
      <data key="d2">Just in general, p-&gt;q is only false in one circumstance: when p is true and q is false.

Looking at the 2nd table in the last row, both p &amp; q are false. Since they are both the ‘p’ in ‘p-&gt;q’ it’s impossible for you to get the case of the first thing being true but then second being false. So, p-&gt;r and q-&gt;r are both true</data>
      <data key="d3">response</data>
    </node>
    <node id="1099">
      <data key="d1">message</data>
      <data key="d2">and you originally downloaded the project from github classroom?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1100">
      <data key="d1">message</data>
      <data key="d2">Error message?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1101">
      <data key="d1">message</data>
      <data key="d2">Create an object for every one of the classes by calling its constructor. Ex: class Colon is made with Colon(parameters)</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1102">
      <data key="d1">message</data>
      <data key="d2">No, they should inherit from a generic FSA class. Tokens are separate</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1103">
      <data key="d1">message</data>
      <data key="d2">but, you can't just remove all the whitespace at once? EX: A string/comment has whitespace in it</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1104">
      <data key="d1">message</data>
      <data key="d2">interesting idea. I'll try something like that. It always just feels like I have to do the weirdest thing to get the FSAs to do what I want</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1105">
      <data key="d1">message</data>
      <data key="d2">Ok, just want to check if I have the logic right: lex passes one line of the input into all of the FSAs. The manager function determines which token to create based on the True/False list. It takes the FSA object that belongs to the token it creates and sees how many characters it read. This amount of characters can then be removed from the input_string and lex is run again with this smaller string</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1106">
      <data key="d1">message</data>
      <data key="d2">Thanks for the clarification. This is the FSA directory within the jupyter notebook directory. Are you able to identify which files are for the peek and patch method?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1107">
      <data key="d1">message</data>
      <data key="d2">Then how do you know if a string is undefined??</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1108">
      <data key="d1">message</data>
      <data key="d2">Hmmm, did you already get the Jupiter notebooks downloaded onto your computer in a folder? I think that was part of project0 or some set up thug</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1109">
      <data key="d1">message</data>
      <data key="d2">When will the project 2 code be ready to download from GitHub classroom?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1110">
      <data key="d1">message</data>
      <data key="d2">The id/string part is also helpful for project 3 I think so you still want it implemented</data>
      <data key="d3">response</data>
    </node>
    <node id="1111">
      <data key="d1">message</data>
      <data key="d2">Yeah I don’t think it should be taking that long. You’re probably doing unnecessary stuff somewhere or at the wrong time</data>
      <data key="d3">response</data>
    </node>
    <node id="1112">
      <data key="d1">message</data>
      <data key="d2">Did you use this for your datalog parser function?</data>
      <data key="d3">response</data>
    </node>
    <node id="1113">
      <data key="d1">message</data>
      <data key="d2">yeah, it's all the stuff in facts. Just make sure to alphabetize also</data>
      <data key="d3">response</data>
    </node>
    <node id="1114">
      <data key="d1">message</data>
      <data key="d2">It says to do a DFS search starting at A. You can start anywhere, but your forest will look different depending on where you start</data>
      <data key="d3">response</data>
    </node>
    <node id="1115">
      <data key="d1">message</data>
      <data key="d2">I submitted a few days ago and had no issues. Did you make sure to git add first?</data>
      <data key="d3">response</data>
    </node>
    <node id="1116">
      <data key="d1">message</data>
      <data key="d2">All it is is the strings inside the facts. One you have your facts in a list in the datalog class it is easy to grab them</data>
      <data key="d3">response</data>
    </node>
    <node id="1117">
      <data key="d1">message</data>
      <data key="d2">I think some of the first/follow sets might even be on the slides. They're all really small, many have only one item and max is maybe three.</data>
      <data key="d3">response</data>
    </node>
    <node id="1118">
      <data key="d1">message</data>
      <data key="d2">I would look at the example input and output. Look at what’s inside each of the facts and see how that relates to what’s in the domain</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1119">
      <data key="d1">message</data>
      <data key="d2">Let me know if you find one then</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1120">
      <data key="d1">message</data>
      <data key="d2">I see. I will still need my if statements, I just won't need to nest them</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1121">
      <data key="d1">message</data>
      <data key="d2">I heard yes</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1122">
      <data key="d1">message</data>
      <data key="d2">Sorry for the confusion. I thought you were talking about the return string. Yeah, you need the output from project 2. You're going to pass the DatalogProgram object from project2 into your Interpreter object that you create for project3</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1123">
      <data key="d1">message</data>
      <data key="d2">Any tips for optimizing the code so it’s not too slow to pass the auto grader?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1124">
      <data key="d1">message</data>
      <data key="d2">Yeah so test 6 bucket 100 is the one that will tell you if your code is efficient enough. As long as it’s within the time limit mentioned on learning suite you should be good. How long?</data>
      <data key="d3">response</data>
    </node>
    <node id="1125">
      <data key="d1">message</data>
      <data key="d2">Even test 6 bucket 100 goes fast?</data>
      <data key="d3">response</data>
    </node>
    <node id="1126">
      <data key="d1">message</data>
      <data key="d2">Hmmm I think I already do method 2. It’s test 6 in the 100 bucket</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1127">
      <data key="d1">message</data>
      <data key="d2">I think you're on the right track, though I would think you would check if the whole row was in master.rows, rather than row.values</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1128">
      <data key="d1">message</data>
      <data key="d2">How should we implement a tree or forest? Are they all just lists?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1129">
      <data key="d1">message</data>
      <data key="d2">you never need to keep track of preorder in 5. Only postorder</data>
      <data key="d3">response</data>
    </node>
    <node id="1130">
      <data key="d1">message</data>
      <data key="d2">I asked a few classes ago. He said they are online</data>
      <data key="d3">exams</data>
    </node>
    <node id="1131">
      <data key="d1">message</data>
      <data key="d2">No. You submit it on the midterm so they’re definitely not going to provide a key</data>
      <data key="d3">response</data>
    </node>
    <node id="1132">
      <data key="d1">message</data>
      <data key="d2">Is there a specific file type the picture of the homework should be? Is heic ok?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1133">
      <data key="d1">message</data>
      <data key="d2">The goal for problem two is to try to make two different parse trees that ultimately create the same sequence of terminals. Just play around and see if you can get the same thing two ways. It doesn’t matter what that thing is so long as it’s composed of terminals</data>
      <data key="d3">response</data>
    </node>
    <node id="1134">
      <data key="d1">message</data>
      <data key="d2">From my knowledge a directed or an undirected graph can be simple. But (a,b) indicates that it starts at a and ends at b (directed), while {a,b} is like a set which has no order (undirected)</data>
      <data key="d3">response</data>
    </node>
    <node id="1135">
      <data key="d1">message</data>
      <data key="d2">I think what he officially said is that if you attempt the problems you will get credit</data>
      <data key="d3">response</data>
    </node>
    <node id="1136">
      <data key="d1">message</data>
      <data key="d2">I think this same typo still needs to be fixed: It was fixed on question 23 but not in the prompt above everything, it still says "¬(p v q)". And I was wondering why I was able to prove false 🤦‍♂️</data>
      <data key="d3">response</data>
    </node>
    <node id="1137">
      <data key="d1">message</data>
      <data key="d2">Pretty sure it’s left to right. I think right to left applies to only the unary operations (operations that act on only one set)</data>
      <data key="d3">response</data>
    </node>
    <node id="1138">
      <data key="d1">message</data>
      <data key="d2">Yes, here we have two tables/relations, student &amp; whomajor. Yes, each fact adds a row to the table student. Not sure about rules since that’s project 4. A query always returns a new relation/table. If I understand you correctly about the last question, yes, if you specify a specific string for a column then your resulting table will not include that column. It will only include the columns that had variables in them. For example, whomajor(‘Roosevelt’,N) will return a new relation with only the column M (renamed N I think)</data>
      <data key="d3">response</data>
    </node>
    <node id="1139">
      <data key="d1">message</data>
      <data key="d2">I’m not looking at the problem, but I believe you can negate it. Just look at the de morgan for quantifiers</data>
      <data key="d3">response</data>
    </node>
    <node id="1140">
      <data key="d1">message</data>
      <data key="d2">Scroll up a few messages</data>
      <data key="d3">response</data>
    </node>
    <node id="1141">
      <data key="d1">message</data>
      <data key="d2">A join is always possible. If all the columns are the same it is like an intersection, if none are in common it is a cross product, if some are similar then it is somewhere in between</data>
      <data key="d3">homework</data>
    </node>
    <node id="1142">
      <data key="d1">message</data>
      <data key="d2">You mean universal generalization?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1143">
      <data key="d1">message</data>
      <data key="d2">Yeah, the first and follow sets are quite small and fairly straight forward. If you want you can dm your answers and i can compare with mine since I’m fairly confident I have them</data>
      <data key="d3">homework</data>
    </node>
    <node id="1144">
      <data key="d1">message</data>
      <data key="d2">where is it in the grammar? Is it represented by one of the letters?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1145">
      <data key="d1">message</data>
      <data key="d2">I just assumed that the vocab included absolutely everything. For example, from one state I might have two arrows to two differrent states. For one the input might be a specific thing like \n, and the other one might just be "All else", referring to literally any other individual character on a keyword. That was my assumption on what they wanted anyway</data>
      <data key="d3">homework</data>
    </node>
    <node id="1146">
      <data key="d1">message</data>
      <data key="d2">Has anyone gotten this error? I'm thinking it's because there's nothing named Project 0 Works in the folder given but the instructions say to put that in</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1147">
      <data key="d1">message</data>
      <data key="d2">What changes did you make to the project0.py file?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1148">
      <data key="d1">message</data>
      <data key="d2">cool, I figured it out</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1149">
      <data key="d1">message</data>
      <data key="d2">Do we have to download GitHub or is that all in the project 0 instructions?</data>
      <data key="d3">general</data>
    </node>
    <node id="1150">
      <data key="d1">message</data>
      <data key="d2">Does anyone know how I put in the first and follow sets of the grammar we are using?(ie what the sets are for it/how to figure out what they are easily) or if we actually have to manually put them in in the first place? I’ve started trying to put in the first sets for it but am unsure if it is correct or not. I’ve used the notebook example code of the parser as the outline of my parser class.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1151">
      <data key="d1">message</data>
      <data key="d2">Do we need a database class in the project, it is kinda unclear in the specs and slides?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1152">
      <data key="d1">message</data>
      <data key="d2">Does anyone have any advice with getting GitHub for this?I have never used it before so I’m. It quite sure of all the detail of what to do</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1153">
      <data key="d1">message</data>
      <data key="d2">It's in Talmage 1062, but according to the TA schedule, today is help online only until noon</data>
      <data key="d3">response</data>
    </node>
    <node id="1154">
      <data key="d1">message</data>
      <data key="d2">Same.</data>
      <data key="d3">response</data>
    </node>
    <node id="1155">
      <data key="d1">message</data>
      <data key="d2">I keep getting this error when i push to github but my output and the answer files are identical in a difference checker</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1156">
      <data key="d1">message</data>
      <data key="d2">for some reason my datalog program class seems to be taking in my list of schemes (etc) as a list that contains a list. I think I can work with it for now but I am not sure that it is ideal for future projects. Has anyone had a similar thing happen?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1157">
      <data key="d1">message</data>
      <data key="d2">what would be an alternative to this?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1158">
      <data key="d1">message</data>
      <data key="d2">Hello! I've gotten everything working for this project (I got an extension from Professor Goodrich), and ran the tests on my local machine. I committed everything to github, but nothing shows up in the Actions tab. I can't find any more info on this. Have I done something wrong?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1159">
      <data key="d1">message</data>
      <data key="d2">Yeah, I changed the location on my personal computer at one point but using git init synced it up again</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1160">
      <data key="d1">message</data>
      <data key="d2">I would have to see images of what you mean. Also, by pushed to repo, do you mean you did [git add .] -&gt; [git commit -m ‘Name’] -&gt; [git push]?</data>
      <data key="d3">response</data>
    </node>
    <node id="1161">
      <data key="d1">message</data>
      <data key="d2">I pushed my code to my project1 repo but I do not see any actions to autograde. What am I missing? (I already passed all pytests locally)</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1162">
      <data key="d1">message</data>
      <data key="d2">Content -&gt; Lectures: Reading, Topics, Slides -&gt; each class has a reading listed</data>
      <data key="d3">general</data>
    </node>
    <node id="1163">
      <data key="d1">message</data>
      <data key="d2">I believe you're right. I don't think it's a big deal as long as you label the axes</data>
      <data key="d3">response</data>
    </node>
    <node id="1164">
      <data key="d1">message</data>
      <data key="d2">Content -&gt; Lectures: Reading, Topics, Slides -&gt; each class has a reading listed</data>
      <data key="d3">response</data>
    </node>
    <node id="1165">
      <data key="d1">message</data>
      <data key="d2">I have a FSA class for every token except for UNDEFINED and EOF, which I just handle in the lexer. Is this allowed?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1166">
      <data key="d1">message</data>
      <data key="d2">Python thinks its funny to rename some methods without telling you</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1167">
      <data key="d1">message</data>
      <data key="d2">Check pinned messages, the starter code and video are a good start</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1168">
      <data key="d1">message</data>
      <data key="d2">in python, self is included in the parameters of a method, but not used when calling that method</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1169">
      <data key="d1">message</data>
      <data key="d2">I haven't submitted yet but I would imagine your project 1 files need to be in your project 2 repo for the auto grader to work</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1170">
      <data key="d1">message</data>
      <data key="d2">i had my project autograded yesterday but today I pushed some small changes to my code just to add some type hints. Should I run it through the autograder again or am I fine?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1171">
      <data key="d1">message</data>
      <data key="d2">Oh gotcha. I am putting it in my Relation class. Do you think that is a bad call? I am debating between that and the Interpreter class becuase it changes the database</data>
      <data key="d3">response</data>
    </node>
    <node id="1172">
      <data key="d1">message</data>
      <data key="d2">are we allowed to use defaultdict from collections</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1173">
      <data key="d1">message</data>
      <data key="d2">this should help:
https://discord.com/channels/1049410982167974018/1182902947705798708/1182934180431138896</data>
      <data key="d3">response</data>
    </node>
    <node id="1174">
      <data key="d1">message</data>
      <data key="d2">I am having this exact issue</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1175">
      <data key="d1">message</data>
      <data key="d2">LS says the midterm opens the 24th and closes the 27th</data>
      <data key="d3">exams</data>
    </node>
    <node id="1176">
      <data key="d1">message</data>
      <data key="d2">S = E means the starting nonterminal is E</data>
      <data key="d3">exams</data>
    </node>
    <node id="1177">
      <data key="d1">message</data>
      <data key="d2">you can find the follow set for a nonterminal by looking at a production where the nonterminal youre trying to find the follow set for is part of the right hand side of the production (like the production for datalogProgram)
then if you can satisfy ωAtη where A is your nonterminal, ω is the stuff before, and η is the stuff after, then t is part of the follow set</data>
      <data key="d3">homework</data>
    </node>
    <node id="1178">
      <data key="d1">message</data>
      <data key="d2">Same. Does it just want us to add edges like from D to A (Which isn't in the forest because A was already visited)?</data>
      <data key="d3">response</data>
    </node>
    <node id="1179">
      <data key="d1">message</data>
      <data key="d2">but this makes it sound like resolution is a category? idk</data>
      <data key="d3">response</data>
    </node>
    <node id="1180">
      <data key="d1">message</data>
      <data key="d2">I mean Disjuctive Syllogism is just a fancy form of Resolution...</data>
      <data key="d3">response</data>
    </node>
    <node id="1181">
      <data key="d1">message</data>
      <data key="d2">just the one terminal that immediately follows the nonterminal</data>
      <data key="d3">response</data>
    </node>
    <node id="1182">
      <data key="d1">message</data>
      <data key="d2">thanks!</data>
      <data key="d3">homework</data>
    </node>
    <node id="1183">
      <data key="d1">message</data>
      <data key="d2">I am having a similar issue</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1184">
      <data key="d1">message</data>
      <data key="d2">I am having a similar issue</data>
      <data key="d3">response</data>
    </node>
    <node id="1185">
      <data key="d1">message</data>
      <data key="d2">quick question about what the end of the semester will look like, is there a final exam? or is our project the final part of the semester?</data>
      <data key="d3">general</data>
    </node>
    <node id="1186">
      <data key="d1">message</data>
      <data key="d2">you have to go into jetbrains and submit for a student license</data>
      <data key="d3">response</data>
    </node>
    <node id="1187">
      <data key="d1">message</data>
      <data key="d2">is the final going to be online during finals week?</data>
      <data key="d3">general</data>
    </node>
    <node id="1188">
      <data key="d1">message</data>
      <data key="d2">if someone could help me please my test cases are misbehaving</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1189">
      <data key="d1">message</data>
      <data key="d2">is my bucket 80 answer guide correct for input0? mine says 

SK(D,C)? Yes(1)
  D='a', C='a'
SK(A,'c')? No

but my command line is returning this as the correct answer

- SK(A,'c')? Yes(2)
  -   A='a'
  -   A='b'
  - SK('b','c')? Yes(1)
  - SK('c','c')? No
  - SK(A,B)? Yes(4)
  -   A='a', B='a'
  -   A='a', B='b'
  -   A='a', B='c'
  -   A='b', B='c'
  - SK(D,C)? Yes(4)
  ?              ^
  + SK(D,C)? Yes(1)
  ?              ^
      D='a', C='a'
  + SK(A,'c')? No
  -   D='a', C='b'
  -   D='a', C='c'
  -   D='b', C='c'
  - SK(A,'c')? Yes(2)
  -   A='a'
  -   A='b'</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1190">
      <data key="d1">message</data>
      <data key="d2">sorry haha</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1191">
      <data key="d1">message</data>
      <data key="d2">alright, I'm gonna be that guy. Where can I find the practice exam for the final? 😂</data>
      <data key="d3">exams</data>
    </node>
    <node id="1192">
      <data key="d1">message</data>
      <data key="d2">I think some symbols or something is missing from the instructions...</data>
      <data key="d3">homework</data>
    </node>
    <node id="1193">
      <data key="d1">message</data>
      <data key="d2">Will class today be in the McKay building?</data>
      <data key="d3">general</data>
    </node>
    <node id="1194">
      <data key="d1">message</data>
      <data key="d2">TMCB basement room 1062</data>
      <data key="d3">response</data>
    </node>
    <node id="1195">
      <data key="d1">message</data>
      <data key="d2">Thanks!</data>
      <data key="d3">general</data>
    </node>
    <node id="1196">
      <data key="d1">message</data>
      <data key="d2">Did you get this resolved? I'm having the same problem. Alternative general question: is it fine to just download the starter code as a .zip instead of cloning it via the terminal?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1197">
      <data key="d1">message</data>
      <data key="d2">Did you get this resolved? I'm having the same problem. Alternative general question: is it fine to just download the starter code as a .zip instead of cloning it via the terminal?</data>
      <data key="d3">response</data>
    </node>
    <node id="1198">
      <data key="d1">message</data>
      <data key="d2">How do you differentiate something like Ruless (an ID) from Rules: (a keyword and a colon)?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1199">
      <data key="d1">message</data>
      <data key="d2">That worked! Thanks</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1200">
      <data key="d1">message</data>
      <data key="d2">I got it. It's alphabetical. Thanks!</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1201">
      <data key="d1">message</data>
      <data key="d2">I got it. It's alphabetical. Thanks!</data>
      <data key="d3">response</data>
    </node>
    <node id="1202">
      <data key="d1">message</data>
      <data key="d2">Is the autograder up yet? I've pushed to Github but it says there are no workflows</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1203">
      <data key="d1">message</data>
      <data key="d2">I think so. I did git add, then git commit -m then git push</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1204">
      <data key="d1">message</data>
      <data key="d2">In the TA lab</data>
      <data key="d3">response</data>
    </node>
    <node id="1205">
      <data key="d1">message</data>
      <data key="d2">I thought this was in the room where class normally is but I guess not. Where are the help sessions?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1206">
      <data key="d1">message</data>
      <data key="d2">Do we just ignore preorder in project 5a? I.e. the first thing popped from the stack will have postorder 1, not more than one?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1207">
      <data key="d1">message</data>
      <data key="d2">I'm also confused about the structure of the project.  What are lexer.run() and lexer.lex() supposed to do?  Also how are we supposed to keep track of how much input we have read?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1208">
      <data key="d1">message</data>
      <data key="d2">Mine just returns a string containing the type, value, and line number formatted to look like the output from the examples.  It's only like 1 line.  Then you can call print(token.to_string()) to print any token</data>
      <data key="d3">response</data>
    </node>
    <node id="1209">
      <data key="d1">message</data>
      <data key="d2">Figured it out, it was because my files somehow got moved around.  If anyone else has this issue make sure all the files for pytest are in the project1 directory, they got moved into my classes directory somehow</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1210">
      <data key="d1">message</data>
      <data key="d2">So I thought I did everything the exact same as the TA video, but no matter what I feed in as the token list it outputs success?  Anybody else run into this before?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1211">
      <data key="d1">message</data>
      <data key="d2">Do I need to modify my project 2 code to output something specific?  I didn't see anything about that on the lab spec</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1212">
      <data key="d1">message</data>
      <data key="d2">I'm confused on how to get the rule output right for the rules, because apprently the output is different than for the queries.  Do I need to create a separate evaluate predicate function just for rules?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1213">
      <data key="d1">message</data>
      <data key="d2">My program is finding SCC's now, how did you guys make the rules get evaluated in the right order?  I'm guessing I should change the interpret_rules() function since it currently just loops through every rule.  Just wondering how other people approached it before I start it.</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1214">
      <data key="d1">message</data>
      <data key="d2">For hw 4 question 3 is it ok if we define our own sets?  For example can I say A is the set of all possible inputs, or T is the set of all tokens?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1215">
      <data key="d1">message</data>
      <data key="d2">This is what I did as well, the format kind of makes it seem like they are terminals as well since they are lowercase</data>
      <data key="d3">response</data>
    </node>
    <node id="1216">
      <data key="d1">message</data>
      <data key="d2">I'm pretty sure you do so that it exactly matches the format in the instructions</data>
      <data key="d3">homework</data>
    </node>
    <node id="1217">
      <data key="d1">message</data>
      <data key="d2">Just to make sure I'm not missing something. For the projects, we don't submit anything on learning suite. We just push our changes until the checks are passed?</data>
      <data key="d3">general</data>
    </node>
    <node id="1218">
      <data key="d1">message</data>
      <data key="d2">how did you determine a token was :- and not : ?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1219">
      <data key="d1">message</data>
      <data key="d2">how did you determine a token was :- and not : ?</data>
      <data key="d3">response</data>
    </node>
    <node id="1220">
      <data key="d1">message</data>
      <data key="d2">Is this a a typo in the project diagram? Charlie appears to be a string (that is missing a closing ') but doesn't have '' around it in the diagram.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1221">
      <data key="d1">message</data>
      <data key="d2">https://tenor.com/view/hello-there-hi-there-greetings-gif-9442662</data>
      <data key="d3">random</data>
    </node>
    <node id="1222">
      <data key="d1">message</data>
      <data key="d2">Hackathon questions</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1223">
      <data key="d1">message</data>
      <data key="d2">What exactly goes on during said hackathon?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1224">
      <data key="d1">message</data>
      <data key="d2">It works fine for me ¯\_(ツ)_/¯</data>
      <data key="d3">general</data>
    </node>
    <node id="1225">
      <data key="d1">message</data>
      <data key="d2">No problem!</data>
      <data key="d3">general</data>
    </node>
    <node id="1226">
      <data key="d1">message</data>
      <data key="d2">I'm having the same issue. My output matches the expected answer perfectly but I still fail the test with this message</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1227">
      <data key="d1">message</data>
      <data key="d2">The output of the interpreter as a string. An example from the project info page:
SK(X,'c')? Yes(2)
  X='a'
  X='b'
SK('b','c')? Yes(1)
SK(X,X)? Yes(1)
  X='b'
SK(X,Y)? Yes(3)
  X='a', Y='c'
  X='b', Y='b'
  X='b', Y='c'
SK('c','c')? No</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1228">
      <data key="d1">message</data>
      <data key="d2">Since running running a DFS and retrieving the postorder from it requires a stack, I found recursion was the easiest way to go about it. It's relatively straightforward to do with recursion, you just call the DFS function again for every non-visited node adjacent to the current node and make sure everything is marked as visited accordingly.</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1229">
      <data key="d1">message</data>
      <data key="d2">Like it says, the square root of a positive n is both n **and** -n. x^(1/2) is the same thing as sqrt(x). This means that if x is 4, f(x) is equal to 2 **and** -2. Functions can map an input only to a single output, and this equation violates that by mapping every input to both a positive and negative output.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1230">
      <data key="d1">message</data>
      <data key="d2">The video tutorial project 0 shows how to do it right at 18:10. After you do that you follow the instructions on Project Passoff Instructions and it should work!</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1231">
      <data key="d1">message</data>
      <data key="d2">The video tutorial project 0 shows how to do it right at 18:10. After you do that you follow the instructions on Project Passoff Instructions and it should work!</data>
      <data key="d3">response</data>
    </node>
    <node id="1232">
      <data key="d1">message</data>
      <data key="d2">What's the best way to contact Professor Goodrich?</data>
      <data key="d3">general</data>
    </node>
    <node id="1233">
      <data key="d1">message</data>
      <data key="d2">Should the fsas be case sensitive?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1234">
      <data key="d1">message</data>
      <data key="d2">So it needs to be Rules with one capital letter, and nothing else is accepted?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1235">
      <data key="d1">message</data>
      <data key="d2">How do we submit this lab? There aren't any guthib actions for it</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1236">
      <data key="d1">message</data>
      <data key="d2">Ight, I'll look at those later. Like your profile pic</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1237">
      <data key="d1">message</data>
      <data key="d2">I would like to second this question</data>
      <data key="d3">response</data>
    </node>
    <node id="1238">
      <data key="d1">message</data>
      <data key="d2">Hw 5 question 2 has 

T-&gt; x|xy|xyz

But none of those are part of the vocabulary nor the set of terminals. Is it supposed to be 

T-&gt;a|ab|abc

or am I misunderstanding something entirely?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1239">
      <data key="d1">message</data>
      <data key="d2">If anyone else is having issues with windows python installation, my command for version 3.11.5 was 

py --version

Idk why, but the command was different from what the video said.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1240">
      <data key="d1">message</data>
      <data key="d2">general kenobi</data>
      <data key="d3">general</data>
    </node>
    <node id="1241">
      <data key="d1">message</data>
      <data key="d2">How do we compute the domain section of the output? I've looked at it and I can't tell what it's doing or how we output it at all</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1242">
      <data key="d1">message</data>
      <data key="d2">I have everything else set up, with my lists of schemes, facts, rules, and queries. I understand that a rule is some sort of function, that does some sort of matching outputs. each query calls a rule, and then checks through all of the facts for the matching data. or something along those lines. I don't understand how to parse a specific rule, and figure out what it would output, and everything like that.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1243">
      <data key="d1">message</data>
      <data key="d2">how are we supposed to identify sccs for 5b?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1244">
      <data key="d1">message</data>
      <data key="d2">does anyone understand what we're supposed to do for filling out the table in problem 5 of the practice exam? i'm very confused about how it's supposed to look</data>
      <data key="d3">exams</data>
    </node>
    <node id="1245">
      <data key="d1">message</data>
      <data key="d2">I dont think so, it just says whatever grade is in github classroom</data>
      <data key="d3">response</data>
    </node>
    <node id="1246">
      <data key="d1">message</data>
      <data key="d2">once we submit on github, do we have to do anything on learning suite?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1247">
      <data key="d1">message</data>
      <data key="d2">I'm getting the error 'function' object has no attribute 'scheme' for the code:
 self.dagalog_program.scheme.name
Did anyone else get something like this or know how to fix it?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1248">
      <data key="d1">message</data>
      <data key="d2">Can't be certain, but check if you're accidentally calling any functions without ending the call in parenthesis
Like maybe you put ".to_string" instead of ".to_string()"</data>
      <data key="d3">response</data>
    </node>
    <node id="1249">
      <data key="d1">message</data>
      <data key="d2">Does anyone know if they want us to write comments to explain our code? I don't see that in the style guide</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1250">
      <data key="d1">message</data>
      <data key="d2">Here is the command to run the local tests
pytest test.py --bucket 100</data>
      <data key="d3">response</data>
    </node>
    <node id="1251">
      <data key="d1">message</data>
      <data key="d2">I really don't think that's necessary.</data>
      <data key="d3">response</data>
    </node>
    <node id="1252">
      <data key="d1">message</data>
      <data key="d2">Does anyone know the command to run the tests locally?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1253">
      <data key="d1">message</data>
      <data key="d2">Is anyone getting a problem where if you run each case manually it will work just fine but if you run everything at the same time with the autograder it doesn't work right?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1254">
      <data key="d1">message</data>
      <data key="d2">I'm kind of confused here. Are the values circled in yellow the x values or the ones circled in blue?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1255">
      <data key="d1">message</data>
      <data key="d2">Protip: Dont wear Yankees gear to class</data>
      <data key="d3">random</data>
    </node>
    <node id="1256">
      <data key="d1">message</data>
      <data key="d2">I think there's a few threads in the Project 0 channel that can help</data>
      <data key="d3">general</data>
    </node>
    <node id="1257">
      <data key="d1">message</data>
      <data key="d2">On learning suite in one of the first announcements</data>
      <data key="d3">response</data>
    </node>
    <node id="1258">
      <data key="d1">message</data>
      <data key="d2">You shouldn't need to. Have your lexer function use the FSAs and generate tokens</data>
      <data key="d3">response</data>
    </node>
    <node id="1259">
      <data key="d1">message</data>
      <data key="d2">&lt;@1149063022376132748&gt;  Is this for the token class's method to_string?</data>
      <data key="d3">general</data>
    </node>
    <node id="1260">
      <data key="d1">message</data>
      <data key="d2">Did you join the GitHub classroom with your netid?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1261">
      <data key="d1">message</data>
      <data key="d2">When I showed that to a TA this morning, they said yes and that if it wasn't enough, they do have a record we passed the tests by the due date (using the commit's date)</data>
      <data key="d3">response</data>
    </node>
    <node id="1262">
      <data key="d1">message</data>
      <data key="d2">is this on Github?</data>
      <data key="d3">response</data>
    </node>
    <node id="1263">
      <data key="d1">message</data>
      <data key="d2">I just talked with someone and ended up fixing the issue, I had to replace 

from fsa import FSA

with

from project1_classes.fsa_classes.fsa import FSA
within my colon_dash_fsa.py</data>
      <data key="d3">response</data>
    </node>
    <node id="1264">
      <data key="d1">message</data>
      <data key="d2">Project1 should be returning a string, that's made up of the tokens you got from the lexer. I set it up so the final lines of lexer just takes the tokens list, and puts them in a string, then I return that</data>
      <data key="d3">response</data>
    </node>
    <node id="1265">
      <data key="d1">message</data>
      <data key="d2">You can copy and paste from there. It'll give you starter code for the colon dash fsa that you can use as a basis for the other FSAs</data>
      <data key="d3">response</data>
    </node>
    <node id="1266">
      <data key="d1">message</data>
      <data key="d2">Did you join the GitHub classroom with your netid?</data>
      <data key="d3">response</data>
    </node>
    <node id="1267">
      <data key="d1">message</data>
      <data key="d2">I’m not sure if I understand your question. Are you asking if it’s okay that you added a \n to a test file?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1268">
      <data key="d1">message</data>
      <data key="d2">What file are you running?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1269">
      <data key="d1">message</data>
      <data key="d2">What’s the output on pytest? I ended up having one extra beeline at the beginning of my output that the pytest didn’t show clearly</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1270">
      <data key="d1">message</data>
      <data key="d2">The auto grader uses pytest, so that will be a slight snag. What command are you using to run pytest?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1271">
      <data key="d1">message</data>
      <data key="d2">You don’t run the test.py file from VSC. Run this command to use it</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1272">
      <data key="d1">message</data>
      <data key="d2">I think this one is from ColonDash's s0 specifically</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1273">
      <data key="d1">message</data>
      <data key="d2">I had each FSA count the number of characters they read before reaching a success state, then used a function to snag that number</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1274">
      <data key="d1">message</data>
      <data key="d2">If you set up Project1.py to run, then the imports won't have the right path if you try to run something like the Lexer.py individually</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1275">
      <data key="d1">message</data>
      <data key="d2">I had this issue for about an hour. Mine ended up being that my project output had a \n before outputting but it's pretty frustrating to troubleshoot</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1276">
      <data key="d1">message</data>
      <data key="d2">I had a check in the while loop of my lexer run function, a check in the string fsa, and a check in the comment fsa since those are the only places you can hit a newline</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1277">
      <data key="d1">message</data>
      <data key="d2">I used a variable inside FSA that counted the length of the token and reset it each time through my for loop. Here's the function I used to grab it

    def get_num_read(self) -&gt; int:
        return self.num_chars_read</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1278">
      <data key="d1">message</data>
      <data key="d2">The original picture is the output of the terminal when I run pytest</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1279">
      <data key="d1">message</data>
      <data key="d2">The reason you're getting that error is that git doesn't know you want that folder to be a repository. It's fairly easy to turn your folder into one, but I don't know if that will mess up the Github classroom thing or not. Have you finished the project?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1280">
      <data key="d1">message</data>
      <data key="d2">Yes, you'll need to make an FSA function for Schema and all the rest. You can have them in separate files or in one big file.

Because the projects are new to Python the documentation I've read wasn't super helpful. Watching the Project 1 Help video helped a ton as well as going through the jupypter notebooks tutorials (there's multiple for project 1), and lastly, talking with the TAs for the purpose of functions. Those resources are in Content -&gt; Projects Fall 2023 -&gt; Project 1  -&gt; Description and Specifications on Learning Suite.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1281">
      <data key="d1">message</data>
      <data key="d2">The starter code didn't come with a token.py file?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1282">
      <data key="d1">message</data>
      <data key="d2">Try Content -&gt; Projects Fall 2023 -&gt; Project 1  -&gt; Description and Specifications</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1283">
      <data key="d1">message</data>
      <data key="d2">What imports do you have at the top of the project-1 file?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1284">
      <data key="d1">message</data>
      <data key="d2">Review or overview?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1285">
      <data key="d1">message</data>
      <data key="d2">Have you accepted the assignment in the GitHub classroom?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1286">
      <data key="d1">message</data>
      <data key="d2">What do you mean?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1287">
      <data key="d1">message</data>
      <data key="d2">I think the follow set for schemeList is just FACTS. I’m not sure if I can find a production where you can get ID</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1288">
      <data key="d1">message</data>
      <data key="d2">I actually just wrote an entire blog post about Python post comprehension but I couldn’t think of a use case recently so I’m glad I can actually use one on this project.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1289">
      <data key="d1">message</data>
      <data key="d2">Ah, in that case, probably</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1290">
      <data key="d1">message</data>
      <data key="d2">I'm working on "project" (the operator) using &lt;Person&gt;'s starter code and he notes in a comment that projecting an empty list `project([])` should have 1 row with a length of 0. Why is that? As far as I can tell, there would be no header (because there are no columns). I think I can get my code to create an empty header and empty row but I don't see why the operation is legal</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1291">
      <data key="d1">message</data>
      <data key="d2">when I do that, it says pytest is not the name of a cmdlet, function, etc</data>
      <data key="d3">response</data>
    </node>
    <node id="1292">
      <data key="d1">message</data>
      <data key="d2">Thinking about project 4 with a natrual join of the body predicate of a Rule, you will join the first 2, R |X| S, then |X|T</data>
      <data key="d3">response</data>
    </node>
    <node id="1293">
      <data key="d1">message</data>
      <data key="d2">In your project() function you should create a new relation with only the headers specified and the parts of those rows that correspond with the headers. I’m guessing you’re changing the rows but not the header</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1294">
      <data key="d1">message</data>
      <data key="d2">To use sorted() you’ll need to  change the \_\_eq\_\_, \_\_lt\_\_, and \_\_hash\_\_ methods for your  Relation class</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1295">
      <data key="d1">message</data>
      <data key="d2">I'm not super familiar with windows, sorry. It looks like you're running this command in a separate console window from VS Code, is that right? What happens if you run it in a terminal inside VSC?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1296">
      <data key="d1">message</data>
      <data key="d2">How are you looking through your database class? You'll probably want to be using something like
`for relation in self.database:`
It's been a little while since I've worked with dictionaries, but I think it will loop through each key and if you want to access what's at that key you'll need to use `self.database[relation]` rather than a number. Or is that what you're doing and that's what's not subscriptable?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1297">
      <data key="d1">message</data>
      <data key="d2">It looks like you’re trying to create an empty datalog object without giving it the necessary parameters. I can check my code tomorrow morning for how I initialize mine if no one else answers before then</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1298">
      <data key="d1">message</data>
      <data key="d2">And a command-f for "tabulate" shows nothing?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1299">
      <data key="d1">message</data>
      <data key="d2">It makes sense you could have those edge case tuples, but I’m a little lost on what could create them. Could you give another example? (Specifically how project() could make one)</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1300">
      <data key="d1">message</data>
      <data key="d2">I think everything needs to be under 150 seconds, so 2.5 minutes</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1301">
      <data key="d1">message</data>
      <data key="d2">Well thats confusing&lt;:caveman:1151651165306617916&gt;

not your explanation I just wonder why it is not left to right like regular algebra haha</data>
      <data key="d3">response</data>
    </node>
    <node id="1302">
      <data key="d1">message</data>
      <data key="d2">https://discord.com/channels/1049410982167974018/1146859360069357678/1178811578569728181</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1303">
      <data key="d1">message</data>
      <data key="d2">Are your relations stored in a set?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1304">
      <data key="d1">message</data>
      <data key="d2">Oh, you mean the row order? That's kinda odd. Did you change something in between when you ran those?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1305">
      <data key="d1">message</data>
      <data key="d2">I think the Rule Class is made up of a name, HeadPredicate (the predicate you'll be adding tuples to), and BodyPredicates (The right hand side of the rule)</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1306">
      <data key="d1">message</data>
      <data key="d2">I had the same issue where it was only checking if the last one hadn’t been changed. You should keep rerunning everything until none of the relations change</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1307">
      <data key="d1">message</data>
      <data key="d2">I think you can do it wherever as long as it gets done. I did it in evaluate rules because that made sense to me, but doing it in interpret rules would work just fine as far as the code is concerned</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1308">
      <data key="d1">message</data>
      <data key="d2">Did you get it figured out? I have the same issue (struggling with trivial scc)</data>
      <data key="d3">response</data>
    </node>
    <node id="1309">
      <data key="d1">message</data>
      <data key="d2">Did you get it figured out? I have the same issue (struggling with trivial scc)</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1310">
      <data key="d1">message</data>
      <data key="d2">Are you printing the output instead of returning a string?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1311">
      <data key="d1">message</data>
      <data key="d2">Similar to &lt;studeng&gt;, it looks like my exam is one that had a learning suite issue (I think it's because I copied and pasted some of the symbols from the given grammar). I can send a picture of my answer as well</data>
      <data key="d3">exams</data>
    </node>
    <node id="1312">
      <data key="d1">message</data>
      <data key="d2">I think Prof Goodrich gave the example of evaluating `G(F(x))` you'd evaluate `F(x)` first and it's on the right hand side</data>
      <data key="d3">exams</data>
    </node>
    <node id="1313">
      <data key="d1">message</data>
      <data key="d2">I also got that</data>
      <data key="d3">exams</data>
    </node>
    <node id="1314">
      <data key="d1">message</data>
      <data key="d2">The first one is `&lt;-` (basically `=` in python, it's the assignment operator), the second is `^`</data>
      <data key="d3">exams</data>
    </node>
    <node id="1315">
      <data key="d1">message</data>
      <data key="d2">There’s a discussion about that up here https://discord.com/channels/1049410982167974018/1146859570438865056/1186368814393348148</data>
      <data key="d3">exams</data>
    </node>
    <node id="1316">
      <data key="d1">message</data>
      <data key="d2">I think you do because you just treat it as any other symbol</data>
      <data key="d3">homework</data>
    </node>
    <node id="1317">
      <data key="d1">message</data>
      <data key="d2">If I’m reading the specifications right, I think the string would be. I added one transition that solves this problem relatively easily the way I set up the FSA

‘’’Tis the season’
Opening and closing, and two apostrophes next to each other to signify an apostrophe in the string itself</data>
      <data key="d3">response</data>
    </node>
    <node id="1318">
      <data key="d1">message</data>
      <data key="d2">For questions 1 and 2 I don't know where to start unless we assume P and Q are True since I don't have anything to set equivalent.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1319">
      <data key="d1">message</data>
      <data key="d2">That's what I got, yeah</data>
      <data key="d3">homework</data>
    </node>
    <node id="1320">
      <data key="d1">message</data>
      <data key="d2">I'm hoping jepg is also acceptable?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1321">
      <data key="d1">message</data>
      <data key="d2">Yes? I haven’t finished myself so I may not be the best authority</data>
      <data key="d3">homework</data>
    </node>
    <node id="1322">
      <data key="d1">message</data>
      <data key="d2">Have you run both of those git config commands in the terminal?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1323">
      <data key="d1">message</data>
      <data key="d2">If anyone wants to compare practice final answers, feel free to dm me</data>
      <data key="d3">general</data>
    </node>
    <node id="1324">
      <data key="d1">message</data>
      <data key="d2">Has anyone had any problems with pytest? I've passed the 80 tests, and I went to do the 100 tests, but it seems like it gets caught in a loop. I've manually ran my code with every input in the 100 file and there aren't any infinite loops, but pytest keeps getting hung up</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1325">
      <data key="d1">message</data>
      <data key="d2">DAGs don't have self loops, right?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1326">
      <data key="d1">message</data>
      <data key="d2">Is our practice exam part of the grade we get</data>
      <data key="d3">exams</data>
    </node>
    <node id="1327">
      <data key="d1">message</data>
      <data key="d2">If anyone wants to compare practice final answers, feel free to dm me</data>
      <data key="d3">homework</data>
    </node>
    <node id="1328">
      <data key="d1">message</data>
      <data key="d2">I can compare answers with you a little after two</data>
      <data key="d3">response</data>
    </node>
    <node id="1329">
      <data key="d1">message</data>
      <data key="d2">Are any TAs in today in between conference sessions on zoom?</data>
      <data key="d3">general</data>
    </node>
    <node id="1330">
      <data key="d1">message</data>
      <data key="d2">Awesome!</data>
      <data key="d3">general</data>
    </node>
    <node id="1331">
      <data key="d1">message</data>
      <data key="d2">At the Talmage? Yeah that works</data>
      <data key="d3">general</data>
    </node>
    <node id="1332">
      <data key="d1">message</data>
      <data key="d2">Should all of our FSA classes (i.e. ColonDashFSA) inherit from the Token class?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1333">
      <data key="d1">message</data>
      <data key="d2">on line 16</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1334">
      <data key="d1">message</data>
      <data key="d2">THANK YOU</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1335">
      <data key="d1">message</data>
      <data key="d2">heres the error</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1336">
      <data key="d1">message</data>
      <data key="d2">Thank you</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1337">
      <data key="d1">message</data>
      <data key="d2">Hey guys! I am having trouble conceptualizing how to make our schemeList(), factList(), ruleList(), and queryList() go to lambda instead of adding on to that list. I don't know what to check.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1338">
      <data key="d1">message</data>
      <data key="d2">How are you having them add into the list? Can you post a short snippet of code?</data>
      <data key="d3">response</data>
    </node>
    <node id="1339">
      <data key="d1">message</data>
      <data key="d2">Hey guys. In the specs it talks about making out own database class. Could we just use a dictionary like the self.database in the TA code? Also, if we use that dictionary, I know the value is the relation, but should the key be the relation name or a hash code? If not the has, then when do we use the hash we did with dunder? Sorry that is a loaded question.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1340">
      <data key="d1">message</data>
      <data key="d2">Yeah you are right. Also, I am having trouble removing rows, becuase the row size is not as big as the header size. Any tips for that? This error is occuring in my project method</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1341">
      <data key="d1">message</data>
      <data key="d2">Hey guys. I went through the prep video and I am getting this weird thing where every time I print out the table that was formed in the join, the order is different. Does anyone know what causes that?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1342">
      <data key="d1">message</data>
      <data key="d2">Thank you!</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1343">
      <data key="d1">message</data>
      <data key="d2">Orion coming in clutch again!</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1344">
      <data key="d1">message</data>
      <data key="d2">Thanks &lt;Person&gt;, I will look into that! I'm guessing it would be a good idea to utilize that in the union function right?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1345">
      <data key="d1">message</data>
      <data key="d2">Let's go! Okay I think I know how to fix that.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1346">
      <data key="d1">message</data>
      <data key="d2">Thanks &lt;Person&gt;! They are all looking the exact same so far one by one, but I will keep looking</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1347">
      <data key="d1">message</data>
      <data key="d2">Should DFS and SCC both be lists of lists?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1348">
      <data key="d1">message</data>
      <data key="d2">Does anyone want to get a group together to study for the Exam on Monday?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1349">
      <data key="d1">message</data>
      <data key="d2">It could be rename before select depneds on the older it asks, like  Select B&lt;0 Rename C &lt;--B of R</data>
      <data key="d3">response</data>
    </node>
    <node id="1350">
      <data key="d1">message</data>
      <data key="d2">Sweet. I got a library group study room reserved from 2pm to 6pm. There is a small group of people who dm'd me and we will be studying then. You guys are welcome to join us. I am also down down to study with yall in the morning too if that doesn't work.</data>
      <data key="d3">exams</data>
    </node>
    <node id="1351">
      <data key="d1">message</data>
      <data key="d2">Chat GPT says left to right</data>
      <data key="d3">exams</data>
    </node>
    <node id="1352">
      <data key="d1">message</data>
      <data key="d2">Okay yeah becuase  R x S and then joined by T has no common things right?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1353">
      <data key="d1">message</data>
      <data key="d2">Check for new line</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1354">
      <data key="d1">message</data>
      <data key="d2">I think this was addressed in the Jupyter tutorial, you need to call:
self._FSA__get_current_input()
Something about it being an inherited method causes this problem, and I forgot about that when we talked yesterday</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1355">
      <data key="d1">message</data>
      <data key="d2">I’ll second &lt;Person&gt;’s comment, I can’t see any other reasonable way to handle undefined tokens. idk if this is the issue you’re running into, but I had a lot of seemingly inexplicable problems with valid symbols or keywords creating undefined tokens because I wasn’t resetting my FSAs after every time they ran. Thought I’d mention it since it took me forever to figure out.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1356">
      <data key="d1">message</data>
      <data key="d2">The command you need is python -m pytest test.py -v --tb=short --bucket=20
(You can also find this in part 3 h of the project 0 walkthrough, replace 20 with whatever bucket you want)
If you want to see your full output for a particular test case you can edit the file path on line 15 of project1.py and then run that file.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1357">
      <data key="d1">message</data>
      <data key="d2">A new line is indicated with the character ‘\n’ , which the FSAs will read the same as any other character. You could also use the string method .split() to split the input by lines and lex one line at a time</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1358">
      <data key="d1">message</data>
      <data key="d2">parse_datalog function</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1359">
      <data key="d1">message</data>
      <data key="d2">I think you must be using self incorrectly. Self always represents the class that the method belongs to. To iterate over the list of parameters inside a predicate you would do something like 
for param in self.parameters_list:
    param.to_string()</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1360">
      <data key="d1">message</data>
      <data key="d2">If I had to guess, you may have accidentally created a tuple containing your parameter object. Something like this:
new_param = (Parameter(…) ,)
would create a single element tuple, so the line 
new_param.to_string()
would give the error you described</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1361">
      <data key="d1">message</data>
      <data key="d2">I’d have to see the exact error to give any specific advice. One thought I had was to make sure you’re actually returning the token list, and not the output string from project 1.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1362">
      <data key="d1">message</data>
      <data key="d2">The run method returns a Boolean, indicating whether the parser succeeded or failed. I would recommend writing a to_string() method for the parser that returns the string used for the output of project 2.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1363">
      <data key="d1">message</data>
      <data key="d2">I suppose you could do either. Personally, I kept all of the parsing functions inside the Parser class, and only used the other classes as a structure for storing the rel&lt;Person&gt;t data.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1364">
      <data key="d1">message</data>
      <data key="d2">Difference between selects</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1365">
      <data key="d1">message</data>
      <data key="d2">See pinned messages in this channel</data>
      <data key="d3">response</data>
    </node>
    <node id="1366">
      <data key="d1">message</data>
      <data key="d2">I’m guessing that you’re printing the output instead of returning it as a string</data>
      <data key="d3">response</data>
    </node>
    <node id="1367">
      <data key="d1">message</data>
      <data key="d2">When projecting to an empty list, any rows that previously existed in the relation should still exist, they would just become empty rows. That way you can still determine if the query succeeded or not based on the number of rows in the relation.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1368">
      <data key="d1">message</data>
      <data key="d2">Inside of project3.py there should be an if statement that looks something like this (I've copied this from project 4 but it should be basically the same):
```# Use this to run and debug code within VS
if __name__ == "__main__":
    input_contents = read_file_contents("./project4-passoff/80/input0.txt")
    print(project4(input_contents))```
To run your code on an input file, change the string in the read_file_contents function to the file path for the input file you want (you should be able to copy the format I've used here), then run project3.py</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1369">
      <data key="d1">message</data>
      <data key="d2">Which query are you getting extras on? I’m guessing it’s either the 3rd or the last, because all of the others return every single row from their respective relations.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1370">
      <data key="d1">message</data>
      <data key="d2">Do you mean removing columns? The project method should never be removing rows.
I don't really have anything to say besides the obvious, the row length should never be different from header length. I'd recommend using some print statements or breakpoints to determine whether that discrepancy is happening before calling project or during project.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1371">
      <data key="d1">message</data>
      <data key="d2">I think colIndex is short for ‘column index’. 

The first select method, shown here, is for selecting rows where a particular column holds the given value. This is used for matching constants in queries.

The second select method is for selecting rows where two given columns hold the same value. This is used for matching duplicate variables in queries.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1372">
      <data key="d1">message</data>
      <data key="d2">I'm guessing there's a problem with how you are initializing the datalog_program object
You must be giving it a string instead of a Schemes object when constructing it</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1373">
      <data key="d1">message</data>
      <data key="d2">Pay close attention to the names of the schemes/queries. The first query is for DeaUoo, and there are only 3 facts that match that name exactly.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1374">
      <data key="d1">message</data>
      <data key="d2">someone else solved this issue by using the command
```python -m pytest test.py -v -vv --bucket=80```</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1375">
      <data key="d1">message</data>
      <data key="d2">In project 2 your Parameter class should have had a member variable is_id (or is_string). Strings in queries are constants, while IDs are variables.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1376">
      <data key="d1">message</data>
      <data key="d2">I can tell you what the error means. 
read_file_contents(answer_file) is returning None
I have no clue why that is happening, I can’t find any way that would even be possible. You haven’t edited test.py or any of the answer files, right?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1377">
      <data key="d1">message</data>
      <data key="d2">You should only need 2 loops, mine looks something like this (my actual code is way messier, so this is a bit of an oversimplification):
```for tuple in tuples_set:
  for i in range(tuple.get_len()):
    output += self.header.get_val(i)
    output += '='
    output += tuple.get_val(i)
    output += ', ' 
  output += '\n' ```</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1378">
      <data key="d1">message</data>
      <data key="d2">In case either of you are still confused by this, I can try to explain. The database class wasn’t iterable in &lt;Person&gt;’s original code because the Database is NOT a dictionary, it is a class that contains a dictionary. You need to either define a specific function like &lt;Person&gt; did that tells Python how to iterate over the Database class, or get the dictionary out of the database object and then iterate over the actual dictionary itself.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1379">
      <data key="d1">message</data>
      <data key="d2">I did a similar thing with an assert statement. I don’t think you need to, but it can be helpful for debugging and shouldn’t cause any issues with the test cases</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1380">
      <data key="d1">message</data>
      <data key="d2">By how do you mean how to implement the rename function, or how to use rename to evaluate queries?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1381">
      <data key="d1">message</data>
      <data key="d2">One of the selects chooses rows (tuples) that have a specific value at a specific index in the row. This is used for selecting rows in a relation that match constants in a query.

The other select chooses rows that have equal values at 2 specific indexes. This is used when a query contains multiple of the same variable to select rows that have the same value at both positions of that variable in the query.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1382">
      <data key="d1">message</data>
      <data key="d2">I would like to share with everyone that you can type hint inside a class to itself by putting this as the first line in the file:
```from __future__ import annotations```
If you don't know what that means, here's my brief explanation. As some of you may have discovered in project 3, Python doesn't like it when you indicate that the return type of a class method is the type of the enclosing class. For example, select, project, and rename are functions inside the Relation class that return Relation objects, but Python doesn't normally recognize -&gt;Relation as a valid type hint inside of the Relation class definition. You can get around this by replacing the type hint with a string of the name of the type (eg. -&gt;'Relation'), or you can just include the import statement from above.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1383">
      <data key="d1">message</data>
      <data key="d2">Personally, I stored the tuples in a set, which I used to construct a Relation. Then I could use the Relation's to_string method to output the tuples with the correct formatting later.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1384">
      <data key="d1">message</data>
      <data key="d2">You are correct, the projection step ensures that the number of columns matches in the joined relation matches the target relation, and that those columns are in the correct order. If you've followed the steps this situation should never cause a problem.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1385">
      <data key="d1">message</data>
      <data key="d2">I haven't looked at the demo code, but I'm fairly certain that's a mistake. It should be a Rule object, not a predicate object.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1386">
      <data key="d1">message</data>
      <data key="d2">The first thing I would check is if the variable that tracks the number of changes made is being updated and reset correctly.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1387">
      <data key="d1">message</data>
      <data key="d2">I'm not sure about the first part, but for the second part your problem is that you are printing the parameter names from the rule instead of from the associated scheme. The rename step in rule evaluation handles this.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1388">
      <data key="d1">message</data>
      <data key="d2">The best place to start here would be running each file in the 80s bucket individually to narrow down where the error occurs.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1389">
      <data key="d1">message</data>
      <data key="d2">For Project 5a when doing postorder</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1390">
      <data key="d1">message</data>
      <data key="d2">I can take a look at them if you'd like. I turned mine in online so I can't guarantee mine is 100% correct but I'm pretty confident in it.</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1391">
      <data key="d1">message</data>
      <data key="d2">Just pretend preorder doesn’t exist when doing postorder for project 5.
In your example, the postorder for R2 would be 1 (or 0 if your list is zero indexed)</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1392">
      <data key="d1">message</data>
      <data key="d2">Prep exam 9c</data>
      <data key="d3">exams</data>
    </node>
    <node id="1393">
      <data key="d1">message</data>
      <data key="d2">There are other edges besides the one between D and E that meet the criteria in Prim’s algorithm. The graph in question 9 is undirected. Does that help?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1394">
      <data key="d1">message</data>
      <data key="d2">I’m still trying to wrap my head around Universal Generalization. If we have 2 equivalent domains called x and y, does universal generalization just say that A(x) and A(y) are equivalent statements?

Edit: I figured out how to do the problem I was stuck on (hw 13 #2) without universal generalization, but I would still like to know if I’m understanding that rule correctly.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1395">
      <data key="d1">message</data>
      <data key="d2">I thought we were skipping 2&amp;3 since we don’t have time to learn everything about it</data>
      <data key="d3">response</data>
    </node>
    <node id="1396">
      <data key="d1">message</data>
      <data key="d2">(3,1) and (1,3) are in the relation, but (3,3) is not</data>
      <data key="d3">homework</data>
    </node>
    <node id="1397">
      <data key="d1">message</data>
      <data key="d2">Not yet</data>
      <data key="d3">homework</data>
    </node>
    <node id="1398">
      <data key="d1">message</data>
      <data key="d2">There’s no easy visual cue for transitivity in matrix form, so I think you’re better off writing out the ordered pairs first. Then you just have to identify any pairs that look like (a,b),(b,c) and check that (a,c) is also in the relation. If this is true for all linked pairs, then the relation is transitive.

If you’ve taken linear algebra, I found online that a matrix is transitive if and only if all non-zero entries of its square are in positions of 1s in the original matrix.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1399">
      <data key="d1">message</data>
      <data key="d2">Yes, one example is a relation with no edges (represented in matrix form by a matrix of all zeros) is simultaneously symmetric, asymmetric, and antisymmetric.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1400">
      <data key="d1">message</data>
      <data key="d2">I think that’s correct, as long as the entire logical statement is contained within the scope of the quantified statement you can use the logical equivalence on it without affecting the quantified statement.
(I hope I’m using all this terminology correctly)</data>
      <data key="d3">homework</data>
    </node>
    <node id="1401">
      <data key="d1">message</data>
      <data key="d2">Select operator does have higher precedence, you only need to worry about right to left order if precedence is tied.

Secondly, it is not possible to take the cross product of relations that share any attributes.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1402">
      <data key="d1">message</data>
      <data key="d2">It’s that time again…</data>
      <data key="d3">random</data>
    </node>
    <node id="1403">
      <data key="d1">message</data>
      <data key="d2">So I finished project 1 and did all the git stuff but just noticed there's a submit option on learning suite, anybody know if we need to submit anything there?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1404">
      <data key="d1">message</data>
      <data key="d2">I'd love to!</data>
      <data key="d3">general</data>
    </node>
    <node id="1405">
      <data key="d1">message</data>
      <data key="d2">I'm going! Thank you for letting us know</data>
      <data key="d3">response</data>
    </node>
    <node id="1406">
      <data key="d1">message</data>
      <data key="d2">sounds good</data>
      <data key="d3">general</data>
    </node>
    <node id="1407">
      <data key="d1">message</data>
      <data key="d2">Does your R7 have four nodes? I thought so because s5(a,w,x,y,z) has a in it.</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1408">
      <data key="d1">message</data>
      <data key="d2">I'm going! Thank you for letting us know</data>
      <data key="d3">exams</data>
    </node>
    <node id="1409">
      <data key="d1">message</data>
      <data key="d2">for anyone who needs it: free pdf version of the textbook https://readyforai.com/download/discrete-mathematics-and-its-applications-8th-edition-pdf/?wpdmdl=1676&amp;_wpdmkey=64fa5bae867a5</data>
      <data key="d3">general</data>
    </node>
    <node id="1410">
      <data key="d1">message</data>
      <data key="d2">oh darn, sorry</data>
      <data key="d3">general</data>
    </node>
    <node id="1411">
      <data key="d1">message</data>
      <data key="d2">Has anyone else gotten the issue for bucket 40 that the value of the comment stays the same and adds more when there's another:          (COMMENT,"# lots of line comments", 2)
(COMMENT,"# lots of line comments###########################", 4)</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1412">
      <data key="d1">message</data>
      <data key="d2">The Project5 Guide has a link to the pseudocode that doesn't give me permission to open, is there a way to access it?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1413">
      <data key="d1">message</data>
      <data key="d2">what was the solution? I have the same problem</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1414">
      <data key="d1">message</data>
      <data key="d2">I have the same problem with submitting to github but I followed the thread to fix it and now it says I have divergent branches and I don't know how to fix that</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1415">
      <data key="d1">message</data>
      <data key="d2">Sweet</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1416">
      <data key="d1">message</data>
      <data key="d2">Depending on how you structured your code, it should either be in the lex function or the __manager_fsm__ function. Eithe way, it will be when you're creating the Token value</data>
      <data key="d3">response</data>
    </node>
    <node id="1417">
      <data key="d1">message</data>
      <data key="d2">I'm confused as to where we can define the values for the different tokens</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1418">
      <data key="d1">message</data>
      <data key="d2">it won't run the autograder on my commit</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1419">
      <data key="d1">message</data>
      <data key="d2">My code does not pass the autograder but I tested it locally and it worked for every input file given in the starter code. I've been locally testing in the terminal with the commands below. Any idea where I should start looking to figure out why it’s working locally but not in the autograder?
```
python3 project2.py &gt; test.txt
diff test.txt project2-passoff/{bucket}/{filename}.txt
```</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1420">
      <data key="d1">message</data>
      <data key="d2">I reserved HBLL 4361 for noon-1pm today, planning to work on the practice final. If you’re on campus, feel free to stop by and work on it with us</data>
      <data key="d3">exams</data>
    </node>
    <node id="1421">
      <data key="d1">message</data>
      <data key="d2">I've had issues with this kind of stuff in the past. How did you install 3.11.5? Did you just go to the Python site and download from there?</data>
      <data key="d3">response</data>
    </node>
    <node id="1422">
      <data key="d1">message</data>
      <data key="d2">I'm trying to update python on my mac (I have 3.9.6). I installed version 3.11.5 from python.org but the python3 --version command still shows 3.9.6. Do I need to do anything else for my machine to find the newer version?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1423">
      <data key="d1">message</data>
      <data key="d2">I installed it following the instructions in the setup video. I installed the Mac version from the python.org site and followed the steps in the download manager</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1424">
      <data key="d1">message</data>
      <data key="d2">I'm running into an issue where my program output is EXACTLY what the test cases say it should be but it still doesn't pass. Any ideas?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1425">
      <data key="d1">message</data>
      <data key="d2">Are we supposed to count it as a pass if no new tuples have been generated? I feel like the test cases are consistent on this.</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1426">
      <data key="d1">message</data>
      <data key="d2">Is there an objective way to tell if a string is ambiguous for a grammar? I'm struggling on hw 6 problem 2</data>
      <data key="d3">homework</data>
    </node>
    <node id="1427">
      <data key="d1">message</data>
      <data key="d2">&lt;Person&gt; gave a couple examples showing how FIRST and FOLLOW sets work in the thread above (entitled "I'm a bit confused on FIRST sets..."), hopefully they're helpful</data>
      <data key="d3">response</data>
    </node>
    <node id="1428">
      <data key="d1">message</data>
      <data key="d2">FIRST(A) = {12,7,8,9,6}
FIRST(B) = {7,8}
FIRST(C) = {9,7,8}
FIRST(D) = {1}
Would that be correct?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1429">
      <data key="d1">message</data>
      <data key="d2">I'm having issues with it, except I get the same error with python -m</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1430">
      <data key="d1">message</data>
      <data key="d2">Does anyone know why in bucket 80 input 6 that it evaluates the scc's instead of in order 0-6 as 0,1,3,4,6,5,2?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1431">
      <data key="d1">message</data>
      <data key="d2">How do you get the line numbers? Do you just increment every time you find a newline character?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1432">
      <data key="d1">message</data>
      <data key="d2">I'm having the same problem has anyone figured it out?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1433">
      <data key="d1">message</data>
      <data key="d2">Anybody else had the problem of "ModuleNotFoundError: No module named 'fsa'"? I've been looking stuff up and haven't found a solution.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1434">
      <data key="d1">message</data>
      <data key="d2">I could help you out real quick! It's a lot easier over voice call. Can you join the student room voice chat right now?</data>
      <data key="d3">response</data>
    </node>
    <node id="1435">
      <data key="d1">message</data>
      <data key="d2">Would anyone who hasn't taken the midterm yet like to meet up at 1 or 2 to go over the practice exam?</data>
      <data key="d3">general</data>
    </node>
    <node id="1436">
      <data key="d1">message</data>
      <data key="d2">I noticed that the code in FSA_code_example.ipynb and Multiple_FSAs_using_inheritance are different. For example in Multiple it has:</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1437">
      <data key="d1">message</data>
      <data key="d2">I use this to debug</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1438">
      <data key="d1">message</data>
      <data key="d2">Ok gotcha. So it would be better to copy the code from the Multiple?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1439">
      <data key="d1">message</data>
      <data key="d2">Are we supposed to make the Datalog object in a different file or does it not matter?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1440">
      <data key="d1">message</data>
      <data key="d2">How is project 5a scored?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1441">
      <data key="d1">message</data>
      <data key="d2">Does anyone want to get a group together</data>
      <data key="d3">exams</data>
    </node>
    <node id="1442">
      <data key="d1">message</data>
      <data key="d2">I'd be down to go over the practice exam tomorrow morning</data>
      <data key="d3">exams</data>
    </node>
    <node id="1443">
      <data key="d1">message</data>
      <data key="d2">Currently in class, but have finished the Project.</data>
      <data key="d3">response</data>
    </node>
    <node id="1444">
      <data key="d1">message</data>
      <data key="d2">Are there any students who have finished project 1 that would be willing to help me out? I only had an hour to go to the ta office but they were too busy to see me</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1445">
      <data key="d1">message</data>
      <data key="d2">I am also confused about this...</data>
      <data key="d3">homework</data>
    </node>
    <node id="1446">
      <data key="d1">message</data>
      <data key="d2">What should the input of ":-:" output?
```(COLON_DASH,":-",1)                                                                                                                                                                         
(COLON,":",1)
(EOF,"",1)
Total Tokens = 3```
or
```(UNDEFINED,":-:",1)
(EOF,"",1)
Total Tokens = 2```
Should adjacent tokens be treated the same with and without whitespace?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1447">
      <data key="d1">message</data>
      <data key="d2">Exam question for the &lt;@&amp;1126568267176222800&gt;—This doesn't affect me anymore, but the written response portions on the test on learning suite were only two rows tall and that made it tricky to make sure I was doing the problems correctly. If they could be made taller, I'm sure that would be helpful to those still fitting the test in last minute.</data>
      <data key="d3">exams</data>
    </node>
    <node id="1448">
      <data key="d1">message</data>
      <data key="d2">This is old, but on Homework 3, question 6 has me confused. it says (a∗b∪b∗a)∗ should match any number of alternating sequences of a's and b's, but shouldn't it match any combination of a's and b's? When I look at (a∗b∪b∗a)∗ I would think that if you took the two kleene stars inside to zero you could get that everything (b∪a)∗ gives you is also valid, and from my understanding that can give you any combination of a's and b's. Is that wrong?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1449">
      <data key="d1">message</data>
      <data key="d2">A 2x1, yes. Like for the other problems, I don’t know if you would have a row saying “Course - CS120” for question 3 as an example. That information is redundant and is part of the problem statement (no new info is being presented). So by that logic, makes me think the same might apply to question 1?</data>
      <data key="d3">response</data>
    </node>
    <node id="1450">
      <data key="d1">message</data>
      <data key="d2">So step 4 is definitely supposed to say ¬(p ∧ q) and not ¬(p v q)</data>
      <data key="d3">response</data>
    </node>
    <node id="1451">
      <data key="d1">message</data>
      <data key="d2">You have to make changes to the branch before you can make a pull request. Hit the new branch button and then go to that branch and add a readme file or make a slight change on github. Then you should be able to have an option that lets you make the pull request. That's what I did anyway and it worked for me</data>
      <data key="d3">response</data>
    </node>
    <node id="1452">
      <data key="d1">message</data>
      <data key="d2">You might just be able to take it into a TA tomorrow and tell them how it's a submission error in which case they might just give you full points once they help you figure out the problem because you tried to submit it before the due date time, but it wouldn't let you...</data>
      <data key="d3">response</data>
    </node>
    <node id="1453">
      <data key="d1">message</data>
      <data key="d2">Where are we supposed to write our code? From the imported github code I just see project 2.py and a bunch of test files. Do I need to add files to the download in order to create the project?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1454">
      <data key="d1">message</data>
      <data key="d2">I am still getting an exception error thrown on fst_scheme.append(self.parse_scheme())</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1455">
      <data key="d1">message</data>
      <data key="d2">Thanks</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1456">
      <data key="d1">message</data>
      <data key="d2">So that is what is confusing to me because I thought I had eliminated that problem. In my lexer I have the object tokens which is a list of tokens.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1457">
      <data key="d1">message</data>
      <data key="d2">I'm a little confused on what the rename function should do. I just having it set the old header to the new header, but is it supposed to return a new relation? I don't think it should since I am just renaming it, but I am not sure about that.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1458">
      <data key="d1">message</data>
      <data key="d2">Thanks &lt;Person&gt;! I also had a question about the errors the functions are supposed to throw. Are we supposed to make the code run despite the error or let it mess up?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1459">
      <data key="d1">message</data>
      <data key="d2">HW1 Q30: I was wondering if anyone could explain how to do the cartesian product with an empty set. I also am confused by the question because I believe that CxD should not be a subset of AxB, but that seems to be wrong.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1460">
      <data key="d1">message</data>
      <data key="d2">Starting a thread.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1461">
      <data key="d1">message</data>
      <data key="d2">Question, how do you submit the project? I’ve pushed mine to GitHub several times and nothing seems to have happened. Should I have not been pushing it to GitHub as I was working on it?</data>
      <data key="d3">general</data>
    </node>
    <node id="1462">
      <data key="d1">message</data>
      <data key="d2">Do you have any spaces in your token to_string method? I feel like I had a similar problem earlier and it came down to that</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1463">
      <data key="d1">message</data>
      <data key="d2">Copy of relation - from &lt;Person&gt; in the TA lab:</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1464">
      <data key="d1">message</data>
      <data key="d2">Question, will there ever be a case that we have to test if Query would repeat a variable name more than twice?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1465">
      <data key="d1">message</data>
      <data key="d2">try returning your out_string instead of printing it in your "project3.py" file</data>
      <data key="d3">response</data>
    </node>
    <node id="1466">
      <data key="d1">message</data>
      <data key="d2">yup</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1467">
      <data key="d1">message</data>
      <data key="d2">My code passes all the tests in vsc but it's failing on github. All the files are uploaded just fine, but it's saying 

Pytest: error: unrecognized arguments: --bucket=20

Did anyone else get this problem?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1468">
      <data key="d1">message</data>
      <data key="d2">I get the same error when I run it that way on my own machine, the --bucket= command isn't found. But thank you for the history idea, I'll try that. If I cloned my project before they made the changes, will it clone the old repo or will it clone the newer one that they uploaded?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1469">
      <data key="d1">message</data>
      <data key="d2">Did you use this for your datalog parser function?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1470">
      <data key="d1">message</data>
      <data key="d2">The parse_datalog_program function?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1471">
      <data key="d1">message</data>
      <data key="d2">If we use &lt;Person&gt;'s demo code and our tuple class is called Row, will we be counted off for not specifically using the name Tuple?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1472">
      <data key="d1">message</data>
      <data key="d2">When the specs are talking about creating a join method, is that the same as union? And when we join two relations, they will only join if both headers are exactly the same, right?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1473">
      <data key="d1">message</data>
      <data key="d2">What is the best way to test a function written as f(x) to see if it is bijective, injective or surjective?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1474">
      <data key="d1">message</data>
      <data key="d2">But then won't we get conditional values since we don't know any of our variables?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1475">
      <data key="d1">message</data>
      <data key="d2">Oh perfect, I didn't know if we were allowed to graph it or not.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1476">
      <data key="d1">message</data>
      <data key="d2">Thanks! Sorry I found the answer</data>
      <data key="d3">homework</data>
    </node>
    <node id="1477">
      <data key="d1">message</data>
      <data key="d2">How are we supposed to read the bucket number into our project0?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1478">
      <data key="d1">message</data>
      <data key="d2">Have you tried running ``pip install -U pytest``?</data>
      <data key="d3">response</data>
    </node>
    <node id="1479">
      <data key="d1">message</data>
      <data key="d2">Should the states be functions or "Callables"? I'm a little confused by the discrepancies from the jupyter tutorial and the starter code?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1480">
      <data key="d1">message</data>
      <data key="d2">I copied them from my terminal using: `% cp -R`</data>
      <data key="d3">response</data>
    </node>
    <node id="1481">
      <data key="d1">message</data>
      <data key="d2">I'm having trouble importing in my project 1 code into project 2. Both directories (project 1 and project 2) are within a parent directory for the class. I'm inside the project 2 subdirectory, in a new .py file trying to call from &lt;project2&gt; import * and it's not finding the project 2 directory. Anyone know how to troubleshoot this?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1482">
      <data key="d1">message</data>
      <data key="d2">the suspense is killing me</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1483">
      <data key="d1">message</data>
      <data key="d2">Try this thread: https://discord.com/channels/1049410982167974018/1162497731890266242

I had a similar issue</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1484">
      <data key="d1">message</data>
      <data key="d2">In hw 4 question 3, should we account for strings of apostrophes or strings beginning/ending with an apostrophe? I.e., ''' ( a string with just an apostrophe and no spaces) or ''Tis the season' (with an apostophe at the beginning) or 'somethin'' (apostrophe at end)?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1485">
      <data key="d1">message</data>
      <data key="d2">Do neither, it is an old assignment</data>
      <data key="d3">response</data>
    </node>
    <node id="1486">
      <data key="d1">message</data>
      <data key="d2">For the output column, each row just had a single letter (a, b, c,...) or AdPop, depending on which action (production) I took. 

I don't think we need a parse tree.</data>
      <data key="d3">response</data>
    </node>
    <node id="1487">
      <data key="d1">message</data>
      <data key="d2">My understanding was that we want a regular expression that matches the *language* of strings</data>
      <data key="d3">response</data>
    </node>
    <node id="1488">
      <data key="d1">message</data>
      <data key="d2">It’s back up for me</data>
      <data key="d3">general</data>
    </node>
    <node id="1489">
      <data key="d1">message</data>
      <data key="d2">The slides say this. Are block comments removed from the project?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1490">
      <data key="d1">message</data>
      <data key="d2">Yeah</data>
      <data key="d3">response</data>
    </node>
    <node id="1491">
      <data key="d1">message</data>
      <data key="d2">This is obvious, but I get that error if I accidentally try to run the code from that class file rather than from project1.py</data>
      <data key="d3">response</data>
    </node>
    <node id="1492">
      <data key="d1">message</data>
      <data key="d2">Any extra new lines at the end of the output or the test cases?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1493">
      <data key="d1">message</data>
      <data key="d2">If you’re referring to why it bugs out if you run lexer_fsm directly, I suspect it’s because the file has nothing calling it. You run the file, but there is no instantiation of Lexer_FSM(). So it doesn’t know what to do. It would be like running a Class.cpp without creating an object of type Class</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1494">
      <data key="d1">message</data>
      <data key="d2">Can you send a screenshot of 1) where you call your manager function and 2) of your manager function?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1495">
      <data key="d1">message</data>
      <data key="d2">A suggestion might be to have one constructor, and give line_num a default value. So if you input a value, it’ll use the one you gave it. But if you don’t give a value, then the default value could be like “None” and then an if statement “if line_num == None” could handle it accordingly</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1496">
      <data key="d1">message</data>
      <data key="d2">I think the key to this is to remember that every line of code will make its way through each FSA. And each FSA will return to the LexerFSM whether or not that specific FSA recognizes the sequence of characters fed into it (at least if you’re following the jupyter notebooks method). 

The notebook (or maybe the project description?) clarified that we will classify a set of characters a specific token based on which FSA returns True last. So, there might be a way to arrange the order in which the FSAs are run so that the specific tokens (like Schemes, Rules, Queries, and Facts) have trump over the more general IDs…</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1497">
      <data key="d1">message</data>
      <data key="d2">That serves mostly as a cosmetic device which stores some meta data. The style guide describes it as “a promise to readers of the code that this item is a function”</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1498">
      <data key="d1">message</data>
      <data key="d2">Your would stop when it encounters the 1 in 1stPerson. I believe the example on Learning Suit is just to illustrate that a word starting with a number cannot be a string (but everything else after could be if the number wasn’t there)</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1499">
      <data key="d1">message</data>
      <data key="d2">How I did it was I called all of my FSAs in a for loop in the Lex function (as shown in jupyter notebooks). So, before I call the Lex function (which requires an input string), I scan the input to see if there is any white space which should be ignored by the Lex function (and hence the FSAs). If there is, I remove the white space by getting rid of that character. A while loop makes sure that all white space is removed</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1500">
      <data key="d1">message</data>
      <data key="d2">I did read the next character. I read it, if it wasn’t alnum() then I “backtracked” on telling the FSM how many characters to insert into the token</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1501">
      <data key="d1">message</data>
      <data key="d2">Did Dr. Goodrich say after what class we’ll know everything to do Project 2? Was that after today’s lecture?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1502">
      <data key="d1">message</data>
      <data key="d2">I would use some breakpoints to watch it (sorry, really “duh” of an answer) and make sure that when you return from your recursive descent parsing, that you’re not inserting any lists into your defined list of predicates.

 For example, let self.schemes be the list in which you store all of your schemes. Let parse_scheme return a Scheme predicate, and let parse_scheme_list return a list of Scheme predicates.

Self.schemes = [parse_scheme]
self.schemes += [parse_scheme_list]

Because parse_scheme_list returns a list, self.schemes will be a list containing a list</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1503">
      <data key="d1">message</data>
      <data key="d2">So, the best practice is to use both. Within the parse function, find out if the next input value is 1) a part of the first set, and then 2) a part of the first set and then 3) if neither, throw an error. 

However, this grammar is nice enough that you could get away with just checking the first set depending on how you have your error function set up. But it’s not wise in the long run (and implementing it the correct way doesn’t take too much effort)</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1504">
      <data key="d1">message</data>
      <data key="d2">Wouldn’t any SCC of size 1 be self dependent?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1505">
      <data key="d1">message</data>
      <data key="d2">Is your forward_graph a list?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1506">
      <data key="d1">message</data>
      <data key="d2">When is the exam?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1507">
      <data key="d1">message</data>
      <data key="d2">is the prep exam closed notes?</data>
      <data key="d3">response</data>
    </node>
    <node id="1508">
      <data key="d1">message</data>
      <data key="d2">since the midterm review is on the 23rd, I'd hazard a guess it's after that</data>
      <data key="d3">response</data>
    </node>
    <node id="1509">
      <data key="d1">message</data>
      <data key="d2">I would say you’re not missing anything. Can you do the cross product in this case? (That’s rhetorical)</data>
      <data key="d3">exams</data>
    </node>
    <node id="1510">
      <data key="d1">message</data>
      <data key="d2">Any possible string in between to ‘ ‘ single quote marks</data>
      <data key="d3">homework</data>
    </node>
    <node id="1511">
      <data key="d1">message</data>
      <data key="d2">All the edges from the graph that are part of the forest created by the DFS traversal are solid. All other edges from the graph are added to the tree, but they are dashed</data>
      <data key="d3">response</data>
    </node>
    <node id="1512">
      <data key="d1">message</data>
      <data key="d2">The TA Help Queue at 9:00.00am on the dot today</data>
      <data key="d3">random</data>
    </node>
    <node id="1513">
      <data key="d1">message</data>
      <data key="d2">Let me give an example. Consider the set S = {x,y,z}. The power set is {Ø,{x},{y},{z},{x,y},{x,z},{x,y,z}}</data>
      <data key="d3">general</data>
    </node>
    <node id="1514">
      <data key="d1">message</data>
      <data key="d2">yes</data>
      <data key="d3">response</data>
    </node>
    <node id="1515">
      <data key="d1">message</data>
      <data key="d2">&lt;Person&gt; is correct -- online final available throughout finals week</data>
      <data key="d3">general</data>
    </node>
    <node id="1516">
      <data key="d1">message</data>
      <data key="d2">You don't have to draw all the transitions but you should write a note that says that all transitions not shown go to the error state. You should show at least a few of the transitions to an error state on the diagram</data>
      <data key="d3">general</data>
    </node>
    <node id="1517">
      <data key="d1">message</data>
      <data key="d2">fixed</data>
      <data key="d3">general</data>
    </node>
    <node id="1518">
      <data key="d1">message</data>
      <data key="d2">Neither Saturday or Sunday is supposed to count as a late day. If we messed up and counted one or both as a late day, please DM me so that I can fix your score</data>
      <data key="d3">general</data>
    </node>
    <node id="1519">
      <data key="d1">message</data>
      <data key="d2">Good suggestion. I just pinned it.</data>
      <data key="d3">general</data>
    </node>
    <node id="1520">
      <data key="d1">message</data>
      <data key="d2">I used drawio. There is a drawio plugin for vscode</data>
      <data key="d3">general</data>
    </node>
    <node id="1521">
      <data key="d1">message</data>
      <data key="d2">Room 1115</data>
      <data key="d3">general</data>
    </node>
    <node id="1522">
      <data key="d1">message</data>
      <data key="d2">The Jupyter notebook references the definition in the textbook that we'll be discussing on Sept 18, so it has you focus on the right reading to get a head start on project 1</data>
      <data key="d3">general</data>
    </node>
    <node id="1523">
      <data key="d1">message</data>
      <data key="d2">Also under the announcements tab on learning suite</data>
      <data key="d3">general</data>
    </node>
    <node id="1524">
      <data key="d1">message</data>
      <data key="d2">I'd have to see your whole file to help, but you could try the following ChatGPT prompt:

"why would the following code

from .project1_classes.fsa_classes.colon_dash_fsa import ColonDashFSA

cause the following error

ImportError: attempted relative import with no known parent package"</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1525">
      <data key="d1">message</data>
      <data key="d2">It depends a little on how you've implemented it. I implemented my code so that I stepped through one character of my input string at a time. I kept track of how many characters I had read, and when the number of characters read equaled the length of the original input then I knew that I'd reached the EOF.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1526">
      <data key="d1">message</data>
      <data key="d2">You should clone it from the terminal. Cloning and the .zip method both create local copies but cloning also sets up the git repository and allows testing in github classroom</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1527">
      <data key="d1">message</data>
      <data key="d2">Try this prompt from chatGPT 

"what would cause the following error when I use pytest
::error::Error: Exit with code: 1 and signal: null"</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1528">
      <data key="d1">message</data>
      <data key="d2">As an example of what &lt;Person&gt;ua says, if the input is "Rules1", should the lexer say that it found the RULES pattern or that it found the ID pattern? (The answer is ID.)  Similarly, if the input is "Rules:" then both the RULES FSA and ID FSA return true, but RULES is the correct pattern.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1529">
      <data key="d1">message</data>
      <data key="d2">Check out input62.txt and answer62.txt for some examples of subtle differences between IDs and keywords.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1530">
      <data key="d1">message</data>
      <data key="d2">@&lt;Person&gt;ua, could you please fix that in the tutorial so that when students upload it they get the corrected version?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1531">
      <data key="d1">message</data>
      <data key="d2">A list of what tutorials are done</data>
      <data key="d3">tutorials</data>
    </node>
    <node id="1532">
      <data key="d1">message</data>
      <data key="d2">excellent! thx</data>
      <data key="d3">tutorials</data>
    </node>
    <node id="1533">
      <data key="d1">message</data>
      <data key="d2">@everyone</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1534">
      <data key="d1">message</data>
      <data key="d2">You'll be ready to start on project 1 after lecture on Monday.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1535">
      <data key="d1">message</data>
      <data key="d2">Here is a link to the slides I created as I implemented project 4. I tried to spell out all the steps in the slides and give examples. https://learningsuite.byu.edu/.qP7i/cid-QU01ke0lYENd/pages/id-CXGA</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1536">
      <data key="d1">message</data>
      <data key="d2">That's fine. It's what I would do</data>
      <data key="d3">exams</data>
    </node>
    <node id="1537">
      <data key="d1">message</data>
      <data key="d2">I've made a note to make those spaces bigger for the final, and to make them bigger for the midterm in fall 2024</data>
      <data key="d3">exams</data>
    </node>
    <node id="1538">
      <data key="d1">message</data>
      <data key="d2">Post to show how to use threads</data>
      <data key="d3">homework</data>
    </node>
    <node id="1539">
      <data key="d1">message</data>
      <data key="d2">The postorder numbers represent when vertices are popped off the stack, first, second, third, etc. Those are the numbers you use for part 3. For part 4, you give a list in reverse order [last node, second to last node, ... second node, first node]</data>
      <data key="d3">response</data>
    </node>
    <node id="1540">
      <data key="d1">message</data>
      <data key="d2">We'll discuss a few other tests today and Wednesday. The most simple test I know is whether M = M^[2]. We'll define M^[2] in class today</data>
      <data key="d3">homework</data>
    </node>
    <node id="1541">
      <data key="d1">message</data>
      <data key="d2">Almost all of the problems from Homework 10a are variations of examples from the textbook. We changed them slightly so that we weren't violating copyright, but you can find all the examples in the book.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1542">
      <data key="d1">message</data>
      <data key="d2">It's helpful to think about this problem using the ideas about free and bound variables for quantifiers.  The y in 9d is bound to the forall quantifier, which means that it acts like a "dummy variable". In other words, the fact that we use y is not important because what is important is that the statement claims that Q is true for any element of the domain.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1543">
      <data key="d1">message</data>
      <data key="d2">you need some other rules of inference/logical equivalences to get a knowledge base in the normal form, but once in the normal form you only need resolution if you are doing proof by contradiction. The four forms of resolution that we talked about in class subsume modes ponens, modus tollens, and disjunctive syllogism.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1544">
      <data key="d1">message</data>
      <data key="d2">Yes, you only need resolution. Remember the four forms of resolution that I shared in class. The problem you noted is one of the forms. The idea is that you can just apply resolution to complete proofs without the other rules once you have the knowledge base in the right form.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1545">
      <data key="d1">message</data>
      <data key="d2">The scores have all been adjusted now on homework 10a</data>
      <data key="d3">homework</data>
    </node>
    <node id="1546">
      <data key="d1">message</data>
      <data key="d2">Since I didn't specify o the homework, I'll accept either</data>
      <data key="d3">homework</data>
    </node>
    <node id="1547">
      <data key="d1">message</data>
      <data key="d2">We'll discuss these kinds of problems in class today</data>
      <data key="d3">homework</data>
    </node>
    <node id="1548">
      <data key="d1">message</data>
      <data key="d2">Try to think about this in terms of the pseudo-code I posted on Discord

A = {'a','b'}
B = {'1','2'}
A_cross_B = set()
for a in A:
    for b in B:
        A_cross_B.add(tuple([a,b]))

Suppose that we change the two sets so with C = {1,2} and D = {}. The pseudo-code turns into

C = {1,2}
D = set()
C_cross_D = set()
for c in C:
    for d in D:
        C_cross_D.add(tuple([c,d]))

What happens when we try to iterate through each d in D? Try it out in python. The code runs.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1549">
      <data key="d1">message</data>
      <data key="d2">Which question? I'll look into it</data>
      <data key="d3">homework</data>
    </node>
    <node id="1550">
      <data key="d1">message</data>
      <data key="d2">I'm changing the configuration so that you can save online homeworks and come back to them. I also increased the number of allowed attempts for the first two assignments to three (to compensate for this problem).</data>
      <data key="d3">homework</data>
    </node>
    <node id="1551">
      <data key="d1">message</data>
      <data key="d2">The order of the elements in a tuple matter: (a,1) does not equal (1,a).</data>
      <data key="d3">homework</data>
    </node>
    <node id="1552">
      <data key="d1">message</data>
      <data key="d2">Correct. Same questions, same answers. Possibly different answer orders. The intent is for students to learn from mistakes (learning activity) not measure topic mastery (assessment activity)</data>
      <data key="d3">homework</data>
    </node>
    <node id="1553">
      <data key="d1">message</data>
      <data key="d2">This is a thread response</data>
      <data key="d3">homework</data>
    </node>
    <node id="1554">
      <data key="d1">message</data>
      <data key="d2">Each lecture will be available both in class and via zoom. Please attend in class since I think you'll experience will be better in class, but people get sick or have to travel or have child care so I want to make the zoom link an option. A TA will be online during class to answer questions from those joining via zoom. I'll try to remember to record each lecture, but it would help if you'd remind me; BYU no longer allows me to automatically record zoom meetings. 

Here are the links for each section.

11am (section 3) https://byu.zoom.us/j/93771628694?pwd=MGUzRmlkSkhsS0hoR0Z1YWh6U2Rpdz09
1pm (section 1) https://byu.zoom.us/j/99934416096?pwd=S0hXYk5BZ1Jtams3b2E1WFplalhLUT09
2pm (section 2) https://byu.zoom.us/j/94479955425?pwd=SDJKMDU1dFA4MXJJM25PL05CcDBLUT09</data>
      <data key="d3">announcements</data>
    </node>
    <node id="1555">
      <data key="d1">message</data>
      <data key="d2">Here's the zoom link and passcode

https://byu.zoom.us/rec/share/95c6xRyUE5CSaxoeWWfmuSaay_pkIUoYBLHLqwZXGKBMnIKDtks-zE1yFBVycvpS.wN7IuYJK0bQPWg4A 

Passcode: N=0bae6+</data>
      <data key="d3">announcements</data>
    </node>
    <node id="1556">
      <data key="d1">message</data>
      <data key="d2">I've revised this document (7 Sept) and invited CS faculty who are interested to make suggestions for improving it. Please use this document as a guide for how to use chatbots to enhance your learning while at the same time maintaining your acdemic integrity. Questions are welcome</data>
      <data key="d3">announcements</data>
    </node>
    <node id="1557">
      <data key="d1">message</data>
      <data key="d2">Here's the link. Apologies for the stammering in places</data>
      <data key="d3">announcements</data>
    </node>
    <node id="1558">
      <data key="d1">message</data>
      <data key="d2">&lt;@681617543563051019&gt; &lt;@317466812721922049&gt; One of the TAs who said that they'd work dropped so we are down 10 TA hours.</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1559">
      <data key="d1">message</data>
      <data key="d2">hope you get feeling better soon</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1560">
      <data key="d1">message</data>
      <data key="d2">good luck with the interview</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1561">
      <data key="d1">message</data>
      <data key="d2">Hope you get feeling better soon</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1562">
      <data key="d1">message</data>
      <data key="d2">Hope you get feeling better soon</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1563">
      <data key="d1">message</data>
      <data key="d2">awesome!</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1564">
      <data key="d1">message</data>
      <data key="d2">I noticed that a few students I'm</data>
      <data key="d3">exam-grading-excpetions</data>
    </node>
    <node id="1565">
      <data key="d1">message</data>
      <data key="d2">No late penalty. Thanks for asking</data>
      <data key="d3">exam-grading-excpetions</data>
    </node>
    <node id="1566">
      <data key="d1">message</data>
      <data key="d2">Will the second attempt of any homework repopulate the questions with different values?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1567">
      <data key="d1">message</data>
      <data key="d2">Thanks!</data>
      <data key="d3">homework</data>
    </node>
    <node id="1568">
      <data key="d1">message</data>
      <data key="d2">For question 2 on the practice final (and the actual final), will it be necessary to write transitions to a serr state? Or is it simply implied that if a string doesn't satisfy a regular expression it will end in an error state?</data>
      <data key="d3">general</data>
    </node>
    <node id="1569">
      <data key="d1">message</data>
      <data key="d2">I was wondering the same thing. I feel like that one had some great examples that we could study from.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1570">
      <data key="d1">message</data>
      <data key="d2">I was wondering the same thing. I feel like that one had some great examples that we could study from.</data>
      <data key="d3">response</data>
    </node>
    <node id="1571">
      <data key="d1">message</data>
      <data key="d2">Hey guys, can somebody tell me where I can find the TA help hours for this class? I can't find it</data>
      <data key="d3">general</data>
    </node>
    <node id="1572">
      <data key="d1">message</data>
      <data key="d2">Hi &lt;Person&gt;! I could help for about 30 minutes! You want to hop on a chat?</data>
      <data key="d3">response</data>
    </node>
    <node id="1573">
      <data key="d1">message</data>
      <data key="d2">Thank you!</data>
      <data key="d3">general</data>
    </node>
    <node id="1574">
      <data key="d1">message</data>
      <data key="d2">Hey I just realized that my new Project-1 repo (using the link posted on Sep 15 on LearningSuite) says the due date was Sep 13, is this going to be a problem?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1575">
      <data key="d1">message</data>
      <data key="d2">It might be possible, but well, it may cuase a lot of unintended problems.</data>
      <data key="d3">response</data>
    </node>
    <node id="1576">
      <data key="d1">message</data>
      <data key="d2">What do your state functions look like? Could you send a picture without the error?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1577">
      <data key="d1">message</data>
      <data key="d2">Nice, I think that's a really great way of doing it, but do you know if FSA's are allowed to return something like that? I feel like someone told me that FSA's can't return something like that, they can only return true or false</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1578">
      <data key="d1">message</data>
      <data key="d2">You can use len() on the value of the output token to know how many characters to "remove" or "move past" in the Manager FSM like this:

nextToken = lex(input)
then, use len(nextToken.value) to know how many chars to move past</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1579">
      <data key="d1">message</data>
      <data key="d2">Ooh perfect! Thank you! I didn’t catch that</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1580">
      <data key="d1">message</data>
      <data key="d2">I had the same issue. My code was printing the output instead of return main() as a string</data>
      <data key="d3">response</data>
    </node>
    <node id="1581">
      <data key="d1">message</data>
      <data key="d2">My code works for all of the input files when I run them manually but fails all of the the bucket: '80' test in pytest locally and in github. I can't figure out why but the output seems to be different when I run pytest versus when manually set the file in `project2.py`. Has anybody else had this problem?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1582">
      <data key="d1">message</data>
      <data key="d2">Yeah! Go ahead and post them here!</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1583">
      <data key="d1">message</data>
      <data key="d2">Here's the full thing</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1584">
      <data key="d1">message</data>
      <data key="d2">Can somebody tell me what exactly I need to output from my `project3` method?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1585">
      <data key="d1">message</data>
      <data key="d2">Is it required for the relational operator methods to return a *new* Relation, or should we make them modify / mutate the relation it is called on?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1586">
      <data key="d1">message</data>
      <data key="d2">How do I know which node to start my traversal at in the reversed graph? Does it matter? I feel like I remember learning that the node you start at doesn't matter but I don't remember why 😅

Also, if there is a node that depends on a relation that is not produced by rules, then it doesn't matter what order we evaluate it in right?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1587">
      <data key="d1">message</data>
      <data key="d2">It's an 'AND'</data>
      <data key="d3">response</data>
    </node>
    <node id="1588">
      <data key="d1">message</data>
      <data key="d2">can somebody remind me what the symbols should be here? they are showing up as squares for me 😅</data>
      <data key="d3">exams</data>
    </node>
    <node id="1589">
      <data key="d1">message</data>
      <data key="d2">So would the answer be: "Not possible"?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1590">
      <data key="d1">message</data>
      <data key="d2">Ah, okay that makes a lot of sense. Thank you!</data>
      <data key="d3">exams</data>
    </node>
    <node id="1591">
      <data key="d1">message</data>
      <data key="d2">Anybody able to help me with problem 4 on HW 13?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1592">
      <data key="d1">message</data>
      <data key="d2">Someone should report Prof Goodrich to the office of inclusion for his "anti-symmetric" comments in class</data>
      <data key="d3">random</data>
    </node>
    <node id="1593">
      <data key="d1">message</data>
      <data key="d2">I had to readjust my work schedule, I updated it on the google drive</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1594">
      <data key="d1">message</data>
      <data key="d2">I agree. All options for question 23 don't get the desired result. Performing Modus Tollens on 1 &amp; 3 should give you ~(p ^ q) but the new fact is ~(p v q). I assume the old answer on question 25 that was changed was correctly performing De Morgan's law the value that should be in 4. The changed answer to question 25 is now the result from performing De Morgan's law on ~(p v q) which is not a fact we should have in our knowledge base.</data>
      <data key="d3">response</data>
    </node>
    <node id="1595">
      <data key="d1">message</data>
      <data key="d2">On 10a for question 25, it should be not p or not q, but it has and instead, which messes with question 29 if it’s not right</data>
      <data key="d3">homework</data>
    </node>
    <node id="1596">
      <data key="d1">message</data>
      <data key="d2">The original error is 4 should be not (p and q), which is correct in question 23 but when you get to question 25 you don’t see question 23, so he changed question 25 to match the error in step 4, which makes 25 wrong, and if you use the incorrect conclusion in 25 then you can’t get the correct answer for 29 either</data>
      <data key="d3">response</data>
    </node>
    <node id="1597">
      <data key="d1">message</data>
      <data key="d2">Quick question that doesn t matter at</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1598">
      <data key="d1">message</data>
      <data key="d2">This is what I was wondering as well. It seems like iffy coding practice to make something private only to reach through and use it anyway. I probably won't implement mine this way if I can get away with it</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1599">
      <data key="d1">message</data>
      <data key="d2">Okay so has anyone else had issues with bucket 100 test 8? I'm getting tuples added to my relation that are different lengths and it's causing problems when I try and join them</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1600">
      <data key="d1">message</data>
      <data key="d2">Since the database stores tuples in a set, the unique tuples added when I evaluate the rules are out of order (and thus won't pass the tests). Is there any good way to fix this problem? (the tuples are all correct, just in random spots)</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1601">
      <data key="d1">message</data>
      <data key="d2">I'm iterating over my tuples, and then converting new/unique tuples to strings and outputting those.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1602">
      <data key="d1">message</data>
      <data key="d2">I would like to know why I got passed by Pytest and create a new branch for pull request test but nothing happens in my action?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1603">
      <data key="d1">message</data>
      <data key="d2">I got some extra time, let me know if you 'd like to meet.</data>
      <data key="d3">response</data>
    </node>
    <node id="1604">
      <data key="d1">message</data>
      <data key="d2">Is there an online TA to help me tonight?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1605">
      <data key="d1">message</data>
      <data key="d2">No we do not. For anyone who missed it, there is a message in learning suite.</data>
      <data key="d3">general</data>
    </node>
    <node id="1606">
      <data key="d1">message</data>
      <data key="d2">Hey, I am looking at the same thing. Did you ever get this resolved?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1607">
      <data key="d1">message</data>
      <data key="d2">Yes, the test cases are found in the project1-passoff folder. You can run them by changing which one is referred to in project1.py</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1608">
      <data key="d1">message</data>
      <data key="d2">I would highly recommend one class per file. Not sure if it's in the style guide, but it's best practice for sure.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1609">
      <data key="d1">message</data>
      <data key="d2">Due to the inauguration of President Reese today, I will not be holding my office hour from 10-10:30.</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1610">
      <data key="d1">message</data>
      <data key="d2">Duplicate row entries for “&lt;Person&gt;"</data>
      <data key="d3">exam-grading-excpetions</data>
    </node>
    <node id="1611">
      <data key="d1">message</data>
      <data key="d2">I am also looking for where it is located... I can't find it</data>
      <data key="d3">response</data>
    </node>
    <node id="1612">
      <data key="d1">message</data>
      <data key="d2">I am also looking for where it is located... I can't find it</data>
      <data key="d3">exams</data>
    </node>
    <node id="1613">
      <data key="d1">message</data>
      <data key="d2">Hi</data>
      <data key="d3">general</data>
    </node>
    <node id="1614">
      <data key="d1">message</data>
      <data key="d2">Well, considering no students are taking CS100, either way you'll get the right answer. You're just finding all the students taking CS101, but in a different way (and thus a different equation) than in part 2</data>
      <data key="d3">response</data>
    </node>
    <node id="1615">
      <data key="d1">message</data>
      <data key="d2">What does "immediate prerequisite" mean in the context of Question 3?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1616">
      <data key="d1">message</data>
      <data key="d2">If  your auto grading is not working. This should help!</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1617">
      <data key="d1">message</data>
      <data key="d2">would you like to join in the voice channel and talk about it?</data>
      <data key="d3">response</data>
    </node>
    <node id="1618">
      <data key="d1">message</data>
      <data key="d2">It is fixed! Thank you &lt;Person&gt;</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1619">
      <data key="d1">message</data>
      <data key="d2">would you like to join the voice channel and talk about it?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1620">
      <data key="d1">message</data>
      <data key="d2">wrong queue</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1621">
      <data key="d1">message</data>
      <data key="d2">Thinking about project 4 with a natrual join of the body predicate of a Rule, you will join the first 2, R |X| S, then |X|T</data>
      <data key="d3">exams</data>
    </node>
    <node id="1622">
      <data key="d1">message</data>
      <data key="d2">Under the LS content page, there is a TA help sub page 🙂</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1623">
      <data key="d1">message</data>
      <data key="d2">Hi &lt;Person&gt;，Sorry I just saw this, I will be here till 11:40 as usual.</data>
      <data key="d3">response</data>
    </node>
    <node id="1624">
      <data key="d1">message</data>
      <data key="d2">Quick question that doesn't matter at all:</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1625">
      <data key="d1">message</data>
      <data key="d2">It’s called a type hint. You can use them to make your program more explicit about how it works.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1626">
      <data key="d1">message</data>
      <data key="d2">You’re totally right. If your program gives more output after an `UNDEFINED` token it will fail the tests.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1627">
      <data key="d1">message</data>
      <data key="d2">I also had to do something similar to guarantee imports. I think I ended up going explicitly from the parent `project1_classes` module.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1628">
      <data key="d1">message</data>
      <data key="d2">I hope so! That’s how I’ve done everything.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1629">
      <data key="d1">message</data>
      <data key="d2">Hey, almost all of my buckets are done. It's only bucket 100 I need to verify. But the given input for 102 and the answer for 102 don't appear to match at all. Input 102 starts with the word "Facts" but the first token on the answer file is a comment. I'm just confused how we're supposed to get between the two files even though they don't seem to match up</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1630">
      <data key="d1">message</data>
      <data key="d2">Hey what pytest command should you use to run the pytests? I'm using this command and getting this error</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1631">
      <data key="d1">message</data>
      <data key="d2">I think there's a message from a while ago that said if your tests pass and you get the 2 error code, it means you need to get rid of any import tabulates or pip libraries</data>
      <data key="d3">response</data>
    </node>
    <node id="1632">
      <data key="d1">message</data>
      <data key="d2">This is in VScode, that's why I'm confused haha</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1633">
      <data key="d1">message</data>
      <data key="d2">In the TA lab</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1634">
      <data key="d1">message</data>
      <data key="d2">I'm struggling to import code from the project 1 directory into the project 2 directory because python doesn't allow modules to contain hyphens and all of the project directories are named project-#-gitusername. How do I get around this issue?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1635">
      <data key="d1">message</data>
      <data key="d2">But Lexer calls tons of other classes in the project 1 directory too. Copy all of them over? Seems like there should be a much better solution than that.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1636">
      <data key="d1">message</data>
      <data key="d2">My interpret schemes function looks like it's working, but my interpret facts function is adding each new row to every relation in my database dictionary instead of just the one I try to reference with the key (the relation name). Any thoughts?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1637">
      <data key="d1">message</data>
      <data key="d2">That fixed it, thank you so much!</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1638">
      <data key="d1">message</data>
      <data key="d2">I was having the same issue, it seems to work without the addition of .name. I'm honestly not entirely sure why though.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1639">
      <data key="d1">message</data>
      <data key="d2">Pretty sure the correct answer for Hw 12 Q10 "Everybody can fool somebody" is not listed as an option here.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1640">
      <data key="d1">message</data>
      <data key="d2">Have you tried including python -m or py -m at the start of the command?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1641">
      <data key="d1">message</data>
      <data key="d2">HW1 Q6/10: These questions ask if D is an element of A and a subset of A, respectively. I put true on question 6 because all sets have an empty element and false for 10 because D is not a set, but I got both of these wrong.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1642">
      <data key="d1">message</data>
      <data key="d2">sweet thanks</data>
      <data key="d3">homework</data>
    </node>
    <node id="1643">
      <data key="d1">message</data>
      <data key="d2">so something like this?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1644">
      <data key="d1">message</data>
      <data key="d2">all good! so i just had it backwards. thanks!</data>
      <data key="d3">homework</data>
    </node>
    <node id="1645">
      <data key="d1">message</data>
      <data key="d2">My pytest isn't working I have tried uninstalling and reinstalling it, and doing a bunch of random things to try to get it to work. Any ideas?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1646">
      <data key="d1">message</data>
      <data key="d2">Yes</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1647">
      <data key="d1">message</data>
      <data key="d2">Definitely</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1648">
      <data key="d1">message</data>
      <data key="d2">Anyone know if I should be worried about these warnings? or if it has a green check am I good to go?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1649">
      <data key="d1">message</data>
      <data key="d2">Grading Practice Exam</data>
      <data key="d3">exams</data>
    </node>
    <node id="1650">
      <data key="d1">message</data>
      <data key="d2">I think they grade that we gave a reasonable effort to each problem. So even if your answers aren't right you should be good if you did every problem on the practice exam.</data>
      <data key="d3">exams</data>
    </node>
    <node id="1651">
      <data key="d1">message</data>
      <data key="d2">On homework 18b do weights affect the order of edges? Also how exactly do I represent the weights in regards to the variable w?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1652">
      <data key="d1">message</data>
      <data key="d2">Discrete Mathematics &amp; Its Applications (**90-day rental for $14.85**) https://www.ubookstore.com/Loose-Leaf-Discrete-Mathematics-its-Applications-8e-19?location=&amp;quantity=1&amp;custcol_nsts_csic_web_product_type=125</data>
      <data key="d3">general</data>
    </node>
    <node id="1653">
      <data key="d1">message</data>
      <data key="d2">```     self.dfs(self.reverse_graph[0],self.reverse_visited, self.postorder)

    def dfs(self, node, visited: dict[int, bool], result):
        visited[node] = True
        for next in self.forward_graph[node]:
            if not visited[next]:
                self.dfs(next, visited, result)
        result.append(node)
        print(result)
```</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1654">
      <data key="d1">message</data>
      <data key="d2">hey guys I'm having the exact same problem</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1655">
      <data key="d1">message</data>
      <data key="d2">I honestly have no idea</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1656">
      <data key="d1">message</data>
      <data key="d2">if anyone wants to work on the practice exam today I'm in the CS basement (ta room) and I'll probably be here for a while</data>
      <data key="d3">exams</data>
    </node>
    <node id="1657">
      <data key="d1">message</data>
      <data key="d2">guys, i got stumped on the last question (#13) of the HW</data>
      <data key="d3">homework</data>
    </node>
    <node id="1658">
      <data key="d1">message</data>
      <data key="d2">are there any TAs in the lab today?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1659">
      <data key="d1">message</data>
      <data key="d2">I will be missing my hours today due to STEM fair and a family event</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1660">
      <data key="d1">message</data>
      <data key="d2">https://tenor.com/view/general-kenobi-general-grievous-revenge-of-the-sith-star-wars-gif-26397323</data>
      <data key="d3">random</data>
    </node>
    <node id="1661">
      <data key="d1">message</data>
      <data key="d2">I'm confused about this rule output in the answer5.txt file... shouldn't it be printing the values out in the order E, D, C, B, A because that's the order they're in in the head predicate? 
DeaUoo(E,D,C,B,A) :- DeaWoo(A,B,C,D,E),A(B).
  a='a', b='a', c='a', d='a', e='a'
  a='a', b='a', c='b', d='a', e='a'
  a='b', b='a', c='a', d='a', e='a'</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1662">
      <data key="d1">message</data>
      <data key="d2">Do I need to change something with the way that I output it then?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1663">
      <data key="d1">message</data>
      <data key="d2">Can we turn in 5a multiple times on learningsuite?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1664">
      <data key="d1">message</data>
      <data key="d2">Anyone else not have any pull requests? I pushed my completed project for grading and theres supposed to be a pull request for me to refresh but there isnt one</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1665">
      <data key="d1">message</data>
      <data key="d2">pre-order keeps track of when we push items onto the stack, so when we visit a node, right?</data>
      <data key="d3">general</data>
    </node>
    <node id="1666">
      <data key="d1">message</data>
      <data key="d2">You do not need to submit anything on learning suite</data>
      <data key="d3">response</data>
    </node>
    <node id="1667">
      <data key="d1">message</data>
      <data key="d2">Just had a question regarding code style in the Jupyter Notebooks for Project 1 and how we should write our own code. In the state functions s0, s1, etc., it declares a variable "next_state" and then specifies with ":" that is is a function. On every subsequent call to this variable, in the if/else statements, the type 'function' is declared every single time. Here is a screenshot to show what I mean. Are we expected to specify type on every call?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1668">
      <data key="d1">message</data>
      <data key="d2">go to the Content page on learning suite and the Project Passoff tab, it shows instructions on how to get it autograded on GitHub classroom</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1669">
      <data key="d1">message</data>
      <data key="d2">Not sure if anyone is still up working on this, but I'm a little confused about how to implement the first and follow sets. I used the RDP class from Jupyter as a guide, but from the TA help video it doesn't look like the first set was used for recursion in parse_id_list. Should we be using first/follow sets here?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1670">
      <data key="d1">message</data>
      <data key="d2">it is in a loop, 
for token in tokens:
        if token.token_type == "COMMENT":
            tokens.remove(token)</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1671">
      <data key="d1">message</data>
      <data key="d2">do you mean parser?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1672">
      <data key="d1">message</data>
      <data key="d2">should our rename method in the Relation class throw an error when we try renaming a different amount of headers than there are in our original Relation object? If that makes sense</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1673">
      <data key="d1">message</data>
      <data key="d2">I just wanted to make sure I'm on the right track in understanding the interpret_rules fixed point algorithm:
- we iterate through the rule list in our datalog program and run them through our evaluate_rule function
- upon running each, we check that the number returned by evaluate_rule is 0, otherwise we call the function again and pass in the same rule
- when the number returned is 0, we move on to the next rule until each one has been run through evaluate_rule with no change in the number returned.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1674">
      <data key="d1">message</data>
      <data key="d2">so we call evaluate_rule on each rule until running all of them in a row results in 0 change for each one?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1675">
      <data key="d1">message</data>
      <data key="d2">do we build our reverse dependency graphs from our original graph or use the adjacency list?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1676">
      <data key="d1">message</data>
      <data key="d2">what format does our finished midterm preparation exam need to be in? That is, can we just go through the practice exam on our own notebook page and submit our answers or should we print it out and go through it on the page?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1677">
      <data key="d1">message</data>
      <data key="d2">I think it's E for the starting symbol, because it's in set S</data>
      <data key="d3">exams</data>
    </node>
    <node id="1678">
      <data key="d1">message</data>
      <data key="d2">I'm ending up with a k^2 somewhere which makes me think I'm on the wrong track haha</data>
      <data key="d3">exams</data>
    </node>
    <node id="1679">
      <data key="d1">message</data>
      <data key="d2">if it's undirected then yes, that does make sense</data>
      <data key="d3">exams</data>
    </node>
    <node id="1680">
      <data key="d1">message</data>
      <data key="d2">I am lost on HW4, question 1. The description says we can use grouping however we want, so I have made multiple sets containing numbers. These sets represent possible numbers that could be used in the first slot, second slot, third slot, and fourth slot of the time format. Is this allowed? Some of the sets have overlapping numbers because some numbers can be used in multiple slots. I could send it to a TA to look over to make sure I'm on the right track.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1681">
      <data key="d1">message</data>
      <data key="d2">If there is an error can I submit a 3rd time to fix this?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1682">
      <data key="d1">message</data>
      <data key="d2">Ok great! I'm pretty sure mine works then. However, I've labeled the sets a,b,c, etc., and when I use an element from one of them as a transition function, i put x e a for example, instead of the set label, a. Should I be doing that instead?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1683">
      <data key="d1">message</data>
      <data key="d2">Best of luck! Hope it goes well and she makes a quick recovery 💌</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1684">
      <data key="d1">message</data>
      <data key="d2">For bucket 80 i'm passing all of the tests except input 6, are there any pointers anyone has as to what this input is testing that the others aren't? My graph isn't getting the right sccs on this input for whatever reason if that helps</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1685">
      <data key="d1">message</data>
      <data key="d2">Where do we find the practice midterm? I’ve looked on the schedule and under the content tab</data>
      <data key="d3">general</data>
    </node>
    <node id="1686">
      <data key="d1">message</data>
      <data key="d2">Go to schedule and look under friday of last week</data>
      <data key="d3">response</data>
    </node>
    <node id="1687">
      <data key="d1">message</data>
      <data key="d2">Do we need to submit anything on LS?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1688">
      <data key="d1">message</data>
      <data key="d2">I've been looking a little at evaluate_predicate and interpret_queries, and I don't quite follow the notes in the project specifications. Why would evaluate predicate return a predicate? Shouldn't the queries return a new Relation?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1689">
      <data key="d1">message</data>
      <data key="d2">When does Prof. Goodrich recommend starting the project? I know he said soon, but usually he indicates a specific lecture</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1690">
      <data key="d1">message</data>
      <data key="d2">Ah I see. Thanks &lt;Person&gt;</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1691">
      <data key="d1">message</data>
      <data key="d2">Anyone want to check answers to the practice exam in a bit? Headed into an exam but after I’m free</data>
      <data key="d3">exams</data>
    </node>
    <node id="1692">
      <data key="d1">message</data>
      <data key="d2">Undefined would be the better response, but yea</data>
      <data key="d3">exams</data>
    </node>
    <node id="1693">
      <data key="d1">message</data>
      <data key="d2">Try distributing all terms, moving everything over the denominator of 2, and then factoring the polynomial</data>
      <data key="d3">exams</data>
    </node>
    <node id="1694">
      <data key="d1">message</data>
      <data key="d2">What is meant by the truth table method? How do we show that?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1695">
      <data key="d1">message</data>
      <data key="d2">Thanks!</data>
      <data key="d3">homework</data>
    </node>
    <node id="1696">
      <data key="d1">message</data>
      <data key="d2">I'm having a similar issue</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1697">
      <data key="d1">message</data>
      <data key="d2">I'm having a similar issue</data>
      <data key="d3">response</data>
    </node>
    <node id="1698">
      <data key="d1">message</data>
      <data key="d2">I have that issue</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1699">
      <data key="d1">message</data>
      <data key="d2">&lt;@&amp;1126568267176222800&gt;  will the exams in this class be online or in the testing center?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1700">
      <data key="d1">message</data>
      <data key="d2">Hi &lt;Person&gt;a I would be interested as well if possible!</data>
      <data key="d3">response</data>
    </node>
    <node id="1701">
      <data key="d1">message</data>
      <data key="d2">If you're asking about questions 1 and 2, question 1 asks for a simple graph and question 2 asks for a directed graph. I think that the curly braces are used for simple graphs while parenthesis are used for directed graphs, like shown in the powerpoint</data>
      <data key="d3">response</data>
    </node>
    <node id="1702">
      <data key="d1">message</data>
      <data key="d2">What is the difference in having parenthesis and curly braces for HW 18b? For example: 

E = { {1,2}, {1,3}, {1,4}, {2,4}, {3,4}}.
E = { (1,2), (2,1), (1,3), (1,1), (4,2), (4,3)}.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1703">
      <data key="d1">message</data>
      <data key="d2">For hw 6 problem 1, are we allowed to use the Kleene star to represent the possibility of multiple sets of brackets within a set of brackets?
(eg “([]())” )
Or is there another way to represent this kind of pattern?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1704">
      <data key="d1">message</data>
      <data key="d2">anyone else have this weird bug where a automata randomly decides some extra character are part of it's token, when if its num_read isnt supposed to be able to go over the number of characters the token has? for example, in this picture the num_read = 5, when it should equal two, but there are only two points where num_read can increase and after each run I reset the automata.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1705">
      <data key="d1">message</data>
      <data key="d2">ok I think I solved that problem</data>
      <data key="d3">response</data>
    </node>
    <node id="1706">
      <data key="d1">message</data>
      <data key="d2">As im iterating through the two tuple sets, my code keeps saying the tuples set of the other relation gets changed in interation, but I dont see anywhere where i delete or add tuples from the set within my join code. I was wondering if anyone is experiencing something similar?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1707">
      <data key="d1">message</data>
      <data key="d2">Where is the prep exam located?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1708">
      <data key="d1">message</data>
      <data key="d2">https://discord.gg/RS7gpXzZ
BYU CS server</data>
      <data key="d3">general</data>
    </node>
    <node id="1709">
      <data key="d1">message</data>
      <data key="d2">thx that helps</data>
      <data key="d3">general</data>
    </node>
    <node id="1710">
      <data key="d1">message</data>
      <data key="d2">Can someone tell me what all the functions are supposed to do from the starter code so I have an idea of what to put in there?
example: get_name(self) or reset(self) .... ect

I'm having trouble visualizing the class stuff into code especially the starter code. Also I will need to add other functions for other things like SCHEMES or whatever right?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1711">
      <data key="d1">message</data>
      <data key="d2">Is this the full terminal output?</data>
      <data key="d3">response</data>
    </node>
    <node id="1712">
      <data key="d1">message</data>
      <data key="d2">I did this project by taking what was in the Jupyter notebook and expanding on it vastly.</data>
      <data key="d3">response</data>
    </node>
    <node id="1713">
      <data key="d1">message</data>
      <data key="d2">do you recommend using all the functions already there or making your own later on as it goes? I'm seeing a lot of functions empty that idk what they are supposed to do and the TA just deleted them in class</data>
      <data key="d3">response</data>
    </node>
    <node id="1714">
      <data key="d1">message</data>
      <data key="d2">I restarted my computer then used cd within command prompt to move into my lab folder and got it to work</data>
      <data key="d3">response</data>
    </node>
    <node id="1715">
      <data key="d1">message</data>
      <data key="d2">i had the same if not a similar problem, i essentially had to find the pytest file move in then within command line use 'cd' to move into the file directory before running the command</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1716">
      <data key="d1">message</data>
      <data key="d2">what about these functions: 
Am I supposed to mess with these or leave them alone:</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1717">
      <data key="d1">message</data>
      <data key="d2">Use this. Each class has it's own datatype, and that'll help you know what each thing needs to return</data>
      <data key="d3">response</data>
    </node>
    <node id="1718">
      <data key="d1">message</data>
      <data key="d2">what is the datalog_program part supposed to return? im unsure if im calling expressions in it right and using other functions correctly (fyi im doing return not passing in the predicate)</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1719">
      <data key="d1">message</data>
      <data key="d2">when i run the debugger with a breakpoint at the function its stops then when i step over it just goes to another class entirely</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1720">
      <data key="d1">message</data>
      <data key="d2">same, did you figure it out?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1721">
      <data key="d1">message</data>
      <data key="d2">just checking this is the correct way to check this to either keep looping or lambda and move forward</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1722">
      <data key="d1">message</data>
      <data key="d2">this and the slides have been super helpful but im still feeling slightly lost. if someone could hop on with me to look over what i have so far and explain/help me talk my thoughts through that'd be great</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1723">
      <data key="d1">message</data>
      <data key="d2">what is the difference betweent the 2 selects?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1724">
      <data key="d1">message</data>
      <data key="d2">I’ll try that but I think that’s what I had and it was having errors</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1725">
      <data key="d1">message</data>
      <data key="d2">no i mean like the jupyter notbook has like some symbols and stuff for when making a new relation and making a new name</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1726">
      <data key="d1">message</data>
      <data key="d2">yeah i see that #1 has the str val but the other doesnt and so does it just see if the 2 indexes have the same val then saves those?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1727">
      <data key="d1">message</data>
      <data key="d2">how do we grab the rules on the right side? is the token set up so its simpler than i think?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1728">
      <data key="d1">message</data>
      <data key="d2">so then if im doing a for loop in self.datalog.rules rules.bodypredicates would work</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1729">
      <data key="d1">message</data>
      <data key="d2">for 5a would the difference of the normal vs. reverse be that anything before can cause dependancy so then running it backwards makes the result slightly different?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1730">
      <data key="d1">message</data>
      <data key="d2">ok i just sent it if you can take a look</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1731">
      <data key="d1">message</data>
      <data key="d2">for hw 8, it seems we should be able to find something kinda like in class in order to get the answers. is that right? where would that be or how should i go about the hw 8?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1732">
      <data key="d1">message</data>
      <data key="d2">12, 7, 9, 1D right?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1733">
      <data key="d1">message</data>
      <data key="d2">i keep having this problem no matter how I format it</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1734">
      <data key="d1">message</data>
      <data key="d2">I am having the same problem</data>
      <data key="d3">response</data>
    </node>
    <node id="1735">
      <data key="d1">message</data>
      <data key="d2">are TAs available from 11-12 today?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1736">
      <data key="d1">message</data>
      <data key="d2">I am in the same boat, I would go over them tomorrow morning</data>
      <data key="d3">response</data>
    </node>
    <node id="1737">
      <data key="d1">message</data>
      <data key="d2">I am in the same boat, I would go over them tomorrow morning</data>
      <data key="d3">exams</data>
    </node>
    <node id="1738">
      <data key="d1">message</data>
      <data key="d2">Has anyone else had issues with receiving Import Errors when running the test cases? I was able to get the test code to run using
python -m pytest test.py -v --tb=short --bucket=80
but did not receive the same output as in the Project 0 specs. Any thoughts? This is the output I did receive:</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1739">
      <data key="d1">message</data>
      <data key="d2">the errors are from the command</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1740">
      <data key="d1">message</data>
      <data key="d2">I just checked and i have the most recent version of python downloaded...</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1741">
      <data key="d1">message</data>
      <data key="d2">I have a diagram that may help you &lt;@376240717875642368&gt; 🙂</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1742">
      <data key="d1">message</data>
      <data key="d2">Would anyone be interested in meeting at 1pm in the lab to review for the exam? (for those who cannot meet at 12)</data>
      <data key="d3">exams</data>
    </node>
    <node id="1743">
      <data key="d1">message</data>
      <data key="d2">I was curious to know how others have resolved the issue of an input line holding SchemesRules (in example) and marking it as indivual FSA's instead of putting them into one ID like it should. I've tried checking the next input for a space, but that breaks lines where the input is only 'Schemes' with no space or anything afterwards.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1744">
      <data key="d1">message</data>
      <data key="d2">I did also try checking the next input right after 'Schemes' for a \n, but I might be implementing it wrong.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1745">
      <data key="d1">message</data>
      <data key="d2">I’m finishing the practice problems by this evening. Would anyone want to go over them either tonight or in the morning? It would be over discord/zoom</data>
      <data key="d3">exams</data>
    </node>
    <node id="1746">
      <data key="d1">message</data>
      <data key="d2">I found the last third of the after class PowerPoint from November 20 to be helpful. Also, if anyone is interested, I’d like to compare answers and talk about differences to see if we’re understanding correctly (if that’s allowed).</data>
      <data key="d3">homework</data>
    </node>
    <node id="1747">
      <data key="d1">message</data>
      <data key="d2">I resubmitted project 5a, do I need to meet with a TA to get that regraded?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1748">
      <data key="d1">message</data>
      <data key="d2">I had this same issue. If an SCC has a rule that depends on either itself or another rule in the scc, you need to output that rule on the last line and let the fixed point algorithm iterator go up one. I was able to match the 80% test cases when I did that.</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1749">
      <data key="d1">message</data>
      <data key="d2">If we do a depth first search and end up with multiple subtrees, how do we do a post-order traversal of the forest? Do we do a postorder traversal of each tree in the order they were created? This is in relation to HW 23 problem 2: "Add postorder numbers as subscripts to each node name". 

Also, problem 4a on HW 23 asks us to do a DFS on the graph from problem 2, but we already did a DFS on it in problem 2, correct?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1750">
      <data key="d1">message</data>
      <data key="d2">Hey, not sure why, but the tests work on my machine, but... apparently crash the auto grader?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1751">
      <data key="d1">message</data>
      <data key="d2">Hey, so the google form at the start of the text walkthrough doesn't work yet.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1752">
      <data key="d1">message</data>
      <data key="d2">Trying to follow the project 0 tutorial and this is what I'm getting on my macbook when I try and run the local tests. Is it a different command on mac or am I doing something wrong?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1753">
      <data key="d1">message</data>
      <data key="d2">sure!</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1754">
      <data key="d1">message</data>
      <data key="d2">could anyone remind me how pytest works / what command to run / where to find that info? been a minute lol</data>
      <data key="d3">general</data>
    </node>
    <node id="1755">
      <data key="d1">message</data>
      <data key="d2">I'm not quite sure how, but I don't seem to have any actions available on my github after pushing up my changes. The tutorial doesn't mention any kind of set up, I assumed it just came standard with the github classroom thing</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1756">
      <data key="d1">message</data>
      <data key="d2">kagren11</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1757">
      <data key="d1">message</data>
      <data key="d2">Do we need a  parse_datalog function within the parser class when verifying the grammar?  Or should that somehow be part of the datalog class we are required to have?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1758">
      <data key="d1">message</data>
      <data key="d2">I have this same question</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1759">
      <data key="d1">message</data>
      <data key="d2">&lt;@190134597370118144&gt; Kind of a side question, but for the union, how to you access the relations in the database?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1760">
      <data key="d1">message</data>
      <data key="d2">would anyone be able to help for a sec on project 4? The TA's are done.</data>
      <data key="d3">general</data>
    </node>
    <node id="1761">
      <data key="d1">message</data>
      <data key="d2">Okay, I’m pretty sure I know what’s going on.</data>
      <data key="d3">response</data>
    </node>
    <node id="1762">
      <data key="d1">message</data>
      <data key="d2">Anyone know how to fix this github issue?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1763">
      <data key="d1">message</data>
      <data key="d2">thank you!!</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1764">
      <data key="d1">message</data>
      <data key="d2">would anyone be available for a sec to help on project 4?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1765">
      <data key="d1">message</data>
      <data key="d2">For project pass off, do we just merge our code into main, or do we create a new branch with a new pull request?  The instructions say to close and reopen the feedback pull reuqest, is this causing the test suit to run on main, or on a new branch?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1766">
      <data key="d1">message</data>
      <data key="d2">I'm getting these errors on both buckets when I run the test on github.  The tests pass when I'm on local.  Anybody know anything about this?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1767">
      <data key="d1">message</data>
      <data key="d2">If your tuples are stored in a set, it still wont order them.  You need to put them in a `List` and call `.sort` on the list.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1768">
      <data key="d1">message</data>
      <data key="d2">Figured it out.  I used tabulate to visualize the relations.  Looks like the test suite doesn't download the requirements from the `requirements.txt` file.  I removed tabulate from my project and test worked.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1769">
      <data key="d1">message</data>
      <data key="d2">Hey! I'm getting this issue when I try to push my project 1 to git. Any suggestions?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1770">
      <data key="d1">message</data>
      <data key="d2">Hey, I'm having this error when I try to run my program with for project 2. Any suggestions?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1771">
      <data key="d1">message</data>
      <data key="d2">How do I do that?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1772">
      <data key="d1">message</data>
      <data key="d2">I am also seeing that, and I deleted those files too, but it did not work</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1773">
      <data key="d1">message</data>
      <data key="d2">You have to make changes to the branch before you can make a pull request. Hit the new branch button and then go to that branch and add a readme file or make a slight change on github. Then you should be able to have an option that lets you make the pull request. That's what I did anyway and it worked for me</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1774">
      <data key="d1">message</data>
      <data key="d2">im trying to run test.py but every time i try to run it my code just runs without giving me any output or anything, its doesnt error and it wont give output it just instantly allows me to run it again, am i stupid or am i doing something incredibly wrong?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1775">
      <data key="d1">message</data>
      <data key="d2">do i need to clone the repository into the project 1 folder, or does this need to be its own separate thing?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1776">
      <data key="d1">message</data>
      <data key="d2">when is the amount of time of github processing the request that I should know its a problem? Currently sitting on about 5 mins with my most recent close</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1777">
      <data key="d1">message</data>
      <data key="d2">That's what he told our class. Friday's lecture basically had him going over what we've been learning and how it relates to the project</data>
      <data key="d3">response</data>
    </node>
    <node id="1778">
      <data key="d1">message</data>
      <data key="d2">question for the practice exam, but also in general. Can we do a resolution on like 5 or statements at a time or do we have to do it 4 seperate times when we have multiple ors of the right format?</data>
      <data key="d3">general</data>
    </node>
    <node id="1779">
      <data key="d1">message</data>
      <data key="d2">No project 3 hackathon this time</data>
      <data key="d3">general</data>
    </node>
    <node id="1780">
      <data key="d1">message</data>
      <data key="d2">the second one, so yeah, that answers my question, I'll do all the steps</data>
      <data key="d3">general</data>
    </node>
    <node id="1781">
      <data key="d1">message</data>
      <data key="d2">Quick Question regarding Project 1: I cloned the project before the pass-off tests were changed. I saw that a commit was made to my repo that presumable contains the changes needed for the new pass-offs. Can I just pull the changes or do I need to generate a new repo entirely?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1782">
      <data key="d1">message</data>
      <data key="d2">I ended up splitting it up line by line, but just iterated over all the characters and the FSA would determine how many characters to erase from the line when a token was detected.

Like here is an example:

::-(:):

The first token that would be detected is ":", I modified the FSA to count the number of characters the token is made out of. Once a token has been returned by the FSA manager, I add it to the token list then continue on with the rest of the line (erasing the number of characters that made up the previous token)

:-(:):

Then I run this through, which gets detected as the ":-" token, this has a length of two, so I erase the next two characters. 

(:):

Pass it through, repeat the same process, until the line has no more characters, then I move onto the next line, repeat the process from the beginning again, and run through the entire file until it all works out.

How I got the length of the repeated token, is everytime it passed through any FSA it would count the number of times it moved from a different state. like for ";-", it would say 'okay I found : add one to the number of characters to erase" and so on. Couldn't figure out any other way to determine the length of the token other than this as some tokens are dynamic in nature and can't be precalculated.

This would also work if you just went over the entire file like this, instead of line by line. Just my two cents</data>
      <data key="d3">response</data>
    </node>
    <node id="1783">
      <data key="d1">message</data>
      <data key="d2">I did, and I solved it by making the fsa_classes directory a python package</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1784">
      <data key="d1">message</data>
      <data key="d2">Which is why I figured it would be best to take the lexed characters off of the beginning of the input then keep running it over and over till everything has been read, but I can't think of an easy way to determin how many characters formed the token</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1785">
      <data key="d1">message</data>
      <data key="d2">when we import Callables we have the option to import it `as function` simply because funciton is easier to remember thatn Callable. This is not required and you can just call them Callables if you want</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1786">
      <data key="d1">message</data>
      <data key="d2">perfect thanks, I used the file structure that the repo came with, and it looks like it already has an __init__.py but I didn't import it as a package. Quick question, if I import it as a package do I need to refer to it as package_name.class each time I reference the class or can I use an alias to avoid that?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1787">
      <data key="d1">message</data>
      <data key="d2">thanks!</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1788">
      <data key="d1">message</data>
      <data key="d2">I have completed my project and all pytest tests pass when I run them locally on my machine, but opening the pull request on GitHub then runs the autograder which fails. I really have no idea where to start to fix this since the GitHub autograder doesn't give feedback and I'm passing all tests locally. Any simple fixes or something I'm doing wrong?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1789">
      <data key="d1">message</data>
      <data key="d2">I pushed the code and triple checked that the latest commit was included in the check</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1790">
      <data key="d1">message</data>
      <data key="d2">Hello, I have "completed" project 5a but my Directed Acyclic Graph is not very Acyclic (it has one loop. I can see where my SCCs are but for some reason the algorithm doesn't give it to me. I've quadruple checked all 4 steps end I'm still not sure what's going wrong. I don't want to post it here, but could a TA or someone who had completed the lab review my work and help me find my error?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1791">
      <data key="d1">message</data>
      <data key="d2">Still not sure why it wasn't giving me output differences, but I got it either way</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1792">
      <data key="d1">message</data>
      <data key="d2">You will need to do two traversals, and they both will use different data structures. For your first traversal, all you need is postorder, so a list of ints will do (I recommend recursion for keeping track of your stack). Since the second traversal is only to find the SCC's, you will only need one data structure to store that. A list of lists of ints worked well for me (although a list of sets of ints would also do the job). Each tree in your forest represents one SCC so one list or set of ints within your larger list would represent one tree or SCC. The overall list represents the forest, so a list of trees or SCC's which needs to be ordered, as the first tree traversed represents the sink SCC which should be evaluated first, and so forth. Let me know if I answered your question or if you're still confused</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1793">
      <data key="d1">message</data>
      <data key="d2">I was about to ask the same 😂. I was wondering if we just had to match rows but I guess it is just undefined. Thanks!</data>
      <data key="d3">exams</data>
    </node>
    <node id="1794">
      <data key="d1">message</data>
      <data key="d2">Quick question, do y'alls textbooks have this question for HW 5, I have an older edition and want to make sure it's the same</data>
      <data key="d3">homework</data>
    </node>
    <node id="1795">
      <data key="d1">message</data>
      <data key="d2">OK good just making sure, thanks!</data>
      <data key="d3">homework</data>
    </node>
    <node id="1796">
      <data key="d1">message</data>
      <data key="d2">I think VSCode is the way to go, but if you really like jetbrains that much (like me) you can use jetbrains pycharm, which is their python IDE</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1797">
      <data key="d1">message</data>
      <data key="d2">Any reason why it would deny me permission to clone the repo in VS?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1798">
      <data key="d1">message</data>
      <data key="d2">My mistake was copying the SSH link. Should just be the https link</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1799">
      <data key="d1">message</data>
      <data key="d2">Hey so I’m running into the exact same problem. I changed the command to python -m pytest test.py -v -vv —bucket=80 and it’s giving me this error now</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1800">
      <data key="d1">message</data>
      <data key="d2">Has anyone had trouble getting the tests to pass in github? All the tests pass for me locally with pytest but when I submit to github I just get "Error: exit with code 2"</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1801">
      <data key="d1">message</data>
      <data key="d2">Does that mean like the first part of the code where you print the adjacency list? Or the lines that say 'SCC: ' and then the list of rules?</data>
      <data key="d3">general</data>
    </node>
    <node id="1802">
      <data key="d1">message</data>
      <data key="d2">Have you tried clearing your cache?</data>
      <data key="d3">general</data>
    </node>
    <node id="1803">
      <data key="d1">message</data>
      <data key="d2">I am also having problems with pytest, I get this error. But if I change test.py to test nothing happens and chatgpt is no help. I've already verified installation of pip, pytest, and even re-installed python. Nothing seems to work

Error while finding module specification for 'test.py' (ModuleNotFoundError: __path__ attribute not found on 'test' while trying to find 'test.py'). Try using 'test' instead of 'test.py' as the module name.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1804">
      <data key="d1">message</data>
      <data key="d2">I didn't use an FSA for that. Instead, when I tested to see which FSAs returned true, I made the option for if everything returned false it just makes the token right there instead</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1805">
      <data key="d1">message</data>
      <data key="d2">If you never figured that out, I had the same problem and its because when I was initializing my variables of type datalog or type parameter, instead of writing "= Parameter(whatever var)" I was just writing "= whatever var" and it was just storing as a string instead of an actual instance of the class object</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1806">
      <data key="d1">message</data>
      <data key="d2">im getting an odd error when trying to run the pytest command. 

unrecognized arguments: --bucket=80

how am i supposed to test my code</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1807">
      <data key="d1">message</data>
      <data key="d2">i was one file up 🤦 Thank you</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1808">
      <data key="d1">message</data>
      <data key="d2">Does bucket 100 take waaayy longer for anyone else?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1809">
      <data key="d1">message</data>
      <data key="d2">When we're doing the logical proofs and are told to do it by "Contradiction with Resolution" but we can just use Resolution and we don't use Contradiction, will we be docked points?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1810">
      <data key="d1">message</data>
      <data key="d2">Am I trying to prove ¬(p v q) or ¬(p ^ q) in question 23 of 10a?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1811">
      <data key="d1">message</data>
      <data key="d2">Thank yall so much</data>
      <data key="d3">homework</data>
    </node>
    <node id="1812">
      <data key="d1">message</data>
      <data key="d2">Just in case anybody is in the same boat as me, on my Windows machine the command "python" or "python -3" never does anything, the actual code for me is "py -3". Just fyi in case anybody is struggling to get any of the terminal commands running</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1813">
      <data key="d1">message</data>
      <data key="d2">I was having the same problem! If somebody else is struggling, choose the non-default testing option, called pytest, and then you have to wait a long time for it to install. I wasn't patient enough so it just caused problems haha</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1814">
      <data key="d1">message</data>
      <data key="d2">Is anyone else getting this issue when running the Github autograder? All of the pytest buckets pass when I run them locally so I know its not an issue with my code</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1815">
      <data key="d1">message</data>
      <data key="d2">If you look under the `Facts:` section, you'll see that there's no fact that matches that query where the second parameter is a constant `'c'`</data>
      <data key="d3">response</data>
    </node>
    <node id="1816">
      <data key="d1">message</data>
      <data key="d2">When I select a kernel to run the Jupyter Notebook through, I select Jupyter Notebooks and it requires a password which I don't have. Am I doing something wrong?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1817">
      <data key="d1">message</data>
      <data key="d2">Yeah, actually I selected something different and now vs code is installing an extension ipykernel or something, maybe that will fix it</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1818">
      <data key="d1">message</data>
      <data key="d2">In the TA help video, the data structures only store string values of predicates in the datalog program object, not the actual objects themselves. Is this acceptable for project 3?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1819">
      <data key="d1">message</data>
      <data key="d2">You should be skipping over comments, you shouldn't fail because of one. You can do this by running advance_input() if the current token is COMMENT</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1820">
      <data key="d1">message</data>
      <data key="d2">Somehow Project 3 broke my lexer even though it worked fine in Project 1 and 2?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1821">
      <data key="d1">message</data>
      <data key="d2">Yes. After debugging I found that it lexes the entire file but breaks because there are multiple newlines at the end, which was never tested in previous projects. The program works when I remove the newlines</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1822">
      <data key="d1">message</data>
      <data key="d2">I'm having the same problem where my lexer breaks but I don't know why, did you find a solution?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1823">
      <data key="d1">message</data>
      <data key="d2">If you're having that same problem with your lexer, it seems this is the first project where a line with whitespace and nothing else is being tested, which was breaking my lexer. Fixing that made input3 work</data>
      <data key="d3">response</data>
    </node>
    <node id="1824">
      <data key="d1">message</data>
      <data key="d2">I'm having the same problem where my lexer breaks but I don't know why, did you find a solution?</data>
      <data key="d3">response</data>
    </node>
    <node id="1825">
      <data key="d1">message</data>
      <data key="d2">Do we need to account for FOLLOW sets in our parse table and add “Pop” cells?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1826">
      <data key="d1">message</data>
      <data key="d2">Same. Help?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1827">
      <data key="d1">message</data>
      <data key="d2">Has anyone figured out how make breakpoints with the debugger? I have Python and the extension activated, but the run button and debugger is in a completely different spot and clicking doesn’t create breakpoints like in the video</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1828">
      <data key="d1">message</data>
      <data key="d2">can someone clarify this for me? For homework 13 it says we need to use "null quantification" for problem 4 as defined on LS:

This rule says that I can go from
∀ x P(x) ∧ ∃ z R(z)
to
∀ ∃ z x P(x) ∧ R(z)

Is that last line a typo, where the for all symbol is followed by the there exists symbol?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1829">
      <data key="d1">message</data>
      <data key="d2">Thanks!</data>
      <data key="d3">homework</data>
    </node>
    <node id="1830">
      <data key="d1">message</data>
      <data key="d2">On Project 5a, there was a grading issue that I discussed with Professor Goodrich today. People were docked on question 4 because they did not give the evaluation order for the SCCs, when the problem didn't actually specify that the order was required. Professor Goodrich suggested that I post this here. If you or a loved one has been affected by this, you may be entitled to compensation, so talk to Prof Goodrich about it.
(TAs, you might want to boost this post so that everybody who needs to see this can)</data>
      <data key="d3">general</data>
    </node>
    <node id="1831">
      <data key="d1">message</data>
      <data key="d2">Does anyone know where to find the zoom link for class? He mentioned recording each class.</data>
      <data key="d3">general</data>
    </node>
    <node id="1832">
      <data key="d1">message</data>
      <data key="d2">is anyone else having issues with their data getting deleted when you run your "clearcurrentpredicate()"function? I am not sure if python automatically uses pointers but when I add the predicate to my datalog program data structure and then clear the current predicate it just deletes the predicate from both.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1833">
      <data key="d1">message</data>
      <data key="d2">are you getting output like this?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1834">
      <data key="d1">message</data>
      <data key="d2">I don't think it should</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1835">
      <data key="d1">message</data>
      <data key="d2">i believe those are ids</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1836">
      <data key="d1">message</data>
      <data key="d2">Can someone help me understand how the 3 nested for loops should work adding edges?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1837">
      <data key="d1">message</data>
      <data key="d2">yes that helps a ton!</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1838">
      <data key="d1">message</data>
      <data key="d2">Do we need to do anything on Learning Suite to submit the project or is pushing the changes to GitHub and doing the feedback thing enough?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1839">
      <data key="d1">message</data>
      <data key="d2">Thank you!</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1840">
      <data key="d1">message</data>
      <data key="d2">correct, it's only 2 points out of 100 (not including the weekend) meaning monday would only be 4 points off. as for the queue, it will probably be less busy but maybe not by much.</data>
      <data key="d3">general</data>
    </node>
    <node id="1841">
      <data key="d1">message</data>
      <data key="d2">correct, it's only 2 points out of 100 (not including the weekend) meaning monday would only be 4 points off. as for the queue, it will probably be less busy but maybe not by much.</data>
      <data key="d3">response</data>
    </node>
    <node id="1842">
      <data key="d1">message</data>
      <data key="d2">the zoom link for all sections can be found under an announcement on ls</data>
      <data key="d3">general</data>
    </node>
    <node id="1843">
      <data key="d1">message</data>
      <data key="d2">png would also be fine</data>
      <data key="d3">general</data>
    </node>
    <node id="1844">
      <data key="d1">message</data>
      <data key="d2">correct</data>
      <data key="d3">general</data>
    </node>
    <node id="1845">
      <data key="d1">message</data>
      <data key="d2">the zoom links for all sections can be found in an announcement on learning suite.</data>
      <data key="d3">general</data>
    </node>
    <node id="1846">
      <data key="d1">message</data>
      <data key="d2">you can submit to ls to have a record of your code if you want but that is not required</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1847">
      <data key="d1">message</data>
      <data key="d2">Project 1 Help Video:
https://youtu.be/q7Vhi4iF9yk

Watch this video after you have read the project 1 specifications, which can be found under the content tab in Learning Suite</data>
      <data key="d3">tutorials</data>
    </node>
    <node id="1848">
      <data key="d1">message</data>
      <data key="d2">on thursdays it is normally only open till 3:30</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1849">
      <data key="d1">message</data>
      <data key="d2">bullet points 2 and 3 are slightly wrong. you'll run through all the rules, then if any of them returned something other than zero, you run through all the rules again. you know you are done when you run through all the rules and they all return zero.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1850">
      <data key="d1">message</data>
      <data key="d2">I’m feeling sick as well today. I’ll still be working my same hours just remotely. Sorry for any inconvenience!</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1851">
      <data key="d1">message</data>
      <data key="d2">&lt;Person&gt; submitted a .heic file for question 4/5</data>
      <data key="d3">exam-grading-excpetions</data>
    </node>
    <node id="1852">
      <data key="d1">message</data>
      <data key="d2">same with &lt;Person&gt;</data>
      <data key="d3">exam-grading-excpetions</data>
    </node>
    <node id="1853">
      <data key="d1">message</data>
      <data key="d2">ඞ</data>
      <data key="d3">general</data>
    </node>
    <node id="1854">
      <data key="d1">message</data>
      <data key="d2">Oh, sweet! Another caveat; I really prefer to do work on a computer rather than on paper. I've shown all my work in all previous assignments, and I actually did the assignments on a notepad filed that I screenshot and turn in. Is that fine? I can show you an example so you don't have to figure out what I mean, if that'd be better.</data>
      <data key="d3">general</data>
    </node>
    <node id="1855">
      <data key="d1">message</data>
      <data key="d2">What syntax would I use to check for a new line? For my comment FSA, I need to allow it to keep going when there's a space but need to stop it when it gets to a line break.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1856">
      <data key="d1">message</data>
      <data key="d2">For more info:
- Submitted to github in the hopes that I'd magically get all the tests correct. Turns out, I forgot to take some code out, so I went to run the local tests instead to revise my code and such before committing to git again. Realized I had no idea how to
- Tried running python -m pytest test.py (various things in front of there) but they all gave me different errors.
- Tried running the test.py file itself but it says pytest is fake, which is annoyingly reminiscent of project 0 but I feel like I'm not supposed to be able to just run that file

I really have no clue what I'm doing with the terminal and wish that the material thus far had been a little more informative of it. I still don't know what most of the commands we use mean.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1857">
      <data key="d1">message</data>
      <data key="d2">Oh. Uh, well, if I had known the .split() method then I woulda done that for sure. Thank you for the info, I've been using \n shenanigans to make everything work!</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1858">
      <data key="d1">message</data>
      <data key="d2">In the project 2 demo code video, the diagram shown says that Parameter is just a string, but in the slides, it says that Parameter is a string and a boolean. Should I make my class with the string and boolean, or just use it as a string?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1859">
      <data key="d1">message</data>
      <data key="d2">String and Boolean.</data>
      <data key="d3">response</data>
    </node>
    <node id="1860">
      <data key="d1">message</data>
      <data key="d2">You ended up being right! I was using the wrong syntax for when I was adding stuff to Parameter lists. Thank you!</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1861">
      <data key="d1">message</data>
      <data key="d2">I've been looking through the resources and can find little to nothing about how to make the Header class. Where can I find something on what functions the Header class should have?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1862">
      <data key="d1">message</data>
      <data key="d2">Uhhhh I haven't run into this issue since project 0 but if I recall correctly what fixed it for me was using:
`python -m pytest test.py -v -vv --bucket=80`</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1863">
      <data key="d1">message</data>
      <data key="d2">Ah, that's basically what I ended up doing, but mine exclusively used for each loops and included a variable that counted upwards.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1864">
      <data key="d1">message</data>
      <data key="d2">For Project 5a when doing postorder, do we use the postorder where the first node popped is 1 in postorder, or do we do it where the preorder affects postorder value? (Like, if we go R0 -&gt; R1 -&gt; R2 and then pop R2, is the postorder of R2 supposed to be 1 or 4?)</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1865">
      <data key="d1">message</data>
      <data key="d2">Thank you!</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1866">
      <data key="d1">message</data>
      <data key="d2">Should I ask questions about the preparation exam here or in the homework channel?
And for question 3 on the prep exam, what's the starting symbol?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1867">
      <data key="d1">message</data>
      <data key="d2">Thank you!</data>
      <data key="d3">exams</data>
    </node>
    <node id="1868">
      <data key="d1">message</data>
      <data key="d2">After making my first attempt at the homework, I ran into an explanation for one of the questions that I got wrong that seems to have a typo. Am I misunderstanding this, or is it supposed to say "cannot be in the power set"?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1869">
      <data key="d1">message</data>
      <data key="d2">Either I am doing something very wrong or this question was designed to have its answer look like a very anxiety-inducing multiple choice answer sheet.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1870">
      <data key="d1">message</data>
      <data key="d2">gotcha!</data>
      <data key="d3">homework</data>
    </node>
    <node id="1871">
      <data key="d1">message</data>
      <data key="d2">I was also looking through the answers thinking that the last part needed to be a concat rather than a union, but I'm still confused about the part where it accepts any string starting with a C. Does (a U b)* include any string with any number of a's or b's? Because with the examples of the Kleene star we've gone over so far, it led me to believe that that would only include things like {c, ca, caa,...,cb, cbb, cbbb,...} and not cab or cabab or cabbaa. Am I misunderstanding the concept?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1872">
      <data key="d1">message</data>
      <data key="d2">I don't have the exact question with me atm, but it was the first of the questions about power sets with empty sets</data>
      <data key="d3">homework</data>
    </node>
    <node id="1873">
      <data key="d1">message</data>
      <data key="d2">I ran "python3 test_script.py" and both bucket 80 and bucket 100 say "pytest" is not recognized. Here's what I've tried to do to fix it so far:
- I looked through the video and the walkthrough, video says to run "pip install pytest" which I did, and it didn't fix this issue. 
- I then went and looked up how to install pip, and using the command I found online it said "requirement already satisfied" to everything. Didn't fix the issue.
- Restarted my computer to make sure everything was installed. Didn't fix the issue
- Tried running "pip install -U pytest". It said "requirement already satisfied" to everything. Didn't fix the issue
- Also of note, on bullet point i of the walkthrough, it says "If pytest is". I presume that's supposed to say something after that?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1874">
      <data key="d1">message</data>
      <data key="d2">Windows</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1875">
      <data key="d1">message</data>
      <data key="d2">Do we have class in person today?</data>
      <data key="d3">general</data>
    </node>
    <node id="1876">
      <data key="d1">message</data>
      <data key="d2">Do we need to anticipate multi-line strings?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1877">
      <data key="d1">message</data>
      <data key="d2">What day is the project 3 hackathon again?</data>
      <data key="d3">general</data>
    </node>
    <node id="1878">
      <data key="d1">message</data>
      <data key="d2">I don't think that's possible.</data>
      <data key="d3">response</data>
    </node>
    <node id="1879">
      <data key="d1">message</data>
      <data key="d2">Do you guys know if all the FSAs can be implemented with a single accept state?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1880">
      <data key="d1">message</data>
      <data key="d2">How are you having them add into the list? Can you post a short snippet of code?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1881">
      <data key="d1">message</data>
      <data key="d2">Did anyone have trouble only with input3 in bucket 100?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1882">
      <data key="d1">message</data>
      <data key="d2">Does anyone want to go over the practice final questions in the library?</data>
      <data key="d3">general</data>
    </node>
    <node id="1883">
      <data key="d1">message</data>
      <data key="d2">Did you guys make a new file for each FSA?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1884">
      <data key="d1">message</data>
      <data key="d2">Did you guys end up using recursion for the post order list?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1885">
      <data key="d1">message</data>
      <data key="d2">I'm in the library right now if anyone wants to go over answers on the final practice</data>
      <data key="d3">exams</data>
    </node>
    <node id="1886">
      <data key="d1">message</data>
      <data key="d2">That's what I did</data>
      <data key="d3">homework</data>
    </node>
    <node id="1887">
      <data key="d1">message</data>
      <data key="d2">Will there be anyone in the office today?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1888">
      <data key="d1">message</data>
      <data key="d2">@ the ta's: Do yall know if I can still get full points on Project 1, since my final commit for was on the due date? I didn't know how to run the autograder until the day after (i understand this is only two points we're talking about here but every bit may count in the end)</data>
      <data key="d3">general</data>
    </node>
    <node id="1889">
      <data key="d1">message</data>
      <data key="d2">Random question, if someone were to make a comment and then put the "\n" character in their comment, would that bust my code's ability to make it through the comment? If so, how come no other programming language that I know of struggles with this? How does my python IDE know the difference between the newline character and... whatever code they use to represent a newline? Could I find out what that code is and somehow bash it into my code, just to mess with my IDE? That's all.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1890">
      <data key="d1">message</data>
      <data key="d2">So your comment fsa is supposed to stop reading when it hits a new line character. As far as I know datalog doesn't include strings or comments that span multiple lines, or at least we're not dealing with any. None of the test cases have a new line character in a comment so I don't think you have to worry about it.</data>
      <data key="d3">response</data>
    </node>
    <node id="1891">
      <data key="d1">message</data>
      <data key="d2">Did you ever find a solution for this? I'm currently struggling with the same</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1892">
      <data key="d1">message</data>
      <data key="d2">what did you end up doing?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1893">
      <data key="d1">message</data>
      <data key="d2">How did you fix this? How do you pass in an instance rather than the class object itself?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1894">
      <data key="d1">message</data>
      <data key="d2">Dude yes absolutely</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1895">
      <data key="d1">message</data>
      <data key="d2">maybe get rid of the period at the front? I think that should work</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1896">
      <data key="d1">message</data>
      <data key="d2">Any idea where this is coming from? I just had the folder open before, then I closed out of VSCode, and when I got back in this hit me. I have a bunch of Jupyter stuff installed, and the thing was running before: any ideas?</data>
      <data key="d3">tutorials</data>
    </node>
    <node id="1897">
      <data key="d1">message</data>
      <data key="d2">we good to start on Project 3 yet?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1898">
      <data key="d1">message</data>
      <data key="d2">i mean... if you can do it right? I doubt anyone would deny you the right</data>
      <data key="d3">response</data>
    </node>
    <node id="1899">
      <data key="d1">message</data>
      <data key="d2">I don't understand this, and it looks like it's the only thing I have left to fix. How is an empty row still a row? Do I need to make a set with the empty string in it? The empty set itself doesn't seem to be working for this case.</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1900">
      <data key="d1">message</data>
      <data key="d2">Thank you so much!</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1901">
      <data key="d1">message</data>
      <data key="d2">Has anyone gotten an absurdly fast time for project 4?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1902">
      <data key="d1">message</data>
      <data key="d2">I don't have an autograder on my github page for project 5. Does anyone know how I can get one?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1903">
      <data key="d1">message</data>
      <data key="d2">project 4 on the left with its autograder in the feedback, project 5 on the right without it</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1904">
      <data key="d1">message</data>
      <data key="d2">It sounds like we should update the tutorial to include all the things we need to download. Like git, pytest, and whatever else</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1905">
      <data key="d1">message</data>
      <data key="d2">How much longer is the help queue open tonight?</data>
      <data key="d3">general</data>
    </node>
    <node id="1906">
      <data key="d1">message</data>
      <data key="d2">Thank you!</data>
      <data key="d3">general</data>
    </node>
    <node id="1907">
      <data key="d1">message</data>
      <data key="d2">I have, yeah</data>
      <data key="d3">general</data>
    </node>
    <node id="1908">
      <data key="d1">message</data>
      <data key="d2">The TA help slides suggest the first part of the project should be making a ToString() function for the Token class. How have people implemented theirs?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1909">
      <data key="d1">message</data>
      <data key="d2">Don't think so.</data>
      <data key="d3">response</data>
    </node>
    <node id="1910">
      <data key="d1">message</data>
      <data key="d2">...I'm only now seeing it. I suppose I'll just copy my code from Main to that file?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1911">
      <data key="d1">message</data>
      <data key="d2">Thanks</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1912">
      <data key="d1">message</data>
      <data key="d2">I have just realized I am going to have a problem submitting my code to github. I did not use the clone command from VisCode, but installed the files manually by downloading the .zip folder from GitHub. That means I have nothing to push my code to. How can I solve this?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1913">
      <data key="d1">message</data>
      <data key="d2">I get this error when I try to run that command: "fatal: not a git repository (or any of the parent directories): .git"</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1914">
      <data key="d1">message</data>
      <data key="d2">Why exactly does this project require a custom Tuple class, when it's already a base class in Python?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1915">
      <data key="d1">message</data>
      <data key="d2">So select1 only selects 1 row, and select2 gets two?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1916">
      <data key="d1">message</data>
      <data key="d2">Maps in python are called 'dicts', right?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1917">
      <data key="d1">message</data>
      <data key="d2">I keep getting this error when I try to run my code, and I'm scratching my head at how to solve it</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1918">
      <data key="d1">message</data>
      <data key="d2">No, a dictionary</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1919">
      <data key="d1">message</data>
      <data key="d2">Testing some code now, is the post-order process for input5 the following?
`[2, 1, 0, 3, 4]`</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1920">
      <data key="d1">message</data>
      <data key="d2">I would like to second this question</data>
      <data key="d3">homework</data>
    </node>
    <node id="1921">
      <data key="d1">message</data>
      <data key="d2">But in the list of premises, step 4 is "not(p *__or__* q)"</data>
      <data key="d3">response</data>
    </node>
    <node id="1922">
      <data key="d1">message</data>
      <data key="d2">TA Queue today and tomorrow *really* be like:</data>
      <data key="d3">random</data>
    </node>
    <node id="1923">
      <data key="d1">message</data>
      <data key="d2">Will there be any TAs today?</data>
      <data key="d3">ta-schedule-updates</data>
    </node>
    <node id="1924">
      <data key="d1">message</data>
      <data key="d2">Heyo. I know that we don't have class today but since the room will be open, would anyone want to still come during class time and go over the answers to the midterm review? I know that myself and one other person will be there (from 1 to 2).</data>
      <data key="d3">general</data>
    </node>
    <node id="1925">
      <data key="d1">message</data>
      <data key="d2">From all the test cases I've seen, yes</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1926">
      <data key="d1">message</data>
      <data key="d2">yes</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1927">
      <data key="d1">message</data>
      <data key="d2">I believe so. I don't think our prof. has published it yet as well as the 2nd midterm and final. I am curious though as to when we will get access to the practice exam...</data>
      <data key="d3">exams</data>
    </node>
    <node id="1928">
      <data key="d1">message</data>
      <data key="d2">Is it just me or is there a typo on 12a?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1929">
      <data key="d1">message</data>
      <data key="d2">This is basically all we need to see to know we have it turned it correctly right?</data>
      <data key="d3">general</data>
    </node>
    <node id="1930">
      <data key="d1">message</data>
      <data key="d2">According to the TA when I talked to them about it.</data>
      <data key="d3">response</data>
    </node>
    <node id="1931">
      <data key="d1">message</data>
      <data key="d2">it this all we need to know the project has been submitted correctly?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1932">
      <data key="d1">message</data>
      <data key="d2">IPyKernel</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1933">
      <data key="d1">message</data>
      <data key="d2">You need to designate what kernel you will use to run the notebook. If youre using VScode there is generally an option at the top right of the screen to choose a kernel to run.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1934">
      <data key="d1">message</data>
      <data key="d2">I'm having a very similar issue in the ModuleNotFound department, but it doesn't seem to matter how many folders I specify, my files just seem to be unable to communicate with each other. Any ideas?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1935">
      <data key="d1">message</data>
      <data key="d2">Any advisory getting all of this to work properly in CLion? I installed Python and I think I got the github stuff transferred adequately but when I try to run it it just keeps telling me it "can't find '__main__' module"</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1936">
      <data key="d1">message</data>
      <data key="d2">Oh... on the Jetbrains website it says CLion can run Python, so I figured I could. I suppose I will be humbled and use VSCode though, since I will probably not find any help here for any other program 😢</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1937">
      <data key="d1">message</data>
      <data key="d2">Honestly, for the style guide, I would check. But if the style guide doesn't say anything about it, I would actually still put it in.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1938">
      <data key="d1">message</data>
      <data key="d2">I heard it from a few others.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1939">
      <data key="d1">message</data>
      <data key="d2">This is a fine way of implementation, but I would actually take out all the comments in your lexer copied over to Project 2 from Project 1</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1940">
      <data key="d1">message</data>
      <data key="d2">He is correct.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1941">
      <data key="d1">message</data>
      <data key="d2">Yes. I do.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1942">
      <data key="d1">message</data>
      <data key="d2">Can you guys pin this message.</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1943">
      <data key="d1">message</data>
      <data key="d2">So, S can only go to "ABe", as in S --&gt; ABe. So you would represent that first row with just a bunch of "ABe"s</data>
      <data key="d3">homework</data>
    </node>
    <node id="1944">
      <data key="d1">message</data>
      <data key="d2">As for your actual question, that's what I'm going to ask the TAs today 😅</data>
      <data key="d3">homework</data>
    </node>
    <node id="1945">
      <data key="d1">message</data>
      <data key="d2">Same.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1946">
      <data key="d1">message</data>
      <data key="d2">^ In which case if this is your problem, I recommend this…go inside the thread and go through the websites.</data>
      <data key="d3">response</data>
    </node>
    <node id="1947">
      <data key="d1">message</data>
      <data key="d2">Okay, thanks.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1948">
      <data key="d1">message</data>
      <data key="d2">Okay, good to know.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1949">
      <data key="d1">message</data>
      <data key="d2">Is gitLab already set up for submissions? I’m pretty sure I have everything right but I keep seeing a 0/100. Is this something on my end or gitLab?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1950">
      <data key="d1">message</data>
      <data key="d2">Comments shouldn't have a \n in them. The comment token will end when it hits a new line</data>
      <data key="d3">general</data>
    </node>
    <node id="1951">
      <data key="d1">message</data>
      <data key="d2">This is also the problem I'm stuck with. All the FSAs are designed to only check if the input starts with the correct token, otherwise it defaults to the error state. If we throw the entire input through each FSA then only one will come back with anything and all the others will loop through their error states over and over.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1952">
      <data key="d1">message</data>
      <data key="d2">That means wherever you're trying to run it you need to add a parameter. For example if you tried something like add_fsa.run() it wouldn't work because you have to pass a string to your FSAs. To fix it you can add something inside the parenthesis like add_fsa.run(input_string}</data>
      <data key="d3">response</data>
    </node>
    <node id="1953">
      <data key="d1">message</data>
      <data key="d2">Weird. I was under the impression key words trumped everything.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1954">
      <data key="d1">message</data>
      <data key="d2">&lt;@372604023921967104&gt; try changing the line from fsa_classes.add_fsa to project1_classes.fsa_classes.add_fsa</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1955">
      <data key="d1">message</data>
      <data key="d2">Send a screenshot of your run function</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1956">
      <data key="d1">message</data>
      <data key="d2">I'm having the same problem but moving my files around hasn't been able to fix it. Some help would be great</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1957">
      <data key="d1">message</data>
      <data key="d2">You could try len(any_token)</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1958">
      <data key="d1">message</data>
      <data key="d2">My parse parameter function returns self.get_prev_token_value() and my parse parameterList returns a list of strings. I don't use the parameter class there. I only use the parameter class in the predicate class definition.</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1959">
      <data key="d1">message</data>
      <data key="d2">Why does the definition for the project function in the demo code use a list of integers?
def project(self, row_indexes: list[int])
Wouldn't we want a list of the column headers? Those aren't always integers are they?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1960">
      <data key="d1">message</data>
      <data key="d2">That's how long mine took as well and it submitted just fine on github</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1961">
      <data key="d1">message</data>
      <data key="d2">Something seems to be wrong with several test cases in the buckets. My code runs very quickly and gets everything rightt except the number of passes and an occasional output line. For example in input 6 R0 is a rule on the marriedTo relation. Just by looking at the rule it is obvious that there should only be one pass through. The scheme is marriedTo(X,Y) and the rule is marriedTo(Y,X). It should only take one iteration to print out all the resulting facts. I'll never need to run through that twice. BUT the answer output says there are two passes. It also includes a second line that repeats the rule.to_string function, something we shouldn't need as there are no new facts and should only appear if we ran throug the function again. This problem is repeated several times in input 6 and later inputs aswell. Also bucket 100 is ridiculously hard to test. Because answer 8 is so long I can't actually scroll up far enough to see what lines I got wrong.</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1962">
      <data key="d1">message</data>
      <data key="d2">For question 5c on the practice exam (and any similar questions on the exam) should we write out "AdPop" and "pusha aBB to the stack" between each step or just the stack and input string?</data>
      <data key="d3">exams</data>
    </node>
    <node id="1963">
      <data key="d1">message</data>
      <data key="d2">Whitespace needed in HW4 FSA</data>
      <data key="d3">homework</data>
    </node>
    <node id="1964">
      <data key="d1">message</data>
      <data key="d2">So I'm trying to figure out this undefined token. If we get an unterminated string, is the value of the unterminated string just the entire rest of the input file? If not how do you know where to stop? Do you go to the end of the line?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1965">
      <data key="d1">message</data>
      <data key="d2">Do I need one of the transition inputs to be ' ' for the space between 12:36 and am? Or should is that not necessary?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1966">
      <data key="d1">message</data>
      <data key="d2">Will the Project 2 overview sessions on Wednesday and Friday be recorded?</data>
      <data key="d3">general</data>
    </node>
    <node id="1967">
      <data key="d1">message</data>
      <data key="d2">I keep getting a "no tests ran in 0.02s" message when I try to use the test buckets. Has anyone else encountered that?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1968">
      <data key="d1">message</data>
      <data key="d2">It doesn't necessarily bug out, it'll just say "there's no module named fsa_classes", when there in fact is such a module. And if I create a little test with say, my ColonFSA class to see if I can get it to run on its own, it doesn't work. But if I move that ColonFSA class to the same file as my base FSA class, it will then work. So it seems like my stuff isn't importing correctly</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1969">
      <data key="d1">message</data>
      <data key="d2">I'm confused about the Domain section and the significance of those values. I don't see where it's talked about in the project details</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1970">
      <data key="d1">message</data>
      <data key="d2">Silly question but can someone explain to me why in the input0 in bucket 80, (A,'c') isn't a valid query?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1971">
      <data key="d1">message</data>
      <data key="d2">Yeah on the 3rd and last I get Yes(14) instead of Yes(8) on both of them</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1972">
      <data key="d1">message</data>
      <data key="d2">Awesome thanks</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1973">
      <data key="d1">message</data>
      <data key="d2">Ah, shoot I guess my Parameter class is incomplete because I don't have that</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1974">
      <data key="d1">message</data>
      <data key="d2">Am I correct in thinking that our project4.py file is going to be looking pretty much the same as our project3.py file from last project?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1975">
      <data key="d1">message</data>
      <data key="d2">What ended up being the issue? I'm having a similar problem of creating way too many tuples when I evaluate rules</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1976">
      <data key="d1">message</data>
      <data key="d2">&lt;@190134597370118144&gt; where did you implement the fixed point algorithm part? Did you use the return size_before - size_after in &lt;Person&gt;'s demo code?</data>
      <data key="d3">project-4</data>
    </node>
    <node id="1977">
      <data key="d1">message</data>
      <data key="d2">Part of the description in hw 4 question 3 goes over line numbers and string termination. Will those be a part of the FSA we're drawing or is that more just project1-related?</data>
      <data key="d3">homework</data>
    </node>
    <node id="1978">
      <data key="d1">message</data>
      <data key="d2">Is anyone else still having trouble with pytest -v -vv --bucket=80 command on windows? If I use python - m it stops giving me an error, but it just puts me into a python prompt instead of giving me any output like it says in the document</data>
      <data key="d3">project-0</data>
    </node>
    <node id="1979">
      <data key="d1">message</data>
      <data key="d2">&lt;@&amp;1126568267176222800&gt; A question for those who have taken this class already - when did you start prepping for the projects in this class? As in, today in class, prof. noted we wouldn't have all the info covered to start project 1 until the 18th. Do you think its worth it to look through it well before (say, now) or to wait until closer to that date?</data>
      <data key="d3">general</data>
    </node>
    <node id="1980">
      <data key="d1">message</data>
      <data key="d2">I'm trying to wrap my brain around how the size of a power set is just 2^(number of elements in the original set). Anyone got any sort of intuition as to how that comes to be? It just seems like wizardry to me right now.</data>
      <data key="d3">general</data>
    </node>
    <node id="1981">
      <data key="d1">message</data>
      <data key="d2">Figures for 13.2.2</data>
      <data key="d3">general</data>
    </node>
    <node id="1982">
      <data key="d1">message</data>
      <data key="d2">Yall does anyone know where to find the readings we are supposed to do?</data>
      <data key="d3">general</data>
    </node>
    <node id="1983">
      <data key="d1">message</data>
      <data key="d2">https://tenor.com/view/hello-there-hi-there-greetings-gif-9442662</data>
      <data key="d3">general</data>
    </node>
    <node id="1984">
      <data key="d1">message</data>
      <data key="d2">if its a set then yea order shouldn't matter</data>
      <data key="d3">general</data>
    </node>
    <node id="1985">
      <data key="d1">message</data>
      <data key="d2">I have a question about where exactly we are to start - I understand all the examples, I have read all the documentation as far as I am aware, but what I don't quite see - are we supposed to use the example code as a template? Like copy it and fill it in? Or do we have to create our own parent class and then child classes and code everything together from scratch, with those only as references?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1986">
      <data key="d1">message</data>
      <data key="d2">The undefined tokens value is just supposed to be the first character  of the illegal value. In the case of an unterminated string that's just the char '</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1987">
      <data key="d1">message</data>
      <data key="d2">Oh so we can use any of the files included in the repos as a basis for our code? That's very nice</data>
      <data key="d3">project-1</data>
    </node>
    <node id="1988">
      <data key="d1">message</data>
      <data key="d2">sure</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1989">
      <data key="d1">message</data>
      <data key="d2">is that in a loop? wouldn't that only remove one token?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1990">
      <data key="d1">message</data>
      <data key="d2">in the projects tab theres a page called passoff instructions</data>
      <data key="d3">project-2</data>
    </node>
    <node id="1991">
      <data key="d1">message</data>
      <data key="d2">i mean... if you can do it right? I doubt anyone would deny you the right</data>
      <data key="d3">project-3</data>
    </node>
    <node id="1992">
      <data key="d1">message</data>
      <data key="d2">This is more of a conceptual question than code help - when doing the DFS with the reverse postorder on the forward dependency graph (the last step to generate SCCs) is it even possible that a node will be "seen" twice? I.e. in our first DFS traverse we had to keep track of those we visited in order to prevent duplicates in the postorder. Are duplicate visits still possible when doing the final step with the reverse postorder?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1993">
      <data key="d1">message</data>
      <data key="d2">Is it somehow based on the fact that because R0 has no dependencies within itself it cannot take more than one passthrough?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1994">
      <data key="d1">message</data>
      <data key="d2">Im noticing that too. Bucket 80 file 6 is inconsistent with the string format compared to the other ones</data>
      <data key="d3">project-5</data>
    </node>
    <node id="1995">
      <data key="d1">message</data>
      <data key="d2">**[EDIT]**: I moved this post to the project 1 tab because I felt that it was useful information. The original question was about whether the EOF token should have a newline after it or go straight to the Total Tokens line.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1996">
      <data key="d1">message</data>
      <data key="d2">Ok so for anyone who sees this and might have the same question - after doing a passoff on GitHub it seems that it should be __no space__ if the parse succeeds, but if it reaches an undefined token there __is__ a space. &lt;@&amp;1126568267176222800&gt; can I get some confirmation that this is intentional? It's not a difficult fix, but I would like to know that it is intentional before I re-push the code just to find that this gets patched or something.</data>
      <data key="d3">homework</data>
    </node>
    <node id="1997">
      <data key="d1">message</data>
      <data key="d2">Hi CS236! I got this from another discord- 
Hey everyone, the Daily Universe is working on a story covering the gaming habits of BYU Students! The idea behind the story is to show the campus and those involved with it just how big gaming is (since it seems many in the top brass don't realize it or choose not to). 

As a part of that, the DU has put together a simple survey (it's not super all-encompassing, just some basics) to help gather data for the story! It doesn't collect any personal info, either, just aggregate data. It would mean a lot if you all could fill it out and even share it with anyone else you can outside the club (ward chats, classes, etc.) so that we can get the best representation of BYU and really bring light to the impact and scale of gaming on campus!

*Current BYU Students Only*

https://forms.gle/gkcGHhDXvhujfFHV8</data>
      <data key="d3">random</data>
    </node>
    <node id="1998">
      <data key="d1">message</data>
      <data key="d2">sounds good. thank you!</data>
      <data key="d3">general</data>
    </node>
    <node id="1999">
      <data key="d1">message</data>
      <data key="d2">Have you pushed your code?

If that question makes no sense, I can hop on a call and walk you through it all haha.</data>
      <data key="d3">general</data>
    </node>
    <node id="2000">
      <data key="d1">message</data>
      <data key="d2">Currently getting an error when I try to interpret schemes. Can any of y'all tell me why it's saying that the schemes part of my datalog_program is being interpreted as a string?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="2001">
      <data key="d1">message</data>
      <data key="d2">Got it. I had forgotten to modify my project 2 code to return the actual data structures rather than just strings</data>
      <data key="d3">project-3</data>
    </node>
    <node id="2002">
      <data key="d1">message</data>
      <data key="d2">is the prep exam closed notes?</data>
      <data key="d3">exams</data>
    </node>
    <node id="2003">
      <data key="d1">message</data>
      <data key="d2">Dope. Thanks for the quick response</data>
      <data key="d3">exams</data>
    </node>
    <node id="2004">
      <data key="d1">message</data>
      <data key="d2">General HW Grading Question

I got a 60/60 on Homework 1, but my grade for it is a 34/60. Am I missing something here?</data>
      <data key="d3">homework</data>
    </node>
    <node id="2005">
      <data key="d1">message</data>
      <data key="d2">thanks, &lt;Person&gt;ua!</data>
      <data key="d3">homework</data>
    </node>
    <node id="2006">
      <data key="d1">message</data>
      <data key="d2">I've had issues with this kind of stuff in the past. How did you install 3.11.5? Did you just go to the Python site and download from there?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="2007">
      <data key="d1">message</data>
      <data key="d2">I think we should start a thread for this.</data>
      <data key="d3">project-0</data>
    </node>
    <node id="2008">
      <data key="d1">message</data>
      <data key="d2">I miss breadkiller 😔</data>
      <data key="d3">general</data>
    </node>
    <node id="2009">
      <data key="d1">message</data>
      <data key="d2">Here:</data>
      <data key="d3">general</data>
    </node>
    <node id="2010">
      <data key="d1">message</data>
      <data key="d2">The project1 guide pdf available on the reading for 9/17 says the project should be written in C++, can I assume this pdf is outdated?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="2011">
      <data key="d1">message</data>
      <data key="d2">I think that's exactly what's happening Orion. I remember doing stuff with that in cs111</data>
      <data key="d3">project-2</data>
    </node>
    <node id="2012">
      <data key="d1">message</data>
      <data key="d2">try returning your out_string instead of printing it in your "project3.py" file</data>
      <data key="d3">project-3</data>
    </node>
    <node id="2013">
      <data key="d1">message</data>
      <data key="d2">Was it passing locally before?</data>
      <data key="d3">project-3</data>
    </node>
    <node id="2014">
      <data key="d1">message</data>
      <data key="d2">were any of the lab sessions recorded? I couldn't figure out where it was happening</data>
      <data key="d3">project-4</data>
    </node>
    <node id="2015">
      <data key="d1">message</data>
      <data key="d2">Is project 5 extra credit?</data>
      <data key="d3">project-5</data>
    </node>
    <node id="2016">
      <data key="d1">message</data>
      <data key="d2">since the midterm review is on the 23rd, I'd hazard a guess it's after that</data>
      <data key="d3">exams</data>
    </node>
    <node id="2017">
      <data key="d1">message</data>
      <data key="d2">Question about hw 4: To represent zero or one of a number, you can do something like ```N?``` but I don't think we've talked about this in class, should we construct our regular expressions using only the formatting learned in class?</data>
      <data key="d3">homework</data>
    </node>
    <node id="2018">
      <data key="d1">message</data>
      <data key="d2">Awesome, thanks!</data>
      <data key="d3">homework</data>
    </node>
    <node id="2019">
      <data key="d1">message</data>
      <data key="d2">I'm trying to follow the vs tutorial and download python onto my windows laptop, but when I try running the command```python --version``` I get the following error, even after using the installer for python 3.11.5

I tried using the x64 bit installer, could that be the issue? I did verify that my system uses 64 bits, not 32</data>
      <data key="d3">project-0</data>
    </node>
    <node id="2020">
      <data key="d1">message</data>
      <data key="d2">thanks!</data>
      <data key="d3">project-0</data>
    </node>
    <node id="2021">
      <data key="d1">message</data>
      <data key="d2">awesome thanks!</data>
      <data key="d3">project-0</data>
    </node>
    <node id="2022">
      <data key="d1">message</data>
      <data key="d2">Got it, so ```C:\Users\Zac\AppData\Local\Programs\Python\Python311\Scripts```</data>
      <data key="d3">project-0</data>
    </node>
    <node id="2023">
      <data key="d1">message</data>
      <data key="d2">emoji</data>
      <data key="d3">general</data>
    </node>
    <node id="2024">
      <data key="d1">message</data>
      <data key="d2">I ended up splitting it up line by line, but just iterated over all the characters and the FSA would determine how many characters to erase from the line when a token was detected.

Like here is an example:

::-(:):

The first token that would be detected is ":", I modified the FSA to count the number of characters the token is made out of. Once a token has been returned by the FSA manager, I add it to the token list then continue on with the rest of the line (erasing the number of characters that made up the previous token)

:-(:):

Then I run this through, which gets detected as the ":-" token, this has a length of two, so I erase the next two characters. 

(:):

Pass it through, repeat the same process, until the line has no more characters, then I move onto the next line, repeat the process from the beginning again, and run through the entire file until it all works out.

How I got the length of the repeated token, is everytime it passed through any FSA it would count the number of times it moved from a different state. like for ";-", it would say 'okay I found : add one to the number of characters to erase" and so on. Couldn't figure out any other way to determine the length of the token other than this as some tokens are dynamic in nature and can't be precalculated.

This would also work if you just went over the entire file like this, instead of line by line. Just my two cents</data>
      <data key="d3">project-1</data>
    </node>
    <node id="2025">
      <data key="d1">message</data>
      <data key="d2">Defintely right about the \n

Yeah you are most likely right about it technically not being an FSA but a more dynamic system. I took some liberties to make it easier to deal with, so my advice may not necessarily be recommended.

Another possible, but more difficult way to implement this could be keep track of the characters you are looping through outside of the FSA's. 

You could possibly implement a system that finds one token, and then while looping through the rest of the characters finds the next valid token outside of a STRING and COMMENT token (keeping track of the position where the last token was found to where the next token was found) . Then you can accurately determine the length of the previous token value. 

Would I personally attempt this? No, sounds like a headache. But just another approach XD</data>
      <data key="d3">project-1</data>
    </node>
    <node id="2026">
      <data key="d1">message</data>
      <data key="d2">so I am getting started on the project and I am wondering if I am doing this right? I am starting to write the parse_scheme and this is what I have. It looks horrible, any thoughts?

```python
def parse_scheme(self):
        if(self.match("ID")):
            self.advance()
            if(self.match("LEFT_PAREN")):
                self.advance()
                if(self.match("ID")):
                    self.advance()
                    self.parse_idList()
                    if(self.match("RIGHT_PAREN")):
                        ...
```

For anyone having the same issue, please watch the TA help video. self.match() function can handle the error handling as well as the advancing. so it just becomes

```python
def parse_scheme(self):
        self.match("ID")
        self.match("LEFT_PAREN")
        self.match("ID")
        self.parse_idList()
        self.match("RIGHT_PAREN")
```</data>
      <data key="d3">project-2</data>
    </node>
    <node id="2027">
      <data key="d1">message</data>
      <data key="d2">I literally just copied over the directory</data>
      <data key="d3">project-2</data>
    </node>
    <node id="2028">
      <data key="d1">message</data>
      <data key="d2">Is there anyplace where we can compare our results from Project3RelationTests.py?

I am wanting to test if my functions actually do what they are supposed to do</data>
      <data key="d3">project-3</data>
    </node>
    <node id="2029">
      <data key="d1">message</data>
      <data key="d2">Anyone run into this type of problem? Python kills my script for input 6 and 8 in the 100 bucket.</data>
      <data key="d3">project-4</data>
    </node>
    <node id="2030">
      <data key="d1">message</data>
      <data key="d2">In general how does the algorithm know how many passes to do?

For instance (80/answer7.txt) here in R0, it says 1 pass was made. But then In R1 it says 3 passes are made. In R1 on the third pass no tuples are added. I thought the passes were supposed to add tuples 

SCC: R0
before(C1,C2) :- cp(C2,C1).
  cc1='CS100', cc2='CS101'
  cc1='CS100', cc2='EE200'
  cc1='CS101', cc2='CS120'
  cc1='CS101', cc2='CS205'
  cc1='CS120', cc2='CS121'
  cc1='CS121', cc2='CS206'
  cc1='CS205', cc2='CS206'
  cc1='EE005', cc2='EE200'
1 passes: R0


SCC: R1
before(C1,C2) :- cp(C3,C1),before(C3,C2).
  cc1='CS100', cc2='CS120'
  cc1='CS100', cc2='CS205'
  cc1='CS101', cc2='CS121'
  cc1='CS101', cc2='CS206'
  cc1='CS120', cc2='CS206'
before(C1,C2) :- cp(C3,C1),before(C3,C2).
  cc1='CS100', cc2='CS121'
  cc1='CS100', cc2='CS206'
before(C1,C2) :- cp(C3,C1),before(C3,C2).
3 passes: R1</data>
      <data key="d3">project-5</data>
    </node>
    <node id="2031">
      <data key="d1">message</data>
      <data key="d2">For homework 10b, I am not able to prove the soundness of 1b</data>
      <data key="d3">homework</data>
    </node>
    <node id="2032">
      <data key="d1">message</data>
      <data key="d2">Ever get an answer smoewhere else?</data>
      <data key="d3">homework</data>
    </node>
    <node id="2033">
      <data key="d1">message</data>
      <data key="d2">In the 2nd to laat row R is T but P v Q is F</data>
      <data key="d3">homework</data>
    </node>
    <node id="2034">
      <data key="d1">message</data>
      <data key="d2">I believe "- m" should be "-m" remove the space</data>
      <data key="d3">project-0</data>
    </node>
    <node id="2035">
      <data key="d1">message</data>
      <data key="d2">I got an extension for this assignment but the main issue that I am having is when an ID is followed by tokens and then additional IDS on the same line. Is there a simple way to handle IDs you can recommend?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="2036">
      <data key="d1">message</data>
      <data key="d2">I'm getting an error that says that lexer_fsa isn't included? I think that the program isn't recognizing the file?</data>
      <data key="d3">project-1</data>
    </node>
    <node id="2037">
      <data key="d1">message</data>
      <data key="d2">I might have messed up the autograder. It's running the commands, but only on the default files, not my made ones</data>
      <data key="d3">project-1</data>
    </node>
    <node id="2038">
      <data key="d1">message</data>
      <data key="d2">When the files were imported to github all the test files had an extra line that didn't appear to be in the original commit that I could see in github. I'm not sure if this is something I should be concerned about or not, because I ended up taking away these new lines so the tests would work.</data>
      <data key="d3">project-1</data>
    </node>
    <node id="2039">
      <data key="d1">message</data>
      <data key="d2">Here's  the screenshot</data>
      <data key="d3">project-1</data>
    </node>
    <node id="2040">
      <data key="d1">message</data>
      <data key="d2">What's the issue here?  It looks exactly the same...</data>
      <data key="d3">project-2</data>
    </node>
    <node id="2041">
      <data key="d1">message</data>
      <data key="d2">So the parser should return a string with the error?</data>
      <data key="d3">project-2</data>
    </node>
    <node id="2042">
      <data key="d1">message</data>
      <data key="d2">I accidentally merged the pull request for feedback, and I tried to revert it, but I'm not sure if I did it right?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="2043">
      <data key="d1">message</data>
      <data key="d2">Got it!</data>
      <data key="d3">project-0</data>
    </node>
    <node id="2044">
      <data key="d1">message</data>
      <data key="d2">I'm still having this issue after running pip install, any other tips?</data>
      <data key="d3">project-0</data>
    </node>
    <node id="2045">
      <data key="d1">message</data>
      <data key="d2">I put my natural_join function in my relation class, that way I could call it from one relation to the relation to join onto it and I could use it on relation objects within my evaluate_rule function</data>
      <data key="d3">project-4</data>
    </node>
    <node id="2046">
      <data key="d1">message</data>
      <data key="d2">Do neither, it is an old assignment</data>
      <data key="d3">homework</data>
    </node>
    <edge source="0" target="530">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="531">
      <data key="d4">received_message</data>
    </edge>
    <edge source="0" target="532">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="533">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="534">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="535">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="536">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="537">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="538">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="539">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="540">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="541">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="542">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="543">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="544">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="545">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="546">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="547">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="548">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="549">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="550">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="551">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="552">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="553">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="554">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="555">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="556">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="557">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="558">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="559">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="560">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="561">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="562">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="563">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="564">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="565">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="566">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="567">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="568">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="569">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="570">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="571">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="572">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="573">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="574">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="575">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="576">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="577">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="578">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="579">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="580">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="581">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="582">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="583">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="584">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="585">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="586">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="587">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="588">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="589">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="590">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="591">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="592">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="593">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="594">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="595">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="596">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="597">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="598">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="599">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="600">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="601">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="602">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="603">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="604">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="605">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="606">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="607">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="608">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="609">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="610">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="611">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="612">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="613">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="614">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="615">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="616">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="617">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="618">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="619">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="620">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="621">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="622">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="623">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="624">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="625">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="626">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="627">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="628">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="629">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="630">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="631">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="632">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="633">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="634">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="635">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="636">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="637">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="638">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="639">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="640">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="641">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="642">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="643">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="644">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="645">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="646">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="647">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="648">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="649">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="650">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="651">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="652">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="653">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="654">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="655">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="656">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="657">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="658">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="659">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="660">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="661">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="662">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="663">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="664">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="665">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="666">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="667">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="668">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="669">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="670">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="671">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="672">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="673">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="674">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="675">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="676">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="677">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="678">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="679">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="680">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="681">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="682">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="683">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="684">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="685">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="686">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="0" target="687">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="610">
      <data key="d4">received_message</data>
    </edge>
    <edge source="1" target="688">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="689">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="690">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="691">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="692">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="693">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="694">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="695">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="696">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="697">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="1" target="698">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="2" target="699">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="2" target="700">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="2" target="701">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="2" target="702">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="2" target="703">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="3" target="537">
      <data key="d4">received_message</data>
    </edge>
    <edge source="3" target="704">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="3" target="705">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="3" target="706">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="3" target="707">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="3" target="708">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="3" target="709">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="3" target="710">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="3" target="711">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="3" target="712">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="4" target="713">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="4" target="714">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="4" target="715">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="5" target="689">
      <data key="d4">received_message</data>
    </edge>
    <edge source="5" target="716">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="5" target="717">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="5" target="718">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="5" target="719">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="5" target="720">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="5" target="721">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="6" target="627">
      <data key="d4">received_message</data>
    </edge>
    <edge source="6" target="722">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="6" target="723">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="6" target="724">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="6" target="725">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="7" target="726">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="8" target="727">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="595">
      <data key="d4">received_message</data>
    </edge>
    <edge source="9" target="728">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="729">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="730">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="731">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="732">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="733">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="734">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="735">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="736">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="737">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="738">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="739">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="740">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="9" target="741">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="10" target="534">
      <data key="d4">received_message</data>
    </edge>
    <edge source="10" target="742">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="10" target="743">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="10" target="744">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="10" target="745">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="10" target="746">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="10" target="747">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="10" target="748">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="10" target="749">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="11" target="750">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="11" target="751">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="11" target="752">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="11" target="753">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="11" target="754">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="11" target="755">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="11" target="756">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="11" target="757">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="12" target="629">
      <data key="d4">received_message</data>
    </edge>
    <edge source="12" target="758">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="12" target="759">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="13" target="760">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="13" target="761">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="13" target="762">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="13" target="763">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="14" target="764">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="14" target="765">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="14" target="766">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="14" target="767">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="15" target="768">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="16" target="769">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="16" target="770">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="16" target="771">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="16" target="772">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="16" target="773">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="16" target="774">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="16" target="775">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="17" target="578">
      <data key="d4">received_message</data>
    </edge>
    <edge source="17" target="776">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="17" target="777">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="17" target="778">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="17" target="779">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="17" target="780">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="17" target="781">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="17" target="782">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="783">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="784">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="785">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="786">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="787">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="788">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="789">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="790">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="791">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="792">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="793">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="794">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="795">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="796">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="797">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="798">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="799">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="800">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="801">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="802">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="803">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="804">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="805">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="806">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="807">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="808">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="809">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="810">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="811">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="812">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="18" target="813">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="19" target="814">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="19" target="815">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="686">
      <data key="d4">received_message</data>
    </edge>
    <edge source="20" target="776">
      <data key="d4">received_message</data>
    </edge>
    <edge source="20" target="816">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="817">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="818">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="819">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="820">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="821">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="822">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="823">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="824">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="825">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="826">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="827">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="828">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="829">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="830">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="831">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="832">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="833">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="834">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="835">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="836">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="837">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="838">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="839">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="840">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="841">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="842">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="843">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="844">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="845">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="846">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="847">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="848">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="849">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="850">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="851">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="852">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="853">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="854">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="855">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="856">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="857">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="858">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="859">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="860">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="861">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="862">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="863">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="864">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="865">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="866">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="867">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="868">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="869">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="20" target="870">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="21" target="871">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="21" target="872">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="21" target="873">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="21" target="874">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="21" target="875">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="22" target="876">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="22" target="877">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="22" target="878">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="22" target="879">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="23" target="594">
      <data key="d4">received_message</data>
    </edge>
    <edge source="23" target="880">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="23" target="881">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="23" target="882">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="23" target="883">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="23" target="884">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="24" target="623">
      <data key="d4">received_message</data>
    </edge>
    <edge source="24" target="885">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="24" target="886">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="24" target="887">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="24" target="888">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="25" target="889">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="25" target="890">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="25" target="891">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="26" target="733">
      <data key="d4">received_message</data>
    </edge>
    <edge source="26" target="892">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="26" target="893">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="614">
      <data key="d4">received_message</data>
    </edge>
    <edge source="27" target="745">
      <data key="d4">received_message</data>
    </edge>
    <edge source="27" target="873">
      <data key="d4">received_message</data>
    </edge>
    <edge source="27" target="894">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="895">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="896">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="897">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="898">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="899">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="900">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="901">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="902">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="903">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="904">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="905">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="906">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="907">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="908">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="909">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="910">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="911">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="912">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="913">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="914">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="915">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="916">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="917">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="918">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="919">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="920">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="921">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="922">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="923">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="924">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="925">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="926">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="927">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="928">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="929">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="930">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="931">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="932">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="933">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="934">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="935">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="27" target="936">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="28" target="937">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="28" target="938">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="28" target="939">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="28" target="940">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="28" target="941">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="28" target="942">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="28" target="943">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="28" target="944">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="28" target="945">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="29" target="946">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="29" target="947">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="29" target="948">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="29" target="949">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="29" target="950">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="29" target="951">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="29" target="952">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="29" target="953">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="29" target="954">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="29" target="955">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="30" target="956">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="30" target="957">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="30" target="958">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="30" target="959">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="31" target="960">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="32" target="961">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="32" target="962">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="32" target="963">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="32" target="964">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="32" target="965">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="33" target="767">
      <data key="d4">received_message</data>
    </edge>
    <edge source="33" target="966">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="33" target="967">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="33" target="968">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="33" target="969">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="33" target="970">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="33" target="971">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="33" target="972">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="33" target="973">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="33" target="974">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="33" target="975">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="34" target="976">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="34" target="977">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="34" target="978">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="34" target="979">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="34" target="980">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="34" target="981">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="35" target="982">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="36" target="983">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="37" target="984">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="37" target="985">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="881">
      <data key="d4">received_message</data>
    </edge>
    <edge source="38" target="986">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="987">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="988">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="989">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="990">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="991">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="992">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="993">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="994">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="995">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="996">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="997">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="998">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="999">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="1000">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="1001">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="1002">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="1003">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="38" target="1004">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="39" target="1005">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="39" target="1006">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="39" target="1007">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="711">
      <data key="d4">received_message</data>
    </edge>
    <edge source="40" target="765">
      <data key="d4">received_message</data>
    </edge>
    <edge source="40" target="967">
      <data key="d4">received_message</data>
    </edge>
    <edge source="40" target="1008">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1009">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1010">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1011">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1012">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1013">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1014">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1015">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1016">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1017">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1018">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1019">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1020">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1021">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1022">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1023">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1024">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1025">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1026">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1027">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1028">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1029">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1030">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1031">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1032">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1033">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1034">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1035">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1036">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1037">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1038">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1039">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1040">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1041">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1042">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1043">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1044">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1045">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1046">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1047">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1048">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1049">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="40" target="1050">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="41" target="707">
      <data key="d4">received_message</data>
    </edge>
    <edge source="41" target="1051">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="42" target="1052">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="42" target="1053">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="42" target="1054">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="43" target="924">
      <data key="d4">received_message</data>
    </edge>
    <edge source="43" target="988">
      <data key="d4">received_message</data>
    </edge>
    <edge source="43" target="1055">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="43" target="1056">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="43" target="1057">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="44" target="1058">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="44" target="1059">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="44" target="1060">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="725">
      <data key="d4">received_message</data>
    </edge>
    <edge source="45" target="749">
      <data key="d4">received_message</data>
    </edge>
    <edge source="45" target="1061">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1062">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1063">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1064">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1065">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1066">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1067">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1068">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1069">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1070">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1071">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1072">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1073">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1074">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1075">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="45" target="1076">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="538">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="692">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="737">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="753">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="772">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="797">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="857">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="939">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="951">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="957">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="1009">
      <data key="d4">received_message</data>
    </edge>
    <edge source="46" target="1077">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1078">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1079">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1080">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1081">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1082">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1083">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1084">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1085">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1086">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1087">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1088">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1089">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1090">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1091">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1092">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1093">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1094">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1095">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1096">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1097">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1098">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1099">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1100">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1101">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1102">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1103">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1104">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1105">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1106">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1107">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1108">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1109">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1110">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1111">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1112">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1113">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1114">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1115">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1116">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1117">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1118">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1119">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1120">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1121">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1122">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1123">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1124">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1125">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1126">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1127">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1128">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1129">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1130">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1131">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1132">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1133">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1134">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1135">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1136">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1137">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1138">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1139">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1140">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1141">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1142">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1143">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1144">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1145">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1146">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1147">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="46" target="1148">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="47" target="539">
      <data key="d4">received_message</data>
    </edge>
    <edge source="47" target="1117">
      <data key="d4">received_message</data>
    </edge>
    <edge source="47" target="1149">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="47" target="1150">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="47" target="1151">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="47" target="1152">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="47" target="1153">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="47" target="1154">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="48" target="690">
      <data key="d4">received_message</data>
    </edge>
    <edge source="48" target="995">
      <data key="d4">received_message</data>
    </edge>
    <edge source="48" target="1091">
      <data key="d4">received_message</data>
    </edge>
    <edge source="48" target="1155">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="48" target="1156">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="48" target="1157">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="49" target="822">
      <data key="d4">received_message</data>
    </edge>
    <edge source="49" target="1083">
      <data key="d4">received_message</data>
    </edge>
    <edge source="49" target="1158">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="49" target="1159">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="50" target="1160">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="50" target="1161">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="611">
      <data key="d4">received_message</data>
    </edge>
    <edge source="51" target="1082">
      <data key="d4">received_message</data>
    </edge>
    <edge source="51" target="1162">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1163">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1164">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1165">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1166">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1167">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1168">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1169">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1170">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1171">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1172">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1173">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1174">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1175">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1176">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1177">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1178">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1179">
      <data key="d4">received_message</data>
    </edge>
    <edge source="51" target="1180">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1181">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1182">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1183">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="51" target="1184">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="52" target="1185">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="52" target="1186">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="52" target="1187">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="52" target="1188">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="52" target="1189">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="52" target="1190">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="52" target="1191">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="52" target="1192">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="613">
      <data key="d4">received_message</data>
    </edge>
    <edge source="53" target="1129">
      <data key="d4">received_message</data>
    </edge>
    <edge source="53" target="1163">
      <data key="d4">received_message</data>
    </edge>
    <edge source="53" target="1193">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1194">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1195">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1196">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1197">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1198">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1199">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1200">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1201">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1202">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1203">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1204">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1205">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="53" target="1206">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="54" target="839">
      <data key="d4">received_message</data>
    </edge>
    <edge source="54" target="921">
      <data key="d4">received_message</data>
    </edge>
    <edge source="54" target="1096">
      <data key="d4">received_message</data>
    </edge>
    <edge source="54" target="1207">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="54" target="1208">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="54" target="1209">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="54" target="1210">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="54" target="1211">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="54" target="1212">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="54" target="1213">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="54" target="1214">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="54" target="1215">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="54" target="1216">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="55" target="543">
      <data key="d4">received_message</data>
    </edge>
    <edge source="55" target="1217">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="55" target="1218">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="55" target="1219">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="55" target="1220">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="55" target="1221">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="55" target="1222">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="55" target="1223">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="56" target="808">
      <data key="d4">received_message</data>
    </edge>
    <edge source="56" target="1224">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="56" target="1225">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="56" target="1226">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="56" target="1227">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="56" target="1228">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="56" target="1229">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="57" target="1230">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="57" target="1231">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="58" target="532">
      <data key="d4">received_message</data>
    </edge>
    <edge source="58" target="1232">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="58" target="1233">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="58" target="1234">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="58" target="1235">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="58" target="1236">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="58" target="1237">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="58" target="1238">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="58" target="1239">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="59" target="1116">
      <data key="d4">received_message</data>
    </edge>
    <edge source="59" target="1240">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="59" target="1241">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="59" target="1242">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="59" target="1243">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="59" target="1244">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="60" target="1245">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="60" target="1246">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="60" target="1247">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="60" target="1248">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="61" target="830">
      <data key="d4">received_message</data>
    </edge>
    <edge source="61" target="979">
      <data key="d4">received_message</data>
    </edge>
    <edge source="61" target="1249">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="61" target="1250">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="61" target="1251">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="61" target="1252">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="61" target="1253">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="61" target="1254">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="61" target="1255">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="590">
      <data key="d4">received_message</data>
    </edge>
    <edge source="62" target="763">
      <data key="d4">received_message</data>
    </edge>
    <edge source="62" target="941">
      <data key="d4">received_message</data>
    </edge>
    <edge source="62" target="1093">
      <data key="d4">received_message</data>
    </edge>
    <edge source="62" target="1201">
      <data key="d4">received_message</data>
    </edge>
    <edge source="62" target="1250">
      <data key="d4">received_message</data>
    </edge>
    <edge source="62" target="1256">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1257">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1258">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1259">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1260">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1261">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1262">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1263">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1264">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1265">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1266">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1267">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1268">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1269">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1270">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1271">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1272">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1273">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1274">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1275">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1276">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1277">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1278">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1279">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1280">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1281">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1282">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1283">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1284">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1285">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1286">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1287">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1288">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1289">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1290">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1291">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1292">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1293">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1294">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1295">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1296">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1297">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1298">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1299">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1300">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1301">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1302">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1303">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1304">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1305">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1306">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1307">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1308">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1309">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1310">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1311">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1312">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1313">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1314">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1315">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1316">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1317">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1318">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1319">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1320">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1321">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="62" target="1322">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="63" target="630">
      <data key="d4">received_message</data>
    </edge>
    <edge source="63" target="1125">
      <data key="d4">received_message</data>
    </edge>
    <edge source="63" target="1323">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="63" target="1324">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="63" target="1325">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="63" target="1326">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="63" target="1327">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="542">
      <data key="d4">received_message</data>
    </edge>
    <edge source="64" target="836">
      <data key="d4">received_message</data>
    </edge>
    <edge source="64" target="916">
      <data key="d4">received_message</data>
    </edge>
    <edge source="64" target="1110">
      <data key="d4">received_message</data>
    </edge>
    <edge source="64" target="1171">
      <data key="d4">received_message</data>
    </edge>
    <edge source="64" target="1301">
      <data key="d4">received_message</data>
    </edge>
    <edge source="64" target="1328">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1329">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1330">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1331">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1332">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1333">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1334">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1335">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1336">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1337">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1338">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1339">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1340">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1341">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1342">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1343">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1344">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1345">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1346">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1347">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1348">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1349">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1350">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1351">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="64" target="1352">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1135">
      <data key="d4">received_message</data>
    </edge>
    <edge source="65" target="1353">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1354">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1355">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1356">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1357">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1358">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1359">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1360">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1361">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1362">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1363">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1364">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1365">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1366">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1367">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1368">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1369">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1370">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1371">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1372">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1373">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1374">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1375">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1376">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1377">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1378">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1379">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1380">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1381">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1382">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1383">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1384">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1385">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1386">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1387">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1388">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1389">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1390">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1391">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1392">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1393">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1394">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1395">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1396">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1397">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1398">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1399">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1400">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1401">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="65" target="1402">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="66" target="1092">
      <data key="d4">received_message</data>
    </edge>
    <edge source="66" target="1403">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="67" target="922">
      <data key="d4">received_message</data>
    </edge>
    <edge source="67" target="1328">
      <data key="d4">received_message</data>
    </edge>
    <edge source="67" target="1404">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="67" target="1405">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="67" target="1406">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="67" target="1407">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="67" target="1408">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="68" target="560">
      <data key="d4">received_message</data>
    </edge>
    <edge source="68" target="1409">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="68" target="1410">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="68" target="1411">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="68" target="1412">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="69" target="1413">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="69" target="1414">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="69" target="1415">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="70" target="1416">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="70" target="1417">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="71" target="1086">
      <data key="d4">received_message</data>
    </edge>
    <edge source="71" target="1418">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="72" target="579">
      <data key="d4">received_message</data>
    </edge>
    <edge source="72" target="1419">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="72" target="1420">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="72" target="1421">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="72" target="1422">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="72" target="1423">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="73" target="1424">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="74" target="1133">
      <data key="d4">received_message</data>
    </edge>
    <edge source="74" target="1425">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="74" target="1426">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="74" target="1427">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="74" target="1428">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="74" target="1429">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="75" target="855">
      <data key="d4">received_message</data>
    </edge>
    <edge source="75" target="1430">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="76" target="1431">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="76" target="1432">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="77" target="900">
      <data key="d4">received_message</data>
    </edge>
    <edge source="77" target="1263">
      <data key="d4">received_message</data>
    </edge>
    <edge source="77" target="1433">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="77" target="1434">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="78" target="626">
      <data key="d4">received_message</data>
    </edge>
    <edge source="78" target="771">
      <data key="d4">received_message</data>
    </edge>
    <edge source="78" target="1111">
      <data key="d4">received_message</data>
    </edge>
    <edge source="78" target="1435">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="78" target="1436">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="78" target="1437">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="78" target="1438">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="78" target="1439">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="78" target="1440">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="78" target="1441">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="78" target="1442">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="79" target="1443">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="79" target="1444">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="80" target="1445">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="81" target="1136">
      <data key="d4">received_message</data>
    </edge>
    <edge source="81" target="1446">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="81" target="1447">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="81" target="1448">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="81" target="1449">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="81" target="1450">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="82" target="589">
      <data key="d4">received_message</data>
    </edge>
    <edge source="82" target="829">
      <data key="d4">received_message</data>
    </edge>
    <edge source="82" target="906">
      <data key="d4">received_message</data>
    </edge>
    <edge source="82" target="1181">
      <data key="d4">received_message</data>
    </edge>
    <edge source="82" target="1427">
      <data key="d4">received_message</data>
    </edge>
    <edge source="82" target="1451">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="82" target="1452">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="82" target="1453">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="82" target="1454">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="82" target="1455">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="82" target="1456">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="82" target="1457">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="82" target="1458">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="82" target="1459">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="82" target="1460">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="83" target="897">
      <data key="d4">received_message</data>
    </edge>
    <edge source="83" target="1461">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="83" target="1462">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="83" target="1463">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="84" target="1464">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="84" target="1465">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="84" target="1466">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="592">
      <data key="d4">received_message</data>
    </edge>
    <edge source="85" target="851">
      <data key="d4">received_message</data>
    </edge>
    <edge source="85" target="896">
      <data key="d4">received_message</data>
    </edge>
    <edge source="85" target="1112">
      <data key="d4">received_message</data>
    </edge>
    <edge source="85" target="1366">
      <data key="d4">received_message</data>
    </edge>
    <edge source="85" target="1467">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1468">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1469">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1470">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1471">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1472">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1473">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1474">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1475">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1476">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1477">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="85" target="1478">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="86" target="641">
      <data key="d4">received_message</data>
    </edge>
    <edge source="86" target="898">
      <data key="d4">received_message</data>
    </edge>
    <edge source="86" target="1062">
      <data key="d4">received_message</data>
    </edge>
    <edge source="86" target="1095">
      <data key="d4">received_message</data>
    </edge>
    <edge source="86" target="1245">
      <data key="d4">received_message</data>
    </edge>
    <edge source="86" target="1317">
      <data key="d4">received_message</data>
    </edge>
    <edge source="86" target="1416">
      <data key="d4">received_message</data>
    </edge>
    <edge source="86" target="1479">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="86" target="1480">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="86" target="1481">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="86" target="1482">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="86" target="1483">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="86" target="1484">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="86" target="1485">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="86" target="1486">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="86" target="1487">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="625">
      <data key="d4">received_message</data>
    </edge>
    <edge source="87" target="935">
      <data key="d4">received_message</data>
    </edge>
    <edge source="87" target="961">
      <data key="d4">received_message</data>
    </edge>
    <edge source="87" target="974">
      <data key="d4">received_message</data>
    </edge>
    <edge source="87" target="1098">
      <data key="d4">received_message</data>
    </edge>
    <edge source="87" target="1449">
      <data key="d4">received_message</data>
    </edge>
    <edge source="87" target="1488">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1489">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1490">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1491">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1492">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1493">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1494">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1495">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1496">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1497">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1498">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1499">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1500">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1501">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1502">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1503">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1504">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1505">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1506">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1507">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1508">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1509">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1510">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1511">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="87" target="1512">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="636">
      <data key="d4">received_message</data>
    </edge>
    <edge source="88" target="741">
      <data key="d4">received_message</data>
    </edge>
    <edge source="88" target="932">
      <data key="d4">received_message</data>
    </edge>
    <edge source="88" target="963">
      <data key="d4">received_message</data>
    </edge>
    <edge source="88" target="1511">
      <data key="d4">received_message</data>
    </edge>
    <edge source="88" target="1513">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1514">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1515">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1516">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1517">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1518">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1519">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1520">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1521">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1522">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1523">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1524">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1525">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1526">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1527">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1528">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1529">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1530">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1531">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1532">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1533">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1534">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1535">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1536">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1537">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1538">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1539">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1540">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1541">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1542">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1543">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1544">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1545">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1546">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1547">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1548">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1549">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1550">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1551">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1552">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1553">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1554">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1555">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1556">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1557">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1558">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1559">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1560">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1561">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1562">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1563">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1564">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="88" target="1565">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="89" target="1566">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="89" target="1567">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="90" target="541">
      <data key="d4">received_message</data>
    </edge>
    <edge source="90" target="1080">
      <data key="d4">received_message</data>
    </edge>
    <edge source="90" target="1568">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="90" target="1569">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="90" target="1570">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="609">
      <data key="d4">received_message</data>
    </edge>
    <edge source="91" target="931">
      <data key="d4">received_message</data>
    </edge>
    <edge source="91" target="1139">
      <data key="d4">received_message</data>
    </edge>
    <edge source="91" target="1571">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1572">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1573">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1574">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1575">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1576">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1577">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1578">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1579">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1580">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1581">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1582">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1583">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1584">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1585">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1586">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1587">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1588">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1589">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1590">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1591">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="91" target="1592">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="92" target="1593">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="93" target="1140">
      <data key="d4">received_message</data>
    </edge>
    <edge source="93" target="1594">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="93" target="1595">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="93" target="1596">
      <data key="d4">received_message</data>
    </edge>
    <edge source="94" target="1597">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="94" target="1598">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="94" target="1599">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="95" target="1600">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="95" target="1601">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="96" target="678">
      <data key="d4">received_message</data>
    </edge>
    <edge source="96" target="1602">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="96" target="1603">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="96" target="1604">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="97" target="1605">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="98" target="1606">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="99" target="1607">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="99" target="1608">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="99" target="1609">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="99" target="1610">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="100" target="1611">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="100" target="1612">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="101" target="1613">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="101" target="1614">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="101" target="1615">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="102" target="702">
      <data key="d4">received_message</data>
    </edge>
    <edge source="102" target="720">
      <data key="d4">received_message</data>
    </edge>
    <edge source="102" target="746">
      <data key="d4">received_message</data>
    </edge>
    <edge source="102" target="1292">
      <data key="d4">received_message</data>
    </edge>
    <edge source="102" target="1349">
      <data key="d4">received_message</data>
    </edge>
    <edge source="102" target="1603">
      <data key="d4">received_message</data>
    </edge>
    <edge source="102" target="1616">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="102" target="1617">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="102" target="1618">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="102" target="1619">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="102" target="1620">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="102" target="1621">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="102" target="1622">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="102" target="1623">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="103" target="697">
      <data key="d4">received_message</data>
    </edge>
    <edge source="103" target="1097">
      <data key="d4">received_message</data>
    </edge>
    <edge source="103" target="1487">
      <data key="d4">received_message</data>
    </edge>
    <edge source="103" target="1624">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="103" target="1625">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="103" target="1626">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="103" target="1627">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="103" target="1628">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="104" target="1087">
      <data key="d4">received_message</data>
    </edge>
    <edge source="104" target="1291">
      <data key="d4">received_message</data>
    </edge>
    <edge source="104" target="1629">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="104" target="1630">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="104" target="1631">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="104" target="1632">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="105" target="1204">
      <data key="d4">received_message</data>
    </edge>
    <edge source="105" target="1633">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="106" target="996">
      <data key="d4">received_message</data>
    </edge>
    <edge source="106" target="1114">
      <data key="d4">received_message</data>
    </edge>
    <edge source="106" target="1634">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="106" target="1635">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="106" target="1636">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="106" target="1637">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="106" target="1638">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="106" target="1639">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="107" target="1640">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="108" target="1641">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="108" target="1642">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="108" target="1643">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="108" target="1644">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="109" target="622">
      <data key="d4">received_message</data>
    </edge>
    <edge source="109" target="1645">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="109" target="1646">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="109" target="1647">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="109" target="1648">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="109" target="1649">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="109" target="1650">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="109" target="1651">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="110" target="680">
      <data key="d4">received_message</data>
    </edge>
    <edge source="110" target="1308">
      <data key="d4">received_message</data>
    </edge>
    <edge source="110" target="1405">
      <data key="d4">received_message</data>
    </edge>
    <edge source="110" target="1623">
      <data key="d4">received_message</data>
    </edge>
    <edge source="110" target="1652">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="110" target="1653">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="110" target="1654">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="110" target="1655">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="110" target="1656">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="110" target="1657">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="110" target="1658">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="111" target="1659">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="112" target="1660">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="113" target="612">
      <data key="d4">received_message</data>
    </edge>
    <edge source="113" target="1661">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="113" target="1662">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="113" target="1663">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="114" target="780">
      <data key="d4">received_message</data>
    </edge>
    <edge source="114" target="1664">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="593">
      <data key="d4">received_message</data>
    </edge>
    <edge source="115" target="850">
      <data key="d4">received_message</data>
    </edge>
    <edge source="115" target="1026">
      <data key="d4">received_message</data>
    </edge>
    <edge source="115" target="1665">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1666">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1667">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1668">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1669">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1670">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1671">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1672">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1673">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1674">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1675">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1676">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1677">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1678">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1679">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1680">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1681">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1682">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="115" target="1683">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="116" target="1173">
      <data key="d4">received_message</data>
    </edge>
    <edge source="116" target="1684">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="561">
      <data key="d4">received_message</data>
    </edge>
    <edge source="117" target="1257">
      <data key="d4">received_message</data>
    </edge>
    <edge source="117" target="1685">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="1686">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="1687">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="1688">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="1689">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="1690">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="1691">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="1692">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="1693">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="1694">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="117" target="1695">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="118" target="1696">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="118" target="1697">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="118" target="1698">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="119" target="1131">
      <data key="d4">received_message</data>
    </edge>
    <edge source="119" target="1699">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="119" target="1700">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="119" target="1701">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="119" target="1702">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="120" target="1703">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="121" target="778">
      <data key="d4">received_message</data>
    </edge>
    <edge source="121" target="1704">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="121" target="1705">
      <data key="d4">received_message</data>
    </edge>
    <edge source="121" target="1706">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="122" target="1611">
      <data key="d4">received_message</data>
    </edge>
    <edge source="122" target="1707">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="540">
      <data key="d4">received_message</data>
    </edge>
    <edge source="123" target="1088">
      <data key="d4">received_message</data>
    </edge>
    <edge source="123" target="1265">
      <data key="d4">received_message</data>
    </edge>
    <edge source="123" target="1395">
      <data key="d4">received_message</data>
    </edge>
    <edge source="123" target="1478">
      <data key="d4">received_message</data>
    </edge>
    <edge source="123" target="1539">
      <data key="d4">received_message</data>
    </edge>
    <edge source="123" target="1708">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1709">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1710">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1711">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1712">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1713">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1714">
      <data key="d4">received_message</data>
    </edge>
    <edge source="123" target="1715">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1716">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1717">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1718">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1719">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1720">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1721">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1722">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1723">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1724">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1725">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1726">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1727">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1728">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1729">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1730">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1731">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1732">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1733">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1734">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="123" target="1735">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="124" target="1736">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="124" target="1737">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="125" target="1738">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="125" target="1739">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="125" target="1740">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="126" target="1090">
      <data key="d4">received_message</data>
    </edge>
    <edge source="126" target="1741">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="126" target="1742">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="127" target="1743">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="127" target="1744">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="128" target="884">
      <data key="d4">received_message</data>
    </edge>
    <edge source="128" target="1700">
      <data key="d4">received_message</data>
    </edge>
    <edge source="128" target="1736">
      <data key="d4">received_message</data>
    </edge>
    <edge source="128" target="1745">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="128" target="1746">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="129" target="1747">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="129" target="1748">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="129" target="1749">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="130" target="838">
      <data key="d4">received_message</data>
    </edge>
    <edge source="130" target="1631">
      <data key="d4">received_message</data>
    </edge>
    <edge source="130" target="1750">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="130" target="1751">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="131" target="1072">
      <data key="d4">received_message</data>
    </edge>
    <edge source="131" target="1184">
      <data key="d4">received_message</data>
    </edge>
    <edge source="131" target="1752">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="131" target="1753">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="132" target="818">
      <data key="d4">received_message</data>
    </edge>
    <edge source="132" target="1754">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="132" target="1755">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="132" target="1756">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="133" target="1757">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="133" target="1758">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="133" target="1759">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="134" target="1572">
      <data key="d4">received_message</data>
    </edge>
    <edge source="134" target="1760">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="134" target="1761">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="134" target="1762">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="134" target="1763">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="134" target="1764">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="135" target="1765">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="135" target="1766">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="135" target="1767">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="135" target="1768">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="136" target="1769">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="136" target="1770">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="136" target="1771">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="137" target="1772">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="138" target="1451">
      <data key="d4">received_message</data>
    </edge>
    <edge source="138" target="1773">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="139" target="1094">
      <data key="d4">received_message</data>
    </edge>
    <edge source="139" target="1774">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="139" target="1775">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="139" target="1776">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1491">
      <data key="d4">received_message</data>
    </edge>
    <edge source="140" target="1777">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1778">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1779">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1780">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1781">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1782">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1783">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1784">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1785">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1786">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1787">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1788">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1789">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1790">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1791">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1792">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1793">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1794">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1795">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="140" target="1796">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="141" target="1197">
      <data key="d4">received_message</data>
    </edge>
    <edge source="141" target="1266">
      <data key="d4">received_message</data>
    </edge>
    <edge source="141" target="1797">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="141" target="1798">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="141" target="1799">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="142" target="1800">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="817">
      <data key="d4">received_message</data>
    </edge>
    <edge source="143" target="1124">
      <data key="d4">received_message</data>
    </edge>
    <edge source="143" target="1801">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1802">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1803">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1804">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1805">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1806">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1807">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1808">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1809">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1810">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1811">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1812">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="143" target="1813">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="144" target="1365">
      <data key="d4">received_message</data>
    </edge>
    <edge source="144" target="1814">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="144" target="1815">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="905">
      <data key="d4">received_message</data>
    </edge>
    <edge source="145" target="940">
      <data key="d4">received_message</data>
    </edge>
    <edge source="145" target="1580">
      <data key="d4">received_message</data>
    </edge>
    <edge source="145" target="1734">
      <data key="d4">received_message</data>
    </edge>
    <edge source="145" target="1816">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="1817">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="1818">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="1819">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="1820">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="1821">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="1822">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="1823">
      <data key="d4">received_message</data>
    </edge>
    <edge source="145" target="1824">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="1825">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="1826">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="145" target="1827">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="146" target="1828">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="146" target="1829">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="147" target="535">
      <data key="d4">received_message</data>
    </edge>
    <edge source="147" target="1830">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="148" target="907">
      <data key="d4">received_message</data>
    </edge>
    <edge source="148" target="1697">
      <data key="d4">received_message</data>
    </edge>
    <edge source="148" target="1831">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="148" target="1832">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="148" target="1833">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="148" target="1834">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="148" target="1835">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="148" target="1836">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="148" target="1837">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="149" target="1838">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="149" target="1839">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1049">
      <data key="d4">received_message</data>
    </edge>
    <edge source="150" target="1840">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1841">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1842">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1843">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1844">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1845">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1846">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1847">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1848">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1849">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1850">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1851">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="150" target="1852">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="624">
      <data key="d4">received_message</data>
    </edge>
    <edge source="151" target="934">
      <data key="d4">received_message</data>
    </edge>
    <edge source="151" target="1134">
      <data key="d4">received_message</data>
    </edge>
    <edge source="151" target="1248">
      <data key="d4">received_message</data>
    </edge>
    <edge source="151" target="1701">
      <data key="d4">received_message</data>
    </edge>
    <edge source="151" target="1853">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1854">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1855">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1856">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1857">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1858">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1859">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1860">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1861">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1862">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1863">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1864">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1865">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1866">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1867">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1868">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1869">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1870">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1871">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1872">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1873">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="151" target="1874">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="152" target="1875">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="152" target="1876">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="153" target="1079">
      <data key="d4">received_message</data>
    </edge>
    <edge source="153" target="1338">
      <data key="d4">received_message</data>
    </edge>
    <edge source="153" target="1824">
      <data key="d4">received_message</data>
    </edge>
    <edge source="153" target="1877">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="153" target="1878">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="153" target="1879">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="153" target="1880">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="153" target="1881">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="154" target="628">
      <data key="d4">received_message</data>
    </edge>
    <edge source="154" target="923">
      <data key="d4">received_message</data>
    </edge>
    <edge source="154" target="1490">
      <data key="d4">received_message</data>
    </edge>
    <edge source="154" target="1882">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="154" target="1883">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="154" target="1884">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="154" target="1885">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="154" target="1886">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="154" target="1887">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="691">
      <data key="d4">received_message</data>
    </edge>
    <edge source="155" target="1023">
      <data key="d4">received_message</data>
    </edge>
    <edge source="155" target="1089">
      <data key="d4">received_message</data>
    </edge>
    <edge source="155" target="1717">
      <data key="d4">received_message</data>
    </edge>
    <edge source="155" target="1888">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1889">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1890">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1891">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1892">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1893">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1894">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1895">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1896">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1897">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1898">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1899">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1900">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1901">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1902">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1903">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="155" target="1904">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="533">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="918">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="987">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="1085">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="1186">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="1194">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="1208">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="1231">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="1237">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="1258">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="1450">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="1841">
      <data key="d4">received_message</data>
    </edge>
    <edge source="156" target="1905">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1906">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1907">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1908">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1909">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1910">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1911">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1912">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1913">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1914">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1915">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1916">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1917">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1918">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1919">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1920">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1921">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1922">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="156" target="1923">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="157" target="781">
      <data key="d4">received_message</data>
    </edge>
    <edge source="157" target="973">
      <data key="d4">received_message</data>
    </edge>
    <edge source="157" target="1078">
      <data key="d4">received_message</data>
    </edge>
    <edge source="157" target="1180">
      <data key="d4">received_message</data>
    </edge>
    <edge source="157" target="1587">
      <data key="d4">received_message</data>
    </edge>
    <edge source="157" target="1777">
      <data key="d4">received_message</data>
    </edge>
    <edge source="157" target="1921">
      <data key="d4">received_message</data>
    </edge>
    <edge source="157" target="1924">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="157" target="1925">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="157" target="1926">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="157" target="1927">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="157" target="1928">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="158" target="1261">
      <data key="d4">received_message</data>
    </edge>
    <edge source="158" target="1929">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="158" target="1930">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="158" target="1931">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="159" target="1932">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="159" target="1933">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="160" target="1153">
      <data key="d4">received_message</data>
    </edge>
    <edge source="160" target="1934">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="160" target="1935">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="160" target="1936">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="632">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="744">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="786">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="871">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="895">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="984">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1003">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1154">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1160">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1251">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1443">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1452">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1480">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1575">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1712">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1761">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1859">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1878">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1909">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1930">
      <data key="d4">received_message</data>
    </edge>
    <edge source="161" target="1937">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1938">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1939">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1940">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1941">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1942">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1943">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1944">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1945">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1946">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1947">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="161" target="1948">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="162" target="580">
      <data key="d4">received_message</data>
    </edge>
    <edge source="162" target="1115">
      <data key="d4">received_message</data>
    </edge>
    <edge source="162" target="1949">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="596">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="719">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="899">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1178">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1215">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1262">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1434">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1486">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1594">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1614">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1666">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1713">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1890">
      <data key="d4">received_message</data>
    </edge>
    <edge source="163" target="1950">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1951">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1952">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1953">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1954">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1955">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1956">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1957">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1958">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1959">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1960">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1961">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1962">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1963">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1964">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="163" target="1965">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="700">
      <data key="d4">received_message</data>
    </edge>
    <edge source="164" target="849">
      <data key="d4">received_message</data>
    </edge>
    <edge source="164" target="1137">
      <data key="d4">received_message</data>
    </edge>
    <edge source="164" target="1815">
      <data key="d4">received_message</data>
    </edge>
    <edge source="164" target="1952">
      <data key="d4">received_message</data>
    </edge>
    <edge source="164" target="1966">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1967">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1968">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1969">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1970">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1971">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1972">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1973">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1974">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1975">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1976">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1977">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="164" target="1978">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="165" target="530">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="704">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="728">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="742">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="770">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="783">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="814">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="816">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="876">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="946">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="956">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="966">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="982">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="983">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1008">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1061">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1077">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1149">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1162">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1185">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1193">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1217">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1224">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1232">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1240">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1256">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1323">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1329">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1404">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1409">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1435">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1461">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1488">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1513">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1568">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1571">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1605">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1613">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1652">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1665">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1685">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1708">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1754">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1760">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1778">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1801">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1830">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1831">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1840">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1853">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1875">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1877">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1882">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1888">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1905">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1924">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1929">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1950">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1966">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="165" target="1979">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="165" target="1980">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="165" target="1981">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="165" target="1982">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="165" target="1983">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="165" target="171">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="172">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="173">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="174">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="175">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="176">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="177">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="178">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="179">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="180">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="181">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="182">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="183">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="184">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="185">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="186">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="187">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="188">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="189">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="190">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="191">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="192">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="193">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="194">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="195">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="196">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="197">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="198">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="199">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="200">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="201">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="202">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="165" target="203">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="166" target="591">
      <data key="d4">received_message</data>
    </edge>
    <edge source="166" target="989">
      <data key="d4">received_message</data>
    </edge>
    <edge source="166" target="1081">
      <data key="d4">received_message</data>
    </edge>
    <edge source="166" target="1570">
      <data key="d4">received_message</data>
    </edge>
    <edge source="166" target="1898">
      <data key="d4">received_message</data>
    </edge>
    <edge source="166" target="1979">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="166" target="1984">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1985">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1986">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1987">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1988">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1989">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1990">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1991">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1992">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1993">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1994">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1995">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1996">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="166" target="1997">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="167" target="536">
      <data key="d4">received_message</data>
    </edge>
    <edge source="167" target="769">
      <data key="d4">received_message</data>
    </edge>
    <edge source="167" target="1138">
      <data key="d4">received_message</data>
    </edge>
    <edge source="167" target="1421">
      <data key="d4">received_message</data>
    </edge>
    <edge source="167" target="1507">
      <data key="d4">received_message</data>
    </edge>
    <edge source="167" target="1980">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="167" target="1998">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="167" target="1999">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="167" target="2000">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="167" target="2001">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="167" target="2002">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="167" target="2003">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="167" target="2004">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="167" target="2005">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="167" target="2006">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="167" target="2007">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="856">
      <data key="d4">received_message</data>
    </edge>
    <edge source="168" target="947">
      <data key="d4">received_message</data>
    </edge>
    <edge source="168" target="977">
      <data key="d4">received_message</data>
    </edge>
    <edge source="168" target="1264">
      <data key="d4">received_message</data>
    </edge>
    <edge source="168" target="1465">
      <data key="d4">received_message</data>
    </edge>
    <edge source="168" target="1508">
      <data key="d4">received_message</data>
    </edge>
    <edge source="168" target="1514">
      <data key="d4">received_message</data>
    </edge>
    <edge source="168" target="1686">
      <data key="d4">received_message</data>
    </edge>
    <edge source="168" target="1946">
      <data key="d4">received_message</data>
    </edge>
    <edge source="168" target="1981">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="168" target="2008">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2009">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2010">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2011">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2012">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2013">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2014">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2015">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2016">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2017">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2018">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2019">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2020">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2021">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="168" target="2022">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="631">
      <data key="d4">received_message</data>
    </edge>
    <edge source="169" target="1113">
      <data key="d4">received_message</data>
    </edge>
    <edge source="169" target="1164">
      <data key="d4">received_message</data>
    </edge>
    <edge source="169" target="1219">
      <data key="d4">received_message</data>
    </edge>
    <edge source="169" target="1711">
      <data key="d4">received_message</data>
    </edge>
    <edge source="169" target="1782">
      <data key="d4">received_message</data>
    </edge>
    <edge source="169" target="1982">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="169" target="2023">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2024">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2025">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2026">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2027">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2028">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2029">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2030">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2031">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2032">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2033">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="169" target="2034">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="170" target="1983">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="171" target="1842">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="172" target="1779">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="173" target="544">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="173" target="1187">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="173" target="1515">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="174" target="1516">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="175" target="1517">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="176" target="545">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="176" target="2008">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="176" target="2023">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="177" target="546">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="177" target="1780">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="178" target="547">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="178" target="1998">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="179" target="1518">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="180" target="548">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="181" target="549">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="181" target="1906">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="182" target="1907">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="182" target="1999">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="183" target="550">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="184" target="1843">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="184" target="1854">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="185" target="819">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="186" target="1844">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="187" target="729">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="187" target="1259">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="188" target="1519">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="189" target="1802">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="190" target="1845">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="191" target="820">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="191" target="1573">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="192" target="551">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="193" target="552">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="193" target="1520">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="194" target="553">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="194" target="1195">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="194" target="1521">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="195" target="1709">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="195" target="2009">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="196" target="554">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="197" target="555">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="197" target="1522">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="198" target="556">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="198" target="773">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="198" target="937">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="198" target="1410">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="199" target="557">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="199" target="1523">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="200" target="784">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="200" target="1225">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="201" target="558">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="201" target="1330">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="202" target="1984">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="203" target="1331">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="203" target="1406">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="204" target="559">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="688">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="699">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="705">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="716">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="730">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="760">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="777">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="785">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="821">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="889">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="894">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="938">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="968">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="976">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="986">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1010">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1055">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1063">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1084">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1155">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1158">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1161">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1165">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1196">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1207">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1218">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1230">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1233">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1246">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1249">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1260">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1332">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1353">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1403">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1411">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1417">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1418">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1424">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1431">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1433">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1436">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1444">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1446">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1462">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1467">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1479">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1489">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1524">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1574">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1597">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1616">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1624">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1629">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1645">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1667">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1687">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1704">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1710">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1741">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1743">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1765">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1769">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1774">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1781">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1797">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1803">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1816">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1838">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1855">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1876">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1879">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1883">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1889">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1908">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1925">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1931">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1937">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1951">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1967">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="1985">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="2010">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="2024">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="204" target="2035">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="204" target="2036">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="204" target="2037">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="204" target="208">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="209">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="210">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="211">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="212">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="213">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="214">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="215">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="216">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="217">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="218">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="219">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="220">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="221">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="222">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="223">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="224">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="225">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="226">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="227">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="228">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="229">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="230">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="231">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="232">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="233">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="234">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="235">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="236">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="237">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="238">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="239">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="240">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="241">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="242">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="243">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="244">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="245">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="246">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="247">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="248">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="249">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="250">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="251">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="252">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="253">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="254">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="255">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="256">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="257">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="258">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="259">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="260">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="261">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="262">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="263">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="264">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="265">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="266">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="267">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="268">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="269">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="270">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="271">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="272">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="273">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="274">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="275">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="276">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="277">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="278">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="279">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="280">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="204" target="281">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="205" target="1617">
      <data key="d4">received_message</data>
    </edge>
    <edge source="205" target="2035">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="206" target="2036">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="206" target="2038">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="206" target="2039">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="206" target="2040">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="206" target="2041">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="206" target="2042">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="206" target="2043">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="206" target="2044">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="207" target="2037">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="208" target="1099">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="208" target="1159">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="209" target="1525">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="210" target="1267">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="210" target="2038">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="211" target="1166">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="211" target="1354">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="212" target="731">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="213" target="1268">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="213" target="1934">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="213" target="2039">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="214" target="823">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="214" target="1333">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="215" target="1100">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="215" target="1640">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="215" target="1646">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="215" target="1715">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="216" target="990">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="216" target="1468">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="217" target="1269">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="217" target="1492">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="218" target="1064">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="218" target="1744">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="219" target="1270">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="219" target="1437">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="219" target="1891">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="220" target="1271">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="220" target="1334">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="221" target="1335">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="221" target="1892">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="222" target="1101">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="222" target="1893">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="223" target="562">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="223" target="824">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="223" target="1198">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="223" target="1953">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="224" target="892">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="224" target="901">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="224" target="1355">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="224" target="1804">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="225" target="1356">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="225" target="1856">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="226" target="706">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="226" target="1272">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="226" target="1413">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="226" target="1576">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="227" target="1357">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="227" target="1857">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="228" target="991">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="229" target="761">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="229" target="825">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="229" target="902">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="230" target="1102">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="230" target="1336">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="231" target="1273">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="232" target="787">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="233" target="1274">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="233" target="1493">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="233" target="1954">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="233" target="1968">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="234" target="1275">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="235" target="1276">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="236" target="903">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="236" target="1494">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="236" target="1955">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="237" target="563">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="237" target="722">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="238" target="890">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="238" target="1668">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="239" target="1277">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="239" target="1577">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="240" target="1278">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="241" target="978">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="241" target="1279">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="242" target="564">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="242" target="732">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="243" target="992">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="243" target="1280">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="243" target="1716">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="244" target="1281">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="244" target="1910">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="245" target="788">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="246" target="1783">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="247" target="1282">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="247" target="1911">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="248" target="565">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="248" target="1234">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="249" target="942">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="249" target="1283">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="250" target="826">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="251" target="1495">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="252" target="1209">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="252" target="1956">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="253" target="566">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="253" target="1578">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="253" target="2025">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="254" target="567">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="255" target="568">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="255" target="1986">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="256" target="569">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="257" target="570">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="258" target="993">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="258" target="1784">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="258" target="1957">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="259" target="1785">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="260" target="1839">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="260" target="1846">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="261" target="1199">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="261" target="1526">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="261" target="1798">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="262" target="1527">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="263" target="1011">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="263" target="1528">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="264" target="571">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="264" target="1496">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="264" target="1529">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="265" target="1438">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="265" target="1497">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="265" target="1625">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="266" target="1498">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="266" target="1626">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="267" target="1598">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="268" target="1012">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="268" target="1579">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="269" target="1103">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="269" target="1499">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="270" target="1104">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="270" target="1500">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="271" target="572">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="271" target="1013">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="271" target="1627">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="271" target="1786">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="272" target="1607">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="273" target="1608">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="274" target="1014">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="274" target="1987">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="275" target="1015">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="275" target="1530">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="276" target="827">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="276" target="1105">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="277" target="573">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="277" target="1787">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="278" target="574">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="278" target="1106">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="279" target="575">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="279" target="1107">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="280" target="1108">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="280" target="1817">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="281" target="576">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="282" target="577">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="708">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="734">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="743">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="762">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="779">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="789">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="828">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="872">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="893">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="904">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="943">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="958">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="969">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="980">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="985">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="994">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1051">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1052">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1109">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1150">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1156">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1167">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1188">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1200">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1210">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1226">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1235">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1241">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1252">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1284">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1337">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1358">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1414">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1419">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1432">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1439">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1453">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1469">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1481">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1501">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1581">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1602">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1634">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1647">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1664">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1669">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1696">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1718">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1757">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1762">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1770">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1773">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1775">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1818">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1832">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1858">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1880">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1894">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1912">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1926">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1938">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1949">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1958">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1969">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="1988">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="2026">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="2040">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="282" target="283">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="284">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="285">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="286">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="287">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="288">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="289">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="290">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="291">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="292">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="293">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="294">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="295">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="296">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="297">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="298">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="299">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="300">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="301">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="302">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="303">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="304">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="305">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="306">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="307">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="308">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="309">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="310">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="311">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="312">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="313">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="314">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="315">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="316">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="282" target="317">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="283" target="790">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="283" target="1618">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="284" target="581">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="284" target="1771">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="284" target="1895">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="285" target="1285">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="285" target="1913">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="286" target="831">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="286" target="2041">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="287" target="791">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="287" target="1415">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="288" target="582">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="289" target="583">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="289" target="1719">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="289" target="1805">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="290" target="709">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="290" target="1286">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="291" target="832">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="291" target="1454">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="292" target="1455">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="292" target="1819">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="292" target="1939">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="293" target="1118">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="293" target="1242">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="293" target="1720">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="294" target="908">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="294" target="1168">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="294" target="1359">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="295" target="909">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="295" target="1456">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="296" target="1287">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="296" target="1582">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="296" target="1721">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="297" target="833">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="297" target="1583">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="298" target="1360">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="298" target="1860">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="299" target="1361">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="300" target="1362">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="301" target="944">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="302" target="970">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="302" target="1065">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="303" target="910">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="303" target="997">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="303" target="1470">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="303" target="1722">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="303" target="1940">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="304" target="1502">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="305" target="834">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="305" target="1698">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="305" target="1833">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="306" target="1482">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="306" target="1763">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="306" target="1772">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="306" target="1941">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="307" target="1363">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="308" target="584">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="308" target="911">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="309" target="1288">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="309" target="1670">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="309" target="1989">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="309" target="2011">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="310" target="585">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="310" target="1671">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="311" target="1236">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="311" target="1990">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="312" target="1503">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="313" target="735">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="314" target="1119">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="314" target="1169">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="314" target="1635">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="314" target="2027">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="315" target="835">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="315" target="1120">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="316" target="586">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="317" target="587">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="317" target="1289">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="318" target="1016">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="318" target="1531">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="318" target="1847">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="318" target="319">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="318" target="320">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="318" target="321">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="318" target="322">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="318" target="323">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="319" target="1017">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="319" target="1896">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="320" target="1018">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="320" target="1532">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="322" target="1019">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="323" target="1020">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="324" target="588">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="693">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="713">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="717">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="723">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="726">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="736">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="750">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="774">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="792">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="837">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="880">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="885">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="912">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="971">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="998">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1021">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1056">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1066">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1121">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1151">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1189">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1202">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1211">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1220">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1227">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1247">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1290">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1339">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1364">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1457">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1463">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1464">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1471">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1533">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1584">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1619">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1630">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1636">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1672">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1688">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1723">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1750">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1766">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1788">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1800">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1806">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1814">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1820">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1834">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1861">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1897">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1914">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1959">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1970">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="1991">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="2000">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="2012">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="2028">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="324" target="325">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="326">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="327">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="328">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="329">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="330">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="331">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="332">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="333">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="334">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="335">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="336">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="337">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="338">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="339">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="340">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="341">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="342">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="343">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="344">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="345">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="346">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="347">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="348">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="349">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="350">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="351">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="352">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="353">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="354">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="355">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="356">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="357">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="358">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="359">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="360">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="361">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="362">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="363">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="364">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="365">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="366">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="367">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="324" target="368">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="325" target="1367">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="325" target="1899">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="326" target="597">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="326" target="1458">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="327" target="1368">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="327" target="1900">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="328" target="1369">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="328" target="1971">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="329" target="840">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="329" target="1293">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="329" target="1340">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="329" target="1370">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="330" target="1294">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="331" target="1371">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="331" target="1915">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="332" target="598">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="332" target="1972">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="333" target="599">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="333" target="1190">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="334" target="1372">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="334" target="2001">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="335" target="1373">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="336" target="1374">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="336" target="1807">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="337" target="1375">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="337" target="1973">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="338" target="841">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="338" target="1295">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="338" target="1632">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="338" target="1862">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="339" target="913">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="339" target="1376">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="340" target="1377">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="340" target="1863">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="341" target="886">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="341" target="1821">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="342" target="600">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="342" target="887">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="343" target="793">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="344" target="601">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="344" target="714">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="345" target="602">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="345" target="914">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="345" target="1296">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="345" target="1378">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="346" target="1297">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="346" target="1724">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="347" target="1298">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="347" target="1466">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="347" target="2013">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="348" target="1379">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="349" target="603">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="349" target="775">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="350" target="842">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="351" target="604">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="352" target="882">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="352" target="1767">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="353" target="1768">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="354" target="1380">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="354" target="1725">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="355" target="1381">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="355" target="1726">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="356" target="605">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="357" target="843">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="357" target="1203">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="358" target="794">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="358" target="844">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="359" target="606">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="359" target="1916">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="360" target="795">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="360" target="1534">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="361" target="845">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="361" target="1789">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="362" target="846">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="363" target="847">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="363" target="1637">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="364" target="915">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="364" target="1638">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="365" target="607">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="365" target="1299">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="366" target="1122">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="367" target="738">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="368" target="1848">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="369" target="608">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="694">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="701">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="739">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="747">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="751">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="796">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="815">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="848">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="917">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="999">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1022">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1123">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1170">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1205">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1212">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1253">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1300">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1324">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1341">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1382">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1472">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1535">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1585">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1599">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1600">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1620">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1633">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1661">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1673">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1689">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1706">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1727">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1764">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1776">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1808">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1822">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1835">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1881">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1901">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1917">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1960">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="1974">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="2014">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="2029">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="369" target="370">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="371">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="372">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="373">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="374">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="375">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="376">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="377">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="378">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="380">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="381">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="382">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="383">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="384">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="385">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="386">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="387">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="388">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="389">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="390">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="391">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="392">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="393">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="369" target="394">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="370" target="1674">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="370" target="1849">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="371" target="615">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="371" target="1662">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="372" target="1383">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="372" target="1690">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="374" target="616">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="374" target="852">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="374" target="1126">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="374" target="1157">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="375" target="617">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="375" target="1601">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="376" target="1384">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="377" target="1385">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="377" target="1758">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="378" target="798">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="378" target="1302">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="378" target="1759">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="378" target="2045">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="379" target="1485">
      <data key="d4">received_message</data>
    </edge>
    <edge source="379" target="2045">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="379" target="2046">
      <data key="d4">posted_message</data>
    </edge>
    <edge source="380" target="1303">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="380" target="1918">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="380" target="1975">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="381" target="799">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="381" target="1000">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="381" target="1127">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="382" target="800">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="383" target="801">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="384" target="919">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="384" target="1386">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="385" target="853">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="385" target="1304">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="385" target="1342">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="386" target="1305">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="386" target="1343">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="386" target="1728">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="386" target="1976">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="387" target="618">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="387" target="1001">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="388" target="619">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="388" target="1344">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="389" target="1306">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="389" target="1345">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="390" target="620">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="390" target="1346">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="391" target="1307">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="392" target="1387">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="393" target="1388">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="394" target="802">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="395" target="621">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="710">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="724">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="748">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="758">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="782">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="803">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="854">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="874">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="888">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="920">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="948">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1024">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1057">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1067">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1128">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1172">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1206">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1213">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1228">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1243">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1309">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1325">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1347">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1389">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1407">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1412">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1425">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1430">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1440">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1504">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1586">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1648">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1653">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1663">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1675">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1684">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1729">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1747">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1790">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1836">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1864">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1884">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1902">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1919">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1942">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1961">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="1992">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="2015">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="2030">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="395" target="396">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="397">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="398">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="399">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="400">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="401">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="402">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="403">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="404">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="405">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="406">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="407">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="408">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="409">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="410">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="395" target="411">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="396" target="858">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="397" target="633">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="398" target="634">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="399" target="859">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="400" target="1390">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="400" target="1730">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="401" target="1391">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="401" target="1865">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="402" target="925">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="402" target="1748">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="402" target="1993">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="403" target="926">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="403" target="1174">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="403" target="1654">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="403" target="1994">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="404" target="860">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="404" target="1483">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="405" target="927">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="405" target="1310">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="405" target="1791">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="406" target="928">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="406" target="1837">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="407" target="1792">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="408" target="875">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="408" target="929">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="409" target="1505">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="410" target="804">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="410" target="861">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="410" target="1903">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="411" target="862">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="411" target="1655">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="412" target="635">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="695">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="740">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="764">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="805">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="883">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="891">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="930">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="949">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="959">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="962">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="972">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1005">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1068">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1130">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1175">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1191">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1244">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1311">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1326">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1348">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1392">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1408">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1420">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1441">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1447">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1506">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1536">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1588">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1612">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1621">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1649">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1656">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1676">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1691">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1699">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1707">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1737">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1742">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1745">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1809">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1866">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1885">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1927">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="1962">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="2002">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="2016">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="412" target="413">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="414">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="415">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="416">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="417">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="418">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="419">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="420">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="421">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="422">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="423">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="424">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="425">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="426">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="412" target="427">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="413" target="950">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="413" target="1069">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="414" target="1537">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="415" target="806">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="416" target="637">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="416" target="2003">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="417" target="1176">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="417" target="1677">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="417" target="1867">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="418" target="638">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="419" target="1509">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="419" target="1589">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="419" target="1692">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="419" target="1793">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="420" target="1678">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="420" target="1693">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="421" target="1393">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="421" target="1679">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="422" target="703">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="422" target="1350">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="422" target="1442">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="423" target="1312">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="423" target="1351">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="424" target="1313">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="424" target="1352">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="425" target="1314">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="425" target="1590">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="426" target="639">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="426" target="1650">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="427" target="1315">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="428" target="640">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="696">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="718">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="727">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="752">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="759">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="807">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="863">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="877">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="933">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="945">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="952">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="960">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="964">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1002">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1006">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1025">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1070">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1132">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1177">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1214">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1229">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1238">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1254">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1316">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1327">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1394">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1426">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1448">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1459">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1473">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1484">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1510">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1538">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1566">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1569">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1591">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1595">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1615">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1628">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1639">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1641">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1651">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1657">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1680">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1694">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1702">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1703">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1731">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1746">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1749">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1794">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1810">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1825">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1828">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1868">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1886">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1920">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1928">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1943">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1963">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1977">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="1995">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="2004">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="2017">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="2031">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="2046">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="428" target="429">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="430">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="431">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="432">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="433">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="434">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="435">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="436">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="437">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="438">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="439">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="440">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="441">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="442">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="443">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="444">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="445">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="446">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="447">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="448">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="449">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="450">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="451">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="452">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="453">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="454">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="455">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="456">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="457">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="458">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="459">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="460">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="461">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="462">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="463">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="464">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="465">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="466">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="467">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="468">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="469">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="470">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="471">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="472">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="473">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="474">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="475">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="476">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="477">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="478">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="479">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="480">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="481">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="482">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="483">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="484">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="485">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="428" target="486">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="429" target="642">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="430" target="1396">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="431" target="1397">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="431" target="2032">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="432" target="1398">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="432" target="1540">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="433" target="1399">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="434" target="643">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="434" target="1141">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="434" target="1681">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="435" target="1541">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="436" target="1542">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="437" target="1182">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="437" target="1543">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="438" target="1544">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="439" target="644">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="440" target="1400">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="441" target="645">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="441" target="1829">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="442" target="1027">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="442" target="1142">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="443" target="1445">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="443" target="1606">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="443" target="1826">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="443" target="2033">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="444" target="1545">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="445" target="646">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="445" target="1695">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="446" target="647">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="446" target="1028">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="446" target="1318">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="446" target="1474">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="447" target="648">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="447" target="1428">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="447" target="1732">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="448" target="649">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="448" target="1319">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="449" target="650">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="450" target="1546">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="451" target="1143">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="451" target="1869">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="452" target="651">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="453" target="809">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="453" target="1944">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="454" target="652">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="455" target="754">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="455" target="1996">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="456" target="1964">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="457" target="653">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="457" target="1870">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="458" target="864">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="458" target="1144">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="459" target="1547">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="460" target="953">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="460" target="1795">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="461" target="1029">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="461" target="1145">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="461" target="1192">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="462" target="1071">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="462" target="1320">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="463" target="654">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="463" target="1642">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="464" target="655">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="465" target="1321">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="465" target="1643">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="466" target="656">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="467" target="1216">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="467" target="1965">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="468" target="1030">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="469" target="657">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="470" target="1031">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="471" target="658">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="471" target="2018">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="472" target="659">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="472" target="1682">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="473" target="660">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="473" target="698">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="473" target="1871">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="474" target="810">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="475" target="865">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="475" target="878">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="476" target="661">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="476" target="1032">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="476" target="1475">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="477" target="1033">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="477" target="1476">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="478" target="1460">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="478" target="1548">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="479" target="1034">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="479" target="1644">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="480" target="1035">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="480" target="2005">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="481" target="1549">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="481" target="1872">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="482" target="662">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="482" target="1550">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="483" target="1551">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="484" target="663">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="484" target="1552">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="484" target="1567">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="485" target="664">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="485" target="1553">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="486" target="936">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="486" target="1401">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="486" target="1811">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="487" target="665">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="811">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="954">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="1221">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="1255">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="1402">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="1512">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="1592">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="1660">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="1922">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="1997">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="487" target="488">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="488" target="812">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="489" target="666">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="715">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="755">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="766">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="768">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="813">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="866">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="879">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="975">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="981">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1004">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1036">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1053">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1058">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1073">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1146">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1152">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1183">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1239">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1322">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1422">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1429">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1477">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1733">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1738">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1751">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1752">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1755">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1812">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1827">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1873">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1932">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1935">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1945">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="1978">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="2006">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="2019">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="2034">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="2042">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="489" target="490">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="491">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="492">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="493">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="494">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="495">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="496">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="497">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="498">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="499">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="500">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="501">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="502">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="503">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="504">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="505">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="506">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="507">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="508">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="509">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="489" target="510">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="490" target="867">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="491" target="667">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="491" target="1054">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="492" target="668">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="492" target="1756">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="493" target="1037">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="493" target="1799">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="493" target="1874">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="494" target="1038">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="494" target="1739">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="494" target="1813">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="495" target="1933">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="495" target="2020">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="496" target="669">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="496" target="1947">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="497" target="670">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="498" target="1039">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="498" target="1796">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="498" target="1936">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="499" target="671">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="499" target="1740">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="500" target="1040">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="500" target="2043">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="501" target="672">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="501" target="1948">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="502" target="1041">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="502" target="2021">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="503" target="1042">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="504" target="955">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="504" target="1074">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="504" target="1753">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="504" target="2044">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="505" target="1043">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="505" target="1904">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="506" target="673">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="506" target="1044">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="506" target="2022">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="507" target="1059">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="507" target="1147">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="508" target="674">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="508" target="1045">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="508" target="1060">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="508" target="1148">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="509" target="1423">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="509" target="2007">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="510" target="1046">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="511" target="675">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="511" target="756">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="511" target="1047">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="511" target="1554">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="511" target="512">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="511" target="513">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="511" target="514">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="511" target="515">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="511" target="516">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="512" target="1555">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="513" target="676">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="514" target="677">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="515" target="1556">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="516" target="1557">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="517" target="679">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="712">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="721">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="757">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="868">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="965">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1007">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1048">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1075">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1222">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1558">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1593">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1604">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1609">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1622">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1658">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1659">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1683">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1735">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1850">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1887">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="1923">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="517" target="518">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="517" target="519">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="517" target="520">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="517" target="521">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="517" target="522">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="517" target="523">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="517" target="524">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="517" target="525">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="517" target="526">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="518" target="1559">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="519" target="1560">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="520" target="1561">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="521" target="1562">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="522" target="681">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="523" target="682">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="523" target="1223">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="524" target="683">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="525" target="684">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="525" target="1563">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="526" target="685">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="526" target="869">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="527" target="687">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="527" target="870">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="527" target="1050">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="527" target="1076">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="527" target="1564">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="527" target="1610">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="527" target="1851">
      <data key="d4">message_in_channel</data>
    </edge>
    <edge source="527" target="528">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="527" target="529">
      <data key="d4">thread_in_channel</data>
    </edge>
    <edge source="528" target="1565">
      <data key="d4">message_in_thread</data>
    </edge>
    <edge source="529" target="1852">
      <data key="d4">message_in_thread</data>
    </edge>
  </graph>
</graphml>
